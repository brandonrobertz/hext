// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 66 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 66, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 2, 3, 63, 
	2, 4, 5, 2, 6, 7, 2, 8, 
	9, 2, 10, 11, 2, 16, 17, 2, 
	19, 35, 2, 19, 71, 2, 24, 35, 
	2, 24, 71, 2, 25, 35, 2, 25, 
	71, 2, 26, 35, 2, 26, 71, 2, 
	27, 35, 2, 27, 71, 2, 28, 35, 
	2, 28, 71, 2, 29, 35, 2, 29, 
	71, 2, 30, 35, 2, 30, 71, 2, 
	31, 35, 2, 31, 71, 2, 32, 35, 
	2, 32, 71, 2, 33, 35, 2, 33, 
	71, 2, 36, 37, 2, 38, 40, 2, 
	39, 40, 2, 40, 41, 2, 66, 68, 
	2, 67, 68, 3, 0, 60, 65, 3, 
	1, 58, 65, 3, 1, 59, 65, 3, 
	1, 61, 65, 3, 1, 62, 65, 3, 
	1, 64, 65, 3, 38, 40, 41, 3, 
	39, 40, 41, 3, 49, 57, 65, 3, 
	49, 60, 65, 3, 51, 57, 65, 3, 
	51, 60, 65, 3, 52, 59, 65, 3, 
	52, 62, 65, 3, 53, 59, 65, 3, 
	53, 62, 65, 3, 54, 59, 65, 3, 
	54, 62, 65, 3, 55, 59, 65, 3, 
	55, 62, 65, 3, 56, 59, 65, 3, 
	56, 62, 65, 4, 3, 63, 64, 65, 
	4, 40, 41, 58, 65, 4, 40, 41, 
	61, 65, 5, 38, 40, 41, 58, 65, 
	5, 38, 40, 41, 61, 65, 5, 39, 
	40, 41, 58, 65, 5, 39, 40, 41, 
	61, 65
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 43, 44, 46, 48, 50, 56, 61, 
	62, 64, 66, 67, 68, 70, 72, 74, 
	80, 81, 83, 85, 86, 87, 98, 100, 
	102, 107, 108, 110, 112, 113, 118, 129, 
	133, 135, 137, 143, 144, 146, 148, 149, 
	151, 153, 161, 166, 174, 182, 183, 185, 
	187, 189, 195, 196, 198, 200, 201, 202, 
	204, 206, 208, 214, 215, 217, 219, 220, 
	223, 224, 225, 226, 227, 228, 229, 230, 
	232, 234, 236, 237, 239, 240, 242, 244, 
	245, 246, 247, 248, 249, 250, 251, 253, 
	255, 258, 260, 263, 266, 267, 268, 269, 
	270, 273, 275, 277, 279, 280, 282, 283, 
	285, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 303, 304, 305, 306, 
	312, 331, 336, 337, 339, 341, 343, 349, 
	354, 355, 357, 359, 360, 361, 363, 365, 
	367, 373, 374, 376, 378, 379, 398, 402, 
	404, 406, 412, 413, 415, 417, 418, 420, 
	422, 430, 435, 443, 451, 452, 454, 456, 
	458, 464, 465, 467, 469, 470, 472, 474, 
	480, 485, 486, 488, 490, 491, 497, 509, 
	510, 512, 514, 516, 522, 523, 525, 527, 
	528, 531, 532, 533, 534, 535, 536, 537, 
	538, 540, 542, 544, 545, 547, 548, 559, 
	560, 562, 564, 565, 566, 567, 568, 569, 
	570, 571, 573, 575, 578, 580, 583, 586, 
	587, 588, 589, 590, 593, 595, 597, 599, 
	600, 602, 603, 605, 607, 608, 615, 616, 
	617, 618, 619, 620, 621, 622, 623, 624, 
	625, 626, 627, 628, 629, 630, 632, 635, 
	641, 642, 643, 644, 645, 646, 647, 648, 
	649, 650, 651, 652, 654, 657, 658, 659, 
	660, 661, 667, 668, 669, 670, 671, 672, 
	674, 675, 676, 677, 678, 684, 685, 686, 
	687, 688, 689, 690, 696, 697, 698, 699, 
	700, 702, 703, 704, 705, 706, 712, 713, 
	714, 715, 716, 717, 718, 724, 726, 727, 
	728, 729, 736, 737, 738, 739, 740, 741, 
	742, 743, 744, 745, 746, 747, 748, 749, 
	750, 751, 753, 756, 758, 764, 765, 766, 
	767, 768, 769, 770, 771, 772, 773, 774, 
	775, 777, 780, 781, 782, 783, 784, 786, 
	787, 788, 789, 790, 791, 793, 794, 795, 
	796, 797, 799, 800, 801, 802, 803, 804, 
	805, 807, 808, 809, 810, 811, 813, 814, 
	815, 816, 817, 819, 820, 821, 822, 823, 
	824, 825, 827, 828, 829, 830, 833, 834, 
	835, 836, 837, 838, 843, 845, 849, 851, 
	854, 856, 859, 860, 861, 862, 863, 864, 
	865, 866, 867, 868, 869, 870, 872, 873, 
	874, 875, 876, 877, 882, 884, 888, 890, 
	893, 895, 898, 899, 900, 901, 902, 903, 
	904, 905, 906, 907, 908, 909, 910, 911, 
	912, 917, 919, 923, 925, 928, 930, 933, 
	934, 935, 936, 937, 938, 939, 940, 941, 
	942, 943, 944, 945, 946, 947, 952, 954, 
	958, 960, 963, 965, 968, 969, 970, 971, 
	972, 973, 974, 975, 976, 977, 978, 979, 
	981, 982, 983, 984, 985, 987, 988, 989, 
	990, 991, 992, 993, 995, 996, 997, 1000, 
	1001, 1002, 1003, 1004, 1005, 1010, 1012, 1016, 
	1022, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 
	1044, 1045, 1046, 1047, 1048, 1053, 1055, 1059, 
	1065, 1068, 1070, 1073, 1074, 1075, 1076, 1077, 
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 
	1086, 1087, 1092, 1094, 1098, 1104, 1107, 1109, 
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1131, 
	1133, 1137, 1143, 1146, 1148, 1151, 1152, 1153, 
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 
	1162, 1164, 1165, 1166, 1167, 1168, 1174, 1175, 
	1176, 1177, 1178, 1179, 1180, 1186, 1191, 1192, 
	1201, 1206, 1220, 1225, 1230
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 45, 
	61, 94, 124, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 62, 34, 
	39, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 92, 34, 92, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 48, 57, 65, 90, 97, 
	122, 34, 39, 47, 61, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 112, 114, 116, 114, 
	101, 112, 101, 110, 100, 40, 34, 39, 
	34, 92, 34, 92, 41, 45, 124, 92, 
	39, 92, 39, 92, 92, 101, 103, 101, 
	120, 40, 47, 47, 92, 47, 92, 41, 
	99, 105, 45, 124, 41, 99, 105, 41, 
	99, 105, 92, 114, 105, 109, 40, 45, 
	124, 34, 39, 34, 92, 34, 92, 41, 
	45, 124, 92, 39, 92, 39, 92, 92, 
	116, 114, 105, 112, 45, 116, 97, 103, 
	115, 36, 42, 45, 61, 94, 124, 101, 
	120, 116, 36, 42, 45, 61, 94, 124, 
	32, 33, 36, 42, 45, 47, 61, 62, 
	94, 95, 124, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 47, 62, 9, 13, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 32, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 32, 33, 36, 42, 45, 
	47, 61, 62, 94, 95, 124, 9, 13, 
	48, 57, 65, 90, 97, 122, 34, 39, 
	47, 61, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 47, 
	62, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 92, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 92, 
	34, 92, 32, 47, 62, 63, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 32, 47, 62, 63, 9, 
	13, 32, 47, 62, 63, 9, 13, 48, 
	57, 65, 90, 97, 122, 61, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	112, 114, 116, 114, 101, 112, 101, 110, 
	100, 40, 34, 39, 34, 92, 34, 92, 
	41, 45, 124, 62, 34, 39, 95, 45, 
	46, 48, 57, 65, 90, 97, 122, 92, 
	39, 92, 39, 92, 92, 101, 103, 101, 
	120, 40, 47, 47, 92, 47, 92, 41, 
	99, 105, 45, 124, 41, 99, 105, 41, 
	99, 105, 92, 114, 105, 109, 40, 45, 
	124, 34, 39, 34, 92, 34, 92, 41, 
	45, 124, 92, 39, 92, 39, 92, 92, 
	97, 99, 101, 102, 108, 110, 111, 116, 
	116, 114, 105, 98, 117, 116, 101, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 32, 47, 58, 62, 9, 
	13, 104, 105, 108, 100, 45, 99, 111, 
	117, 110, 116, 40, 48, 57, 41, 48, 
	57, 109, 112, 116, 121, 32, 47, 58, 
	62, 9, 13, 105, 114, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 32, 47, 
	58, 62, 9, 13, 102, 45, 116, 121, 
	112, 101, 32, 47, 58, 62, 9, 13, 
	97, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 111, 116, 116, 40, 
	58, 97, 99, 101, 102, 108, 110, 111, 
	116, 116, 114, 105, 98, 117, 116, 101, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 41, 58, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	41, 58, 105, 114, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 116, 104, 45, 99, 108, 
	111, 104, 105, 108, 100, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 41, 58, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 41, 58, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 110, 
	108, 121, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 104, 45, 99, 108, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 32, 47, 58, 62, 9, 13, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 110, 108, 
	121, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 42, 65, 90, 97, 122, 62, 
	45, 62, 95, 48, 57, 65, 90, 97, 
	122, 42, 65, 90, 97, 122, 32, 45, 
	47, 58, 62, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 35, 60, 9, 
	13, 32, 35, 60, 9, 13, 32, 34, 
	35, 39, 60, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 3, 2, 2, 
	3, 1, 2, 2, 1, 3, 3, 4, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 6, 3, 6, 6, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 3, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 3, 3, 1, 1, 1, 1, 
	3, 2, 2, 2, 1, 2, 1, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 1, 1, 1, 6, 
	11, 3, 1, 2, 2, 2, 4, 3, 
	1, 2, 2, 1, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 11, 4, 2, 
	2, 4, 1, 2, 2, 1, 2, 2, 
	6, 3, 6, 6, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 2, 2, 4, 
	3, 1, 2, 2, 1, 4, 4, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 1, 2, 1, 3, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 3, 2, 3, 3, 1, 
	1, 1, 1, 3, 2, 2, 2, 1, 
	2, 1, 2, 2, 1, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 2, 1, 1, 
	1, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 2, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	2, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 1, 1, 3, 
	1, 6, 3, 3, 6
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 4, 0, 0, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 4, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 2, 0, 3, 
	2, 4, 1, 1, 5
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 53, 55, 58, 61, 64, 70, 75, 
	77, 80, 83, 85, 87, 90, 93, 96, 
	102, 104, 107, 110, 112, 114, 122, 125, 
	128, 133, 135, 138, 141, 143, 148, 156, 
	161, 164, 167, 173, 175, 178, 181, 183, 
	186, 189, 197, 202, 210, 218, 220, 223, 
	226, 229, 235, 237, 240, 243, 245, 247, 
	250, 253, 256, 262, 264, 267, 270, 272, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	293, 296, 299, 301, 304, 306, 309, 312, 
	314, 316, 318, 320, 322, 324, 326, 329, 
	332, 336, 339, 343, 347, 349, 351, 353, 
	355, 359, 362, 365, 368, 370, 373, 375, 
	378, 381, 383, 385, 387, 389, 391, 393, 
	395, 397, 399, 401, 408, 410, 412, 414, 
	421, 437, 442, 444, 447, 450, 453, 459, 
	464, 466, 469, 472, 474, 476, 479, 482, 
	485, 491, 493, 496, 499, 501, 517, 522, 
	525, 528, 534, 536, 539, 542, 544, 547, 
	550, 558, 563, 571, 579, 581, 584, 587, 
	590, 596, 598, 601, 604, 606, 609, 612, 
	618, 623, 625, 628, 631, 633, 639, 648, 
	650, 653, 656, 659, 665, 667, 670, 673, 
	675, 679, 681, 683, 685, 687, 689, 691, 
	693, 696, 699, 702, 704, 707, 709, 717, 
	719, 722, 725, 727, 729, 731, 733, 735, 
	737, 739, 742, 745, 749, 752, 756, 760, 
	762, 764, 766, 768, 772, 775, 778, 781, 
	783, 786, 788, 791, 794, 796, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 839, 
	845, 847, 849, 851, 853, 855, 857, 859, 
	861, 863, 865, 867, 869, 872, 874, 876, 
	878, 880, 886, 888, 890, 892, 894, 896, 
	899, 901, 903, 905, 907, 913, 915, 917, 
	919, 921, 923, 925, 931, 933, 935, 937, 
	939, 942, 944, 946, 948, 950, 956, 958, 
	960, 962, 964, 966, 968, 974, 977, 979, 
	981, 983, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 
	1019, 1021, 1023, 1026, 1029, 1035, 1037, 1039, 
	1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 
	1057, 1059, 1062, 1064, 1066, 1068, 1070, 1073, 
	1075, 1077, 1079, 1081, 1083, 1086, 1088, 1090, 
	1092, 1094, 1097, 1099, 1101, 1103, 1105, 1107, 
	1109, 1112, 1114, 1116, 1118, 1120, 1123, 1125, 
	1127, 1129, 1131, 1134, 1136, 1138, 1140, 1142, 
	1144, 1146, 1149, 1151, 1153, 1155, 1159, 1161, 
	1163, 1165, 1167, 1169, 1174, 1176, 1180, 1183, 
	1187, 1189, 1192, 1194, 1196, 1198, 1200, 1202, 
	1204, 1206, 1208, 1210, 1212, 1214, 1217, 1219, 
	1221, 1223, 1225, 1227, 1232, 1234, 1238, 1241, 
	1245, 1247, 1250, 1252, 1254, 1256, 1258, 1260, 
	1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 
	1278, 1283, 1285, 1289, 1292, 1296, 1298, 1301, 
	1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 
	1319, 1321, 1323, 1325, 1327, 1329, 1334, 1336, 
	1340, 1343, 1347, 1349, 1352, 1354, 1356, 1358, 
	1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 
	1377, 1379, 1381, 1383, 1385, 1388, 1390, 1392, 
	1394, 1396, 1398, 1400, 1403, 1405, 1407, 1411, 
	1413, 1415, 1417, 1419, 1421, 1426, 1428, 1432, 
	1438, 1442, 1444, 1447, 1449, 1451, 1453, 1455, 
	1457, 1459, 1461, 1463, 1465, 1467, 1469, 1472, 
	1474, 1476, 1478, 1480, 1482, 1487, 1489, 1493, 
	1499, 1503, 1505, 1508, 1510, 1512, 1514, 1516, 
	1518, 1520, 1522, 1524, 1526, 1528, 1530, 1532, 
	1534, 1536, 1541, 1543, 1547, 1553, 1557, 1559, 
	1562, 1564, 1566, 1568, 1570, 1572, 1574, 1576, 
	1578, 1580, 1582, 1584, 1586, 1588, 1590, 1595, 
	1597, 1601, 1607, 1611, 1613, 1616, 1618, 1620, 
	1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 
	1638, 1641, 1643, 1645, 1647, 1649, 1655, 1657, 
	1659, 1661, 1663, 1665, 1667, 1673, 1677, 1679, 
	1686, 1690, 1701, 1706, 1711
};

static const short _hext_trans_targs[] = {
	610, 1, 3, 605, 608, 609, 609, 0, 
	4, 5, 245, 610, 4, 0, 4, 5, 
	610, 6, 4, 136, 136, 0, 611, 0, 
	7, 122, 132, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 47, 70, 79, 0, 18, 0, 19, 
	24, 0, 21, 23, 20, 21, 23, 20, 
	4, 22, 5, 610, 4, 0, 4, 5, 
	610, 4, 0, 23, 20, 21, 26, 25, 
	21, 26, 25, 26, 25, 28, 0, 29, 
	33, 0, 31, 32, 30, 31, 32, 30, 
	4, 22, 5, 610, 4, 0, 32, 30, 
	31, 35, 34, 31, 35, 34, 35, 34, 
	37, 0, 38, 42, 45, 45, 46, 46, 
	46, 0, 40, 41, 39, 40, 41, 39, 
	4, 5, 610, 4, 0, 41, 39, 40, 
	44, 43, 40, 44, 43, 44, 43, 4, 
	5, 610, 4, 0, 4, 5, 610, 4, 
	46, 46, 46, 0, 48, 52, 55, 62, 
	0, 50, 51, 49, 50, 51, 49, 4, 
	22, 5, 610, 4, 0, 51, 49, 50, 
	54, 53, 50, 54, 53, 54, 53, 57, 
	61, 56, 57, 61, 56, 4, 58, 5, 
	610, 59, 60, 4, 0, 4, 5, 610, 
	4, 0, 4, 58, 5, 610, 59, 60, 
	4, 0, 4, 58, 5, 610, 59, 60, 
	4, 0, 61, 56, 63, 67, 0, 65, 
	66, 64, 65, 66, 64, 4, 22, 5, 
	610, 4, 0, 66, 64, 65, 69, 68, 
	65, 69, 68, 69, 68, 71, 0, 72, 
	76, 0, 74, 75, 73, 74, 75, 73, 
	4, 22, 5, 610, 4, 0, 75, 73, 
	74, 78, 77, 74, 78, 77, 78, 77, 
	80, 96, 109, 0, 81, 0, 82, 0, 
	83, 0, 84, 0, 85, 0, 86, 0, 
	87, 0, 88, 93, 0, 90, 92, 89, 
	90, 92, 89, 91, 0, 36, 79, 0, 
	92, 89, 90, 95, 94, 90, 95, 94, 
	95, 94, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 102, 0, 104, 108, 
	103, 104, 108, 103, 105, 106, 107, 0, 
	36, 79, 0, 105, 106, 107, 0, 105, 
	106, 107, 0, 108, 103, 110, 0, 111, 
	0, 112, 0, 113, 36, 79, 0, 114, 
	119, 0, 116, 118, 115, 116, 118, 115, 
	117, 0, 36, 79, 0, 118, 115, 116, 
	121, 120, 116, 121, 120, 121, 120, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 17, 27, 36, 47, 70, 79, 0, 
	133, 0, 134, 0, 135, 0, 17, 27, 
	36, 47, 70, 79, 0, 4, 137, 138, 
	148, 157, 5, 158, 610, 191, 136, 200, 
	4, 136, 136, 136, 0, 4, 5, 610, 
	4, 0, 139, 0, 140, 145, 0, 142, 
	144, 141, 142, 144, 141, 4, 143, 5, 
	610, 4, 0, 4, 5, 610, 4, 0, 
	144, 141, 142, 147, 146, 142, 147, 146, 
	147, 146, 149, 0, 150, 154, 0, 152, 
	153, 151, 152, 153, 151, 4, 143, 5, 
	610, 4, 0, 153, 151, 152, 156, 155, 
	152, 156, 155, 156, 155, 4, 137, 138, 
	148, 157, 5, 158, 612, 191, 136, 200, 
	4, 136, 136, 136, 0, 159, 163, 166, 
	173, 0, 161, 162, 160, 161, 162, 160, 
	4, 143, 5, 610, 4, 0, 162, 160, 
	161, 165, 164, 161, 165, 164, 165, 164, 
	168, 172, 167, 168, 172, 167, 4, 169, 
	5, 610, 170, 171, 4, 0, 4, 5, 
	610, 4, 0, 4, 169, 5, 610, 170, 
	171, 4, 0, 4, 169, 5, 610, 170, 
	171, 4, 0, 172, 167, 174, 178, 0, 
	176, 177, 175, 176, 177, 175, 4, 143, 
	5, 610, 4, 0, 177, 175, 176, 180, 
	179, 176, 180, 179, 180, 179, 183, 185, 
	182, 183, 185, 182, 4, 5, 610, 184, 
	4, 0, 4, 5, 610, 4, 0, 185, 
	182, 183, 188, 187, 183, 188, 187, 188, 
	187, 4, 5, 610, 184, 4, 0, 4, 
	5, 610, 184, 4, 190, 190, 190, 0, 
	192, 0, 193, 197, 0, 195, 196, 194, 
	195, 196, 194, 4, 143, 5, 610, 4, 
	0, 196, 194, 195, 199, 198, 195, 199, 
	198, 199, 198, 201, 219, 232, 0, 202, 
	0, 203, 0, 204, 0, 205, 0, 206, 
	0, 207, 0, 208, 0, 209, 216, 0, 
	211, 215, 210, 211, 215, 210, 212, 0, 
	213, 200, 0, 214, 0, 181, 186, 189, 
	189, 190, 190, 190, 0, 215, 210, 211, 
	218, 217, 211, 218, 217, 218, 217, 220, 
	0, 221, 0, 222, 0, 223, 0, 224, 
	0, 225, 0, 227, 231, 226, 227, 231, 
	226, 228, 229, 230, 0, 213, 200, 0, 
	228, 229, 230, 0, 228, 229, 230, 0, 
	231, 226, 233, 0, 234, 0, 235, 0, 
	236, 213, 200, 0, 237, 242, 0, 239, 
	241, 238, 239, 241, 238, 240, 0, 213, 
	200, 0, 241, 238, 239, 244, 243, 239, 
	244, 243, 244, 243, 246, 264, 277, 282, 
	300, 317, 588, 0, 247, 0, 248, 0, 
	249, 0, 250, 0, 251, 0, 252, 0, 
	253, 0, 254, 0, 255, 0, 256, 0, 
	257, 0, 258, 0, 259, 0, 260, 0, 
	261, 0, 262, 0, 263, 262, 0, 4, 
	5, 245, 610, 4, 0, 265, 0, 266, 
	0, 267, 0, 268, 0, 269, 0, 270, 
	0, 271, 0, 272, 0, 273, 0, 274, 
	0, 275, 0, 276, 0, 263, 276, 0, 
	278, 0, 279, 0, 280, 0, 281, 0, 
	4, 5, 245, 610, 4, 0, 283, 0, 
	284, 0, 285, 0, 286, 0, 287, 0, 
	288, 293, 0, 289, 0, 290, 0, 291, 
	0, 292, 0, 4, 5, 245, 610, 4, 
	0, 294, 0, 295, 0, 296, 0, 297, 
	0, 298, 0, 299, 0, 4, 5, 245, 
	610, 4, 0, 301, 0, 302, 0, 303, 
	0, 304, 0, 305, 310, 0, 306, 0, 
	307, 0, 308, 0, 309, 0, 4, 5, 
	245, 610, 4, 0, 311, 0, 312, 0, 
	313, 0, 314, 0, 315, 0, 316, 0, 
	4, 5, 245, 610, 4, 0, 318, 500, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	341, 354, 359, 377, 394, 483, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 327, 
	0, 328, 0, 329, 0, 330, 0, 331, 
	0, 332, 0, 333, 0, 334, 0, 335, 
	0, 336, 0, 337, 0, 338, 0, 339, 
	338, 0, 340, 321, 0, 4, 5, 245, 
	610, 4, 0, 342, 0, 343, 0, 344, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 339, 353, 0, 355, 0, 
	356, 0, 357, 0, 358, 0, 340, 321, 
	0, 360, 0, 361, 0, 362, 0, 363, 
	0, 364, 0, 365, 370, 0, 366, 0, 
	367, 0, 368, 0, 369, 0, 340, 321, 
	0, 371, 0, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 340, 321, 0, 
	378, 0, 379, 0, 380, 0, 381, 0, 
	382, 387, 0, 383, 0, 384, 0, 385, 
	0, 386, 0, 340, 321, 0, 388, 0, 
	389, 0, 390, 0, 391, 0, 392, 0, 
	393, 0, 340, 321, 0, 395, 0, 396, 
	0, 397, 0, 398, 417, 462, 0, 399, 
	0, 400, 0, 401, 0, 402, 0, 403, 
	0, 404, 410, 414, 405, 0, 405, 0, 
	406, 407, 405, 0, 340, 321, 0, 406, 
	408, 408, 0, 409, 0, 406, 409, 0, 
	411, 0, 412, 0, 413, 0, 406, 0, 
	415, 0, 416, 0, 406, 0, 418, 0, 
	419, 0, 420, 0, 421, 0, 422, 441, 
	0, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 434, 438, 429, 0, 
	429, 0, 430, 431, 429, 0, 340, 321, 
	0, 430, 432, 432, 0, 433, 0, 430, 
	433, 0, 435, 0, 436, 0, 437, 0, 
	430, 0, 439, 0, 440, 0, 430, 0, 
	442, 0, 443, 0, 444, 0, 445, 0, 
	446, 0, 447, 0, 448, 0, 449, 455, 
	459, 450, 0, 450, 0, 451, 452, 450, 
	0, 340, 321, 0, 451, 453, 453, 0, 
	454, 0, 451, 454, 0, 456, 0, 457, 
	0, 458, 0, 451, 0, 460, 0, 461, 
	0, 451, 0, 463, 0, 464, 0, 465, 
	0, 466, 0, 467, 0, 468, 0, 469, 
	0, 470, 476, 480, 471, 0, 471, 0, 
	472, 473, 471, 0, 340, 321, 0, 472, 
	474, 474, 0, 475, 0, 472, 475, 0, 
	477, 0, 478, 0, 479, 0, 472, 0, 
	481, 0, 482, 0, 472, 0, 484, 0, 
	485, 0, 486, 0, 487, 0, 488, 493, 
	0, 489, 0, 490, 0, 491, 0, 492, 
	0, 340, 321, 0, 494, 0, 495, 0, 
	496, 0, 497, 0, 498, 0, 499, 0, 
	340, 321, 0, 501, 0, 502, 0, 503, 
	522, 567, 0, 504, 0, 505, 0, 506, 
	0, 507, 0, 508, 0, 509, 515, 519, 
	510, 0, 510, 0, 511, 512, 510, 0, 
	4, 5, 245, 610, 4, 0, 511, 513, 
	513, 0, 514, 0, 511, 514, 0, 516, 
	0, 517, 0, 518, 0, 511, 0, 520, 
	0, 521, 0, 511, 0, 523, 0, 524, 
	0, 525, 0, 526, 0, 527, 546, 0, 
	528, 0, 529, 0, 530, 0, 531, 0, 
	532, 0, 533, 539, 543, 534, 0, 534, 
	0, 535, 536, 534, 0, 4, 5, 245, 
	610, 4, 0, 535, 537, 537, 0, 538, 
	0, 535, 538, 0, 540, 0, 541, 0, 
	542, 0, 535, 0, 544, 0, 545, 0, 
	535, 0, 547, 0, 548, 0, 549, 0, 
	550, 0, 551, 0, 552, 0, 553, 0, 
	554, 560, 564, 555, 0, 555, 0, 556, 
	557, 555, 0, 4, 5, 245, 610, 4, 
	0, 556, 558, 558, 0, 559, 0, 556, 
	559, 0, 561, 0, 562, 0, 563, 0, 
	556, 0, 565, 0, 566, 0, 556, 0, 
	568, 0, 569, 0, 570, 0, 571, 0, 
	572, 0, 573, 0, 574, 0, 575, 581, 
	585, 576, 0, 576, 0, 577, 578, 576, 
	0, 4, 5, 245, 610, 4, 0, 577, 
	579, 579, 0, 580, 0, 577, 580, 0, 
	582, 0, 583, 0, 584, 0, 577, 0, 
	586, 0, 587, 0, 577, 0, 589, 0, 
	590, 0, 591, 0, 592, 0, 593, 598, 
	0, 594, 0, 595, 0, 596, 0, 597, 
	0, 4, 5, 245, 610, 4, 0, 599, 
	0, 600, 0, 601, 0, 602, 0, 603, 
	0, 604, 0, 4, 5, 245, 610, 4, 
	0, 606, 607, 607, 0, 610, 0, 607, 
	610, 607, 607, 607, 607, 0, 3, 609, 
	609, 0, 4, 609, 5, 245, 610, 609, 
	4, 609, 609, 609, 0, 610, 1, 2, 
	610, 0, 610, 1, 2, 610, 0, 610, 
	181, 1, 186, 2, 189, 610, 189, 190, 
	190, 190, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 197, 0, 85, 197, 197, 99, 
	87, 87, 87, 87, 87, 99, 0, 0, 
	0, 0, 0, 1, 1, 99, 0, 99, 
	0, 0, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 57, 57, 
	57, 57, 57, 57, 99, 0, 99, 0, 
	0, 99, 104, 5, 5, 7, 0, 0, 
	283, 83, 283, 283, 283, 99, 211, 211, 
	211, 211, 99, 0, 0, 107, 9, 9, 
	11, 0, 0, 0, 0, 0, 99, 0, 
	0, 99, 104, 5, 5, 7, 0, 0, 
	275, 81, 275, 275, 275, 99, 0, 0, 
	107, 9, 9, 11, 0, 0, 0, 0, 
	0, 99, 0, 0, 71, 71, 71, 71, 
	71, 99, 110, 13, 13, 15, 0, 0, 
	235, 235, 235, 235, 99, 0, 0, 113, 
	17, 17, 19, 0, 0, 0, 0, 243, 
	243, 243, 243, 99, 243, 243, 243, 243, 
	0, 0, 0, 99, 0, 0, 0, 0, 
	99, 104, 5, 5, 7, 0, 0, 251, 
	75, 251, 251, 251, 99, 0, 0, 107, 
	9, 9, 11, 0, 0, 0, 0, 185, 
	45, 45, 47, 0, 0, 296, 194, 296, 
	296, 0, 0, 296, 99, 207, 207, 207, 
	207, 99, 318, 231, 318, 318, 51, 51, 
	318, 99, 306, 227, 306, 306, 49, 49, 
	306, 99, 0, 0, 0, 0, 99, 104, 
	5, 5, 7, 0, 0, 259, 77, 259, 
	259, 259, 99, 0, 0, 107, 9, 9, 
	11, 0, 0, 0, 0, 0, 99, 0, 
	0, 99, 104, 5, 5, 7, 0, 0, 
	267, 79, 267, 267, 267, 99, 0, 0, 
	107, 9, 9, 11, 0, 0, 0, 0, 
	0, 0, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 0, 99, 110, 13, 13, 
	15, 0, 0, 0, 99, 65, 65, 99, 
	0, 0, 113, 17, 17, 19, 0, 0, 
	0, 0, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 185, 45, 
	45, 47, 0, 0, 53, 0, 0, 99, 
	67, 67, 99, 191, 51, 51, 99, 188, 
	49, 49, 99, 0, 0, 0, 99, 0, 
	99, 0, 99, 0, 61, 61, 99, 0, 
	0, 99, 110, 13, 13, 15, 0, 0, 
	0, 99, 63, 63, 99, 0, 0, 113, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 59, 59, 59, 59, 59, 59, 99, 
	0, 99, 0, 99, 0, 99, 55, 55, 
	55, 55, 55, 55, 99, 291, 101, 3, 
	3, 3, 291, 3, 291, 3, 0, 3, 
	291, 0, 0, 0, 99, 223, 223, 223, 
	223, 99, 0, 99, 0, 0, 99, 104, 
	5, 5, 7, 0, 0, 287, 83, 287, 
	287, 287, 99, 219, 219, 219, 219, 99, 
	0, 0, 107, 9, 9, 11, 0, 0, 
	0, 0, 0, 99, 0, 0, 99, 104, 
	5, 5, 7, 0, 0, 279, 81, 279, 
	279, 279, 99, 0, 0, 107, 9, 9, 
	11, 0, 0, 0, 0, 291, 101, 3, 
	3, 3, 291, 3, 291, 3, 0, 3, 
	291, 0, 0, 0, 99, 0, 0, 0, 
	0, 99, 104, 5, 5, 7, 0, 0, 
	255, 75, 255, 255, 255, 99, 0, 0, 
	107, 9, 9, 11, 0, 0, 0, 0, 
	185, 45, 45, 47, 0, 0, 301, 194, 
	301, 301, 0, 0, 301, 99, 215, 215, 
	215, 215, 99, 324, 231, 324, 324, 51, 
	51, 324, 99, 312, 227, 312, 312, 49, 
	49, 312, 99, 0, 0, 0, 0, 99, 
	104, 5, 5, 7, 0, 0, 263, 77, 
	263, 263, 263, 99, 0, 0, 107, 9, 
	9, 11, 0, 0, 0, 0, 110, 13, 
	13, 15, 0, 0, 239, 239, 239, 69, 
	239, 99, 203, 203, 203, 203, 99, 0, 
	0, 113, 17, 17, 19, 0, 0, 0, 
	0, 247, 247, 247, 73, 247, 99, 247, 
	247, 247, 73, 247, 0, 0, 0, 99, 
	0, 99, 0, 0, 99, 104, 5, 5, 
	7, 0, 0, 271, 79, 271, 271, 271, 
	99, 0, 0, 107, 9, 9, 11, 0, 
	0, 0, 0, 0, 0, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 0, 99, 
	110, 13, 13, 15, 0, 0, 0, 99, 
	65, 65, 99, 0, 99, 0, 0, 71, 
	71, 71, 71, 71, 99, 0, 0, 113, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 185, 45, 45, 47, 0, 
	0, 53, 0, 0, 99, 67, 67, 99, 
	191, 51, 51, 99, 188, 49, 49, 99, 
	0, 0, 0, 99, 0, 99, 0, 99, 
	0, 61, 61, 99, 0, 0, 99, 110, 
	13, 13, 15, 0, 0, 0, 99, 63, 
	63, 99, 0, 0, 113, 17, 17, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 37, 99, 39, 0, 99, 91, 
	91, 91, 91, 91, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 33, 99, 35, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	122, 122, 122, 122, 122, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 146, 146, 146, 146, 146, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 152, 152, 152, 
	152, 152, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 158, 158, 
	158, 158, 158, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	164, 164, 164, 164, 164, 99, 0, 0, 
	99, 0, 99, 0, 99, 41, 99, 0, 
	0, 0, 0, 0, 0, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 37, 99, 39, 
	0, 99, 43, 43, 99, 89, 89, 89, 
	89, 89, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 33, 99, 35, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 119, 119, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 143, 143, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 149, 149, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 155, 155, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 161, 161, 99, 0, 99, 0, 
	99, 0, 99, 0, 0, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 25, 0, 0, 25, 99, 0, 99, 
	27, 27, 0, 99, 125, 125, 99, 29, 
	116, 116, 99, 0, 99, 31, 0, 99, 
	0, 99, 0, 99, 0, 99, 21, 99, 
	0, 99, 0, 99, 23, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 25, 0, 0, 25, 99, 
	0, 99, 27, 27, 0, 99, 131, 131, 
	99, 29, 116, 116, 99, 0, 99, 31, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	21, 99, 0, 99, 0, 99, 23, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 25, 0, 
	0, 25, 99, 0, 99, 27, 27, 0, 
	99, 167, 167, 99, 29, 116, 116, 99, 
	0, 99, 31, 0, 99, 0, 99, 0, 
	99, 0, 99, 21, 99, 0, 99, 0, 
	99, 23, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 25, 0, 0, 25, 99, 0, 99, 
	27, 27, 0, 99, 137, 137, 99, 29, 
	116, 116, 99, 0, 99, 31, 0, 99, 
	0, 99, 0, 99, 0, 99, 21, 99, 
	0, 99, 0, 99, 23, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 173, 173, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	179, 179, 99, 0, 99, 0, 99, 0, 
	0, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 25, 0, 0, 
	25, 99, 0, 99, 27, 27, 0, 99, 
	128, 128, 128, 128, 128, 99, 29, 116, 
	116, 99, 0, 99, 31, 0, 99, 0, 
	99, 0, 99, 0, 99, 21, 99, 0, 
	99, 0, 99, 23, 99, 0, 99, 0, 
	99, 0, 99, 0, 99, 0, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 25, 0, 0, 25, 99, 0, 
	99, 27, 27, 0, 99, 134, 134, 134, 
	134, 134, 99, 29, 116, 116, 99, 0, 
	99, 31, 0, 99, 0, 99, 0, 99, 
	0, 99, 21, 99, 0, 99, 0, 99, 
	23, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	25, 0, 0, 25, 99, 0, 99, 27, 
	27, 0, 99, 170, 170, 170, 170, 170, 
	99, 29, 116, 116, 99, 0, 99, 31, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	21, 99, 0, 99, 0, 99, 23, 99, 
	0, 99, 0, 99, 0, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 25, 0, 
	0, 25, 99, 0, 99, 27, 27, 0, 
	99, 140, 140, 140, 140, 140, 99, 29, 
	116, 116, 99, 0, 99, 31, 0, 99, 
	0, 99, 0, 99, 0, 99, 21, 99, 
	0, 99, 0, 99, 23, 99, 0, 99, 
	0, 99, 0, 99, 0, 99, 0, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 176, 176, 176, 176, 176, 99, 0, 
	99, 0, 99, 0, 99, 0, 99, 0, 
	99, 0, 99, 182, 182, 182, 182, 182, 
	99, 95, 95, 95, 99, 97, 99, 0, 
	97, 0, 0, 0, 0, 99, 200, 200, 
	200, 99, 87, 0, 87, 87, 87, 0, 
	87, 0, 0, 0, 99, 0, 0, 0, 
	0, 99, 93, 93, 93, 93, 99, 0, 
	0, 0, 0, 0, 71, 0, 71, 71, 
	71, 71, 99, 0
};

static const short _hext_eof_actions[] = {
	0, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 0, 93, 0
};

static const int hext_start = 610;
static const int hext_first_final = 610;
static const int hext_error = 0;

static const int hext_en_main = 610;


#line 66 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1168 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1173 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ TK_START; }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ TK_START; }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ TK_START; }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ TK_START; }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ TK_START; }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ TK_START; }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 188 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 48:
#line 190 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 49:
#line 196 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 50:
#line 198 "hext-machine.rl"
	{ TK_START; }
	break;
	case 51:
#line 199 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 52:
#line 206 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 53:
#line 209 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 54:
#line 212 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 55:
#line 215 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 56:
#line 218 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 57:
#line 226 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 58:
#line 231 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 59:
#line 235 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 60:
#line 239 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 61:
#line 247 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 62:
#line 251 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 63:
#line 255 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 64:
#line 258 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 65:
#line 259 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 66:
#line 277 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 67:
#line 280 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 68:
#line 283 "hext-machine.rl"
	{ TK_START; }
	break;
	case 69:
#line 284 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 70:
#line 287 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 71:
#line 290 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 72:
#line 298 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 73:
#line 305 "hext-machine.rl"
	{ TK_START; }
	break;
	case 74:
#line 306 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 75:
#line 311 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1568 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 72:
#line 298 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 75:
#line 311 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1592 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 121 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

