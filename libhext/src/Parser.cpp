// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/CasePipe.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexReplacePipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 51 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 70, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 2, 3, 67, 
	2, 4, 5, 2, 6, 7, 2, 8, 
	9, 2, 10, 11, 2, 16, 17, 2, 
	19, 35, 2, 19, 75, 2, 24, 35, 
	2, 24, 75, 2, 25, 35, 2, 25, 
	75, 2, 26, 35, 2, 26, 75, 2, 
	27, 35, 2, 27, 75, 2, 28, 35, 
	2, 28, 75, 2, 29, 35, 2, 29, 
	75, 2, 30, 35, 2, 30, 75, 2, 
	31, 35, 2, 31, 75, 2, 32, 35, 
	2, 32, 75, 2, 33, 35, 2, 33, 
	75, 2, 36, 37, 2, 38, 40, 2, 
	39, 40, 2, 40, 41, 2, 70, 72, 
	2, 71, 72, 3, 0, 64, 69, 3, 
	1, 62, 69, 3, 1, 63, 69, 3, 
	1, 65, 69, 3, 1, 66, 69, 3, 
	1, 68, 69, 3, 38, 40, 41, 3, 
	39, 40, 41, 3, 53, 61, 69, 3, 
	53, 64, 69, 3, 55, 61, 69, 3, 
	55, 64, 69, 3, 56, 63, 69, 3, 
	56, 66, 69, 3, 57, 63, 69, 3, 
	57, 66, 69, 3, 58, 63, 69, 3, 
	58, 66, 69, 3, 59, 63, 69, 3, 
	59, 66, 69, 3, 60, 63, 69, 3, 
	60, 66, 69, 4, 3, 67, 68, 69, 
	4, 40, 41, 62, 69, 4, 40, 41, 
	65, 69, 5, 38, 40, 41, 62, 69, 
	5, 38, 40, 41, 65, 69, 5, 39, 
	40, 41, 62, 69, 5, 39, 40, 41, 
	65, 69
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 101, 103, 105, 
	110, 111, 113, 115, 116, 128, 141, 154, 
	167, 180, 193, 206, 208, 210, 212, 213, 
	214, 215, 217, 219, 220, 233, 246, 259, 
	272, 285, 298, 299, 301, 303, 306, 307, 
	310, 313, 314, 327, 340, 353, 366, 379, 
	392, 405, 407, 409, 411, 412, 413, 414, 
	416, 418, 419, 432, 445, 458, 471, 484, 
	497, 510, 511, 513, 515, 521, 525, 530, 
	532, 534, 535, 536, 537, 539, 541, 542, 
	548, 554, 555, 569, 583, 596, 609, 622, 
	635, 648, 661, 674, 687, 700, 713, 726, 
	739, 753, 755, 757, 759, 760, 761, 762, 
	764, 766, 767, 771, 773, 775, 781, 782, 
	784, 786, 787, 789, 791, 793, 799, 800, 
	802, 804, 805, 806, 808, 810, 818, 823, 
	831, 839, 840, 841, 843, 845, 847, 853, 
	854, 856, 858, 859, 860, 861, 862, 863, 
	864, 865, 866, 867, 868, 873, 874, 875, 
	876, 881, 900, 905, 906, 908, 910, 912, 
	918, 923, 924, 926, 928, 929, 930, 932, 
	934, 936, 942, 943, 945, 947, 948, 964, 
	966, 968, 974, 979, 980, 982, 984, 985, 
	998, 1012, 1026, 1040, 1054, 1068, 1082, 1084, 
	1086, 1088, 1089, 1090, 1091, 1093, 1095, 1096, 
	1110, 1124, 1138, 1152, 1166, 1180, 1181, 1183, 
	1185, 1188, 1189, 1192, 1195, 1196, 1210, 1224, 
	1238, 1252, 1266, 1280, 1294, 1296, 1298, 1300, 
	1301, 1302, 1303, 1305, 1307, 1308, 1322, 1336, 
	1350, 1364, 1378, 1392, 1406, 1407, 1409, 1411, 
	1417, 1421, 1426, 1428, 1430, 1431, 1432, 1433, 
	1435, 1437, 1438, 1444, 1450, 1451, 1466, 1481, 
	1495, 1509, 1523, 1537, 1551, 1565, 1579, 1593, 
	1607, 1621, 1635, 1649, 1664, 1666, 1668, 1670, 
	1671, 1672, 1673, 1675, 1677, 1678, 1682, 1684, 
	1686, 1692, 1693, 1695, 1697, 1698, 1700, 1702, 
	1704, 1710, 1711, 1713, 1715, 1716, 1717, 1719, 
	1721, 1729, 1734, 1742, 1750, 1751, 1752, 1754, 
	1756, 1758, 1764, 1765, 1767, 1769, 1770, 1777, 
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1794, 
	1797, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 
	1810, 1811, 1812, 1813, 1814, 1816, 1819, 1820, 
	1821, 1822, 1823, 1829, 1830, 1831, 1832, 1833, 
	1834, 1836, 1837, 1838, 1839, 1840, 1846, 1847, 
	1848, 1849, 1850, 1851, 1852, 1858, 1859, 1860, 
	1861, 1862, 1864, 1865, 1866, 1867, 1868, 1874, 
	1875, 1876, 1877, 1878, 1879, 1880, 1886, 1888, 
	1889, 1890, 1891, 1898, 1899, 1900, 1901, 1902, 
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 
	1911, 1912, 1913, 1915, 1918, 1920, 1926, 1927, 
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 
	1936, 1937, 1939, 1942, 1943, 1944, 1945, 1946, 
	1948, 1949, 1950, 1951, 1952, 1953, 1955, 1956, 
	1957, 1958, 1959, 1961, 1962, 1963, 1964, 1965, 
	1966, 1967, 1969, 1970, 1971, 1972, 1973, 1975, 
	1976, 1977, 1978, 1979, 1981, 1982, 1983, 1984, 
	1985, 1986, 1987, 1989, 1990, 1991, 1992, 1995, 
	1996, 1997, 1998, 1999, 2000, 2005, 2007, 2011, 
	2013, 2016, 2018, 2021, 2022, 2023, 2024, 2025, 
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2034, 
	2035, 2036, 2037, 2038, 2039, 2044, 2046, 2050, 
	2052, 2055, 2057, 2060, 2061, 2062, 2063, 2064, 
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 
	2073, 2074, 2079, 2081, 2085, 2087, 2090, 2092, 
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2114, 
	2116, 2120, 2122, 2125, 2127, 2130, 2131, 2132, 
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 
	2141, 2143, 2144, 2145, 2146, 2147, 2149, 2150, 
	2151, 2152, 2153, 2154, 2155, 2157, 2158, 2159, 
	2162, 2163, 2164, 2165, 2166, 2167, 2172, 2174, 
	2178, 2184, 2187, 2189, 2192, 2193, 2194, 2195, 
	2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 
	2205, 2206, 2207, 2208, 2209, 2210, 2215, 2217, 
	2221, 2227, 2230, 2232, 2235, 2236, 2237, 2238, 
	2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 
	2247, 2248, 2249, 2254, 2256, 2260, 2266, 2269, 
	2271, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 
	2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 
	2293, 2295, 2299, 2305, 2308, 2310, 2313, 2314, 
	2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 
	2323, 2324, 2326, 2327, 2328, 2329, 2330, 2336, 
	2337, 2338, 2339, 2340, 2341, 2342, 2348, 2353, 
	2354, 2363, 2368, 2382, 2387
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 58, 
	61, 94, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 95, 
	97, 102, 112, 114, 116, 45, 46, 48, 
	57, 65, 90, 98, 122, 34, 92, 34, 
	92, 32, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 112, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 101, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 110, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	100, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 40, 47, 62, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	34, 92, 34, 92, 41, 58, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 95, 
	105, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 108, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 116, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 114, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 40, 47, 
	62, 95, 9, 13, 45, 57, 65, 90, 
	97, 122, 47, 47, 92, 47, 92, 41, 
	99, 105, 58, 41, 99, 105, 41, 99, 
	105, 92, 32, 47, 62, 95, 114, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	112, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 101, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 110, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 100, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 34, 39, 34, 
	92, 34, 92, 41, 58, 92, 39, 92, 
	39, 92, 92, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 108, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 97, 9, 
	13, 45, 57, 65, 90, 98, 122, 32, 
	47, 62, 95, 99, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 40, 47, 62, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 47, 47, 
	92, 47, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 9, 13, 32, 34, 39, 
	9, 13, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 32, 44, 
	99, 105, 9, 13, 32, 44, 99, 105, 
	9, 13, 92, 32, 47, 62, 95, 111, 
	114, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 108, 117, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 111, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	119, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 101, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 114, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 58, 62, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 112, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 101, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 114, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 58, 62, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 105, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 109, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 40, 47, 58, 62, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 34, 39, 34, 92, 34, 92, 41, 
	58, 92, 39, 92, 39, 92, 92, 34, 
	39, 61, 126, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 47, 92, 
	47, 92, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 47, 62, 9, 13, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	33, 47, 62, 99, 105, 9, 13, 92, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 116, 114, 105, 112, 45, 
	116, 97, 103, 115, 36, 42, 58, 61, 
	94, 101, 120, 116, 36, 42, 58, 61, 
	94, 32, 33, 36, 42, 45, 47, 58, 
	61, 62, 94, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 47, 62, 9, 
	13, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 34, 39, 95, 97, 
	102, 112, 114, 116, 45, 46, 48, 57, 
	65, 90, 98, 122, 34, 92, 34, 92, 
	32, 47, 62, 63, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 112, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 112, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 110, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 100, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 40, 47, 62, 
	63, 95, 9, 13, 45, 57, 65, 90, 
	97, 122, 34, 39, 34, 92, 34, 92, 
	41, 58, 92, 39, 92, 39, 92, 92, 
	32, 47, 62, 63, 95, 105, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 108, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 116, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 40, 
	47, 62, 63, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 47, 47, 92, 47, 
	92, 41, 99, 105, 58, 41, 99, 105, 
	41, 99, 105, 92, 32, 47, 62, 63, 
	95, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 110, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 100, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	34, 92, 34, 92, 41, 58, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 108, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 97, 9, 13, 45, 57, 
	65, 90, 98, 122, 32, 47, 62, 63, 
	95, 99, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 47, 47, 
	92, 47, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 9, 13, 32, 34, 39, 
	9, 13, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 32, 44, 
	99, 105, 9, 13, 32, 44, 99, 105, 
	9, 13, 92, 32, 47, 62, 63, 95, 
	111, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 108, 
	117, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 111, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 119, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	114, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 58, 62, 63, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 112, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 114, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 58, 62, 63, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 105, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	109, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 40, 47, 58, 62, 63, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	34, 39, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	61, 126, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 47, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 111, 116, 
	116, 40, 58, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 41, 58, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 41, 58, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 8, 2, 2, 3, 
	1, 2, 2, 1, 4, 5, 5, 5, 
	5, 5, 5, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 5, 5, 5, 5, 
	5, 5, 1, 2, 2, 3, 1, 3, 
	3, 1, 5, 5, 5, 5, 5, 5, 
	5, 2, 2, 2, 1, 1, 1, 2, 
	2, 1, 5, 5, 5, 5, 5, 5, 
	5, 1, 2, 2, 4, 2, 3, 2, 
	2, 1, 1, 1, 2, 2, 1, 4, 
	4, 1, 6, 6, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	6, 2, 2, 2, 1, 1, 1, 2, 
	2, 1, 4, 2, 2, 4, 1, 2, 
	2, 1, 2, 2, 2, 4, 1, 2, 
	2, 1, 1, 2, 2, 6, 3, 6, 
	6, 1, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 1, 1, 1, 
	5, 11, 3, 1, 2, 2, 2, 4, 
	3, 1, 2, 2, 1, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 8, 2, 
	2, 4, 3, 1, 2, 2, 1, 5, 
	6, 6, 6, 6, 6, 6, 2, 2, 
	2, 1, 1, 1, 2, 2, 1, 6, 
	6, 6, 6, 6, 6, 1, 2, 2, 
	3, 1, 3, 3, 1, 6, 6, 6, 
	6, 6, 6, 6, 2, 2, 2, 1, 
	1, 1, 2, 2, 1, 6, 6, 6, 
	6, 6, 6, 6, 1, 2, 2, 4, 
	2, 3, 2, 2, 1, 1, 1, 2, 
	2, 1, 4, 4, 1, 7, 7, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 7, 2, 2, 2, 1, 
	1, 1, 2, 2, 1, 4, 2, 2, 
	4, 1, 2, 2, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 1, 2, 2, 
	6, 3, 6, 6, 1, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 2, 1, 
	1, 1, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 3, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	3, 1, 6, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 4, 0, 0, 1, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 1, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 4, 0, 
	0, 1, 1, 0, 0, 0, 0, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 2, 0, 
	3, 2, 4, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 124, 127, 130, 
	135, 137, 140, 143, 145, 154, 164, 174, 
	184, 194, 204, 214, 217, 220, 223, 225, 
	227, 229, 232, 235, 237, 247, 257, 267, 
	277, 287, 297, 299, 302, 305, 309, 311, 
	315, 319, 321, 331, 341, 351, 361, 371, 
	381, 391, 394, 397, 400, 402, 404, 406, 
	409, 412, 414, 424, 434, 444, 454, 464, 
	474, 484, 486, 489, 492, 498, 502, 507, 
	510, 513, 515, 517, 519, 522, 525, 527, 
	533, 539, 541, 552, 563, 573, 583, 593, 
	603, 613, 623, 633, 643, 653, 663, 673, 
	683, 694, 697, 700, 703, 705, 707, 709, 
	712, 715, 717, 722, 725, 728, 734, 736, 
	739, 742, 744, 747, 750, 753, 759, 761, 
	764, 767, 769, 771, 774, 777, 785, 790, 
	798, 806, 808, 810, 813, 816, 819, 825, 
	827, 830, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 859, 861, 863, 
	865, 871, 887, 892, 894, 897, 900, 903, 
	909, 914, 916, 919, 922, 924, 926, 929, 
	932, 935, 941, 943, 946, 949, 951, 964, 
	967, 970, 976, 981, 983, 986, 989, 991, 
	1001, 1012, 1023, 1034, 1045, 1056, 1067, 1070, 
	1073, 1076, 1078, 1080, 1082, 1085, 1088, 1090, 
	1101, 1112, 1123, 1134, 1145, 1156, 1158, 1161, 
	1164, 1168, 1170, 1174, 1178, 1180, 1191, 1202, 
	1213, 1224, 1235, 1246, 1257, 1260, 1263, 1266, 
	1268, 1270, 1272, 1275, 1278, 1280, 1291, 1302, 
	1313, 1324, 1335, 1346, 1357, 1359, 1362, 1365, 
	1371, 1375, 1380, 1383, 1386, 1388, 1390, 1392, 
	1395, 1398, 1400, 1406, 1412, 1414, 1426, 1438, 
	1449, 1460, 1471, 1482, 1493, 1504, 1515, 1526, 
	1537, 1548, 1559, 1570, 1582, 1585, 1588, 1591, 
	1593, 1595, 1597, 1600, 1603, 1605, 1610, 1613, 
	1616, 1622, 1624, 1627, 1630, 1632, 1635, 1638, 
	1641, 1647, 1649, 1652, 1655, 1657, 1659, 1662, 
	1665, 1673, 1678, 1686, 1694, 1696, 1698, 1701, 
	1704, 1707, 1713, 1715, 1718, 1721, 1723, 1731, 
	1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 
	1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 
	1766, 1772, 1774, 1776, 1778, 1780, 1782, 1784, 
	1786, 1788, 1790, 1792, 1794, 1796, 1799, 1801, 
	1803, 1805, 1807, 1813, 1815, 1817, 1819, 1821, 
	1823, 1826, 1828, 1830, 1832, 1834, 1840, 1842, 
	1844, 1846, 1848, 1850, 1852, 1858, 1860, 1862, 
	1864, 1866, 1869, 1871, 1873, 1875, 1877, 1883, 
	1885, 1887, 1889, 1891, 1893, 1895, 1901, 1904, 
	1906, 1908, 1910, 1918, 1920, 1922, 1924, 1926, 
	1928, 1930, 1932, 1934, 1936, 1938, 1940, 1942, 
	1944, 1946, 1948, 1950, 1953, 1956, 1962, 1964, 
	1966, 1968, 1970, 1972, 1974, 1976, 1978, 1980, 
	1982, 1984, 1986, 1989, 1991, 1993, 1995, 1997, 
	2000, 2002, 2004, 2006, 2008, 2010, 2013, 2015, 
	2017, 2019, 2021, 2024, 2026, 2028, 2030, 2032, 
	2034, 2036, 2039, 2041, 2043, 2045, 2047, 2050, 
	2052, 2054, 2056, 2058, 2061, 2063, 2065, 2067, 
	2069, 2071, 2073, 2076, 2078, 2080, 2082, 2086, 
	2088, 2090, 2092, 2094, 2096, 2101, 2103, 2107, 
	2110, 2114, 2116, 2119, 2121, 2123, 2125, 2127, 
	2129, 2131, 2133, 2135, 2137, 2139, 2141, 2144, 
	2146, 2148, 2150, 2152, 2154, 2159, 2161, 2165, 
	2168, 2172, 2174, 2177, 2179, 2181, 2183, 2185, 
	2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 
	2203, 2205, 2210, 2212, 2216, 2219, 2223, 2225, 
	2228, 2230, 2232, 2234, 2236, 2238, 2240, 2242, 
	2244, 2246, 2248, 2250, 2252, 2254, 2256, 2261, 
	2263, 2267, 2270, 2274, 2276, 2279, 2281, 2283, 
	2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 
	2301, 2304, 2306, 2308, 2310, 2312, 2315, 2317, 
	2319, 2321, 2323, 2325, 2327, 2330, 2332, 2334, 
	2338, 2340, 2342, 2344, 2346, 2348, 2353, 2355, 
	2359, 2365, 2369, 2371, 2374, 2376, 2378, 2380, 
	2382, 2384, 2386, 2388, 2390, 2392, 2394, 2396, 
	2399, 2401, 2403, 2405, 2407, 2409, 2414, 2416, 
	2420, 2426, 2430, 2432, 2435, 2437, 2439, 2441, 
	2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 
	2459, 2461, 2463, 2468, 2470, 2474, 2480, 2484, 
	2486, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 
	2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 
	2522, 2524, 2528, 2534, 2538, 2540, 2543, 2545, 
	2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 
	2563, 2565, 2568, 2570, 2572, 2574, 2576, 2582, 
	2584, 2586, 2588, 2590, 2592, 2594, 2600, 2604, 
	2606, 2613, 2617, 2628, 2633
};

static const short _hext_indicies[] = {
	1, 0, 3, 4, 5, 6, 6, 2, 
	7, 8, 9, 10, 7, 2, 11, 12, 
	1, 13, 11, 14, 14, 2, 15, 2, 
	16, 17, 18, 2, 19, 2, 20, 2, 
	21, 2, 22, 2, 23, 2, 24, 2, 
	25, 2, 26, 2, 27, 2, 28, 29, 
	30, 31, 32, 2, 33, 2, 34, 35, 
	2, 37, 38, 36, 40, 41, 39, 42, 
	43, 44, 45, 42, 2, 46, 47, 48, 
	46, 2, 41, 39, 50, 51, 49, 53, 
	54, 52, 54, 52, 55, 2, 56, 57, 
	2, 59, 60, 58, 62, 63, 61, 64, 
	65, 66, 67, 64, 2, 63, 61, 69, 
	70, 68, 72, 73, 71, 73, 71, 74, 
	75, 76, 77, 78, 79, 80, 81, 76, 
	76, 76, 76, 2, 83, 84, 82, 86, 
	87, 85, 88, 89, 90, 88, 2, 87, 
	85, 92, 93, 91, 95, 96, 94, 96, 
	94, 97, 99, 100, 98, 97, 98, 98, 
	98, 2, 97, 99, 100, 98, 101, 97, 
	98, 98, 98, 2, 97, 99, 100, 98, 
	102, 97, 98, 98, 98, 2, 97, 99, 
	100, 98, 103, 97, 98, 98, 98, 2, 
	97, 99, 100, 98, 104, 97, 98, 98, 
	98, 2, 97, 99, 100, 98, 105, 97, 
	98, 98, 98, 2, 97, 106, 99, 100, 
	98, 97, 98, 98, 98, 2, 107, 108, 
	2, 110, 111, 109, 113, 114, 112, 115, 
	2, 116, 2, 114, 112, 118, 119, 117, 
	121, 122, 120, 122, 120, 97, 99, 100, 
	98, 123, 97, 98, 98, 98, 2, 97, 
	99, 100, 98, 124, 97, 98, 98, 98, 
	2, 97, 99, 100, 98, 125, 97, 98, 
	98, 98, 2, 97, 99, 100, 98, 126, 
	97, 98, 98, 98, 2, 97, 99, 100, 
	98, 127, 97, 98, 98, 98, 2, 97, 
	128, 99, 100, 98, 97, 98, 98, 98, 
	2, 129, 2, 131, 132, 130, 134, 135, 
	133, 136, 137, 138, 2, 139, 2, 140, 
	141, 142, 2, 143, 144, 145, 2, 135, 
	133, 97, 99, 100, 98, 146, 97, 98, 
	98, 98, 2, 97, 99, 100, 98, 147, 
	97, 98, 98, 98, 2, 97, 99, 100, 
	98, 148, 97, 98, 98, 98, 2, 97, 
	99, 100, 98, 149, 97, 98, 98, 98, 
	2, 97, 99, 100, 98, 150, 97, 98, 
	98, 98, 2, 97, 99, 100, 98, 151, 
	97, 98, 98, 98, 2, 97, 152, 99, 
	100, 98, 97, 98, 98, 98, 2, 153, 
	154, 2, 156, 157, 155, 159, 160, 158, 
	161, 2, 162, 2, 160, 158, 164, 165, 
	163, 167, 168, 166, 168, 166, 97, 99, 
	100, 98, 169, 97, 98, 98, 98, 2, 
	97, 99, 100, 98, 170, 97, 98, 98, 
	98, 2, 97, 99, 100, 98, 171, 97, 
	98, 98, 98, 2, 97, 99, 100, 98, 
	172, 97, 98, 98, 98, 2, 97, 99, 
	100, 98, 173, 97, 98, 98, 98, 2, 
	97, 99, 100, 98, 174, 97, 98, 98, 
	98, 2, 97, 175, 99, 100, 98, 97, 
	98, 98, 98, 2, 176, 2, 178, 179, 
	177, 181, 182, 180, 183, 184, 185, 186, 
	183, 2, 187, 188, 187, 2, 188, 189, 
	190, 188, 2, 192, 193, 191, 195, 196, 
	194, 197, 2, 198, 2, 196, 194, 200, 
	201, 199, 203, 204, 202, 204, 202, 205, 
	206, 207, 208, 205, 2, 209, 210, 211, 
	212, 209, 2, 182, 180, 97, 99, 100, 
	98, 213, 214, 97, 98, 98, 98, 2, 
	97, 99, 100, 98, 215, 216, 97, 98, 
	98, 98, 2, 97, 99, 100, 98, 217, 
	97, 98, 98, 98, 2, 97, 99, 100, 
	98, 218, 97, 98, 98, 98, 2, 97, 
	99, 100, 98, 219, 97, 98, 98, 98, 
	2, 97, 99, 100, 98, 220, 97, 98, 
	98, 98, 2, 97, 99, 221, 100, 98, 
	97, 98, 98, 98, 2, 97, 99, 100, 
	98, 222, 97, 98, 98, 98, 2, 97, 
	99, 100, 98, 223, 97, 98, 98, 98, 
	2, 97, 99, 100, 98, 224, 97, 98, 
	98, 98, 2, 97, 99, 100, 98, 225, 
	97, 98, 98, 98, 2, 97, 99, 226, 
	100, 98, 97, 98, 98, 98, 2, 97, 
	99, 100, 98, 227, 97, 98, 98, 98, 
	2, 97, 99, 100, 98, 228, 97, 98, 
	98, 98, 2, 97, 229, 99, 230, 100, 
	98, 97, 98, 98, 98, 2, 231, 232, 
	2, 234, 235, 233, 237, 238, 236, 239, 
	2, 240, 2, 238, 236, 242, 243, 241, 
	245, 246, 244, 246, 244, 247, 248, 249, 
	250, 2, 252, 253, 251, 255, 256, 254, 
	257, 258, 259, 260, 257, 2, 256, 254, 
	262, 263, 261, 265, 266, 264, 266, 264, 
	267, 268, 2, 270, 271, 269, 273, 274, 
	272, 275, 276, 277, 278, 275, 2, 274, 
	272, 280, 281, 279, 283, 284, 282, 284, 
	282, 285, 2, 287, 288, 286, 290, 291, 
	289, 292, 293, 294, 295, 296, 297, 292, 
	2, 298, 299, 300, 298, 2, 301, 302, 
	303, 304, 305, 306, 301, 2, 307, 308, 
	309, 310, 311, 312, 307, 2, 291, 289, 
	313, 2, 314, 315, 2, 317, 318, 316, 
	320, 321, 319, 322, 323, 324, 325, 322, 
	2, 321, 319, 327, 328, 326, 330, 331, 
	329, 331, 329, 332, 2, 333, 2, 334, 
	2, 335, 2, 336, 2, 337, 2, 338, 
	2, 339, 2, 340, 2, 341, 342, 343, 
	344, 345, 2, 346, 2, 347, 2, 348, 
	2, 349, 350, 351, 352, 353, 2, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	363, 358, 354, 358, 358, 358, 2, 364, 
	365, 366, 364, 2, 367, 2, 368, 369, 
	2, 371, 372, 370, 374, 375, 373, 376, 
	377, 378, 379, 376, 2, 380, 381, 382, 
	380, 2, 375, 373, 384, 385, 383, 387, 
	388, 386, 388, 386, 389, 2, 390, 391, 
	2, 393, 394, 392, 396, 397, 395, 398, 
	399, 400, 401, 398, 2, 397, 395, 403, 
	404, 402, 406, 407, 405, 407, 405, 408, 
	409, 410, 411, 412, 413, 414, 415, 410, 
	410, 410, 410, 2, 417, 418, 416, 420, 
	421, 419, 422, 423, 424, 425, 422, 2, 
	426, 427, 428, 426, 2, 421, 419, 430, 
	431, 429, 433, 434, 432, 434, 432, 435, 
	437, 438, 439, 436, 435, 436, 436, 436, 
	2, 435, 437, 438, 439, 436, 440, 435, 
	436, 436, 436, 2, 435, 437, 438, 439, 
	436, 441, 435, 436, 436, 436, 2, 435, 
	437, 438, 439, 436, 442, 435, 436, 436, 
	436, 2, 435, 437, 438, 439, 436, 443, 
	435, 436, 436, 436, 2, 435, 437, 438, 
	439, 436, 444, 435, 436, 436, 436, 2, 
	435, 445, 437, 438, 439, 436, 435, 436, 
	436, 436, 2, 446, 447, 2, 449, 450, 
	448, 452, 453, 451, 454, 2, 455, 2, 
	453, 451, 457, 458, 456, 460, 461, 459, 
	461, 459, 435, 437, 438, 439, 436, 462, 
	435, 436, 436, 436, 2, 435, 437, 438, 
	439, 436, 463, 435, 436, 436, 436, 2, 
	435, 437, 438, 439, 436, 464, 435, 436, 
	436, 436, 2, 435, 437, 438, 439, 436, 
	465, 435, 436, 436, 436, 2, 435, 437, 
	438, 439, 436, 466, 435, 436, 436, 436, 
	2, 435, 467, 437, 438, 439, 436, 435, 
	436, 436, 436, 2, 468, 2, 470, 471, 
	469, 473, 474, 472, 475, 476, 477, 2, 
	478, 2, 479, 480, 481, 2, 482, 483, 
	484, 2, 474, 472, 435, 437, 438, 439, 
	436, 485, 435, 436, 436, 436, 2, 435, 
	437, 438, 439, 436, 486, 435, 436, 436, 
	436, 2, 435, 437, 438, 439, 436, 487, 
	435, 436, 436, 436, 2, 435, 437, 438, 
	439, 436, 488, 435, 436, 436, 436, 2, 
	435, 437, 438, 439, 436, 489, 435, 436, 
	436, 436, 2, 435, 437, 438, 439, 436, 
	490, 435, 436, 436, 436, 2, 435, 491, 
	437, 438, 439, 436, 435, 436, 436, 436, 
	2, 492, 493, 2, 495, 496, 494, 498, 
	499, 497, 500, 2, 501, 2, 499, 497, 
	503, 504, 502, 506, 507, 505, 507, 505, 
	435, 437, 438, 439, 436, 508, 435, 436, 
	436, 436, 2, 435, 437, 438, 439, 436, 
	509, 435, 436, 436, 436, 2, 435, 437, 
	438, 439, 436, 510, 435, 436, 436, 436, 
	2, 435, 437, 438, 439, 436, 511, 435, 
	436, 436, 436, 2, 435, 437, 438, 439, 
	436, 512, 435, 436, 436, 436, 2, 435, 
	437, 438, 439, 436, 513, 435, 436, 436, 
	436, 2, 435, 514, 437, 438, 439, 436, 
	435, 436, 436, 436, 2, 515, 2, 517, 
	518, 516, 520, 521, 519, 522, 523, 524, 
	525, 522, 2, 526, 527, 526, 2, 527, 
	528, 529, 527, 2, 531, 532, 530, 534, 
	535, 533, 536, 2, 537, 2, 535, 533, 
	539, 540, 538, 542, 543, 541, 543, 541, 
	544, 545, 546, 547, 544, 2, 548, 549, 
	550, 551, 548, 2, 521, 519, 435, 437, 
	438, 439, 436, 552, 553, 435, 436, 436, 
	436, 2, 435, 437, 438, 439, 436, 554, 
	555, 435, 436, 436, 436, 2, 435, 437, 
	438, 439, 436, 556, 435, 436, 436, 436, 
	2, 435, 437, 438, 439, 436, 557, 435, 
	436, 436, 436, 2, 435, 437, 438, 439, 
	436, 558, 435, 436, 436, 436, 2, 435, 
	437, 438, 439, 436, 559, 435, 436, 436, 
	436, 2, 435, 437, 560, 438, 439, 436, 
	435, 436, 436, 436, 2, 435, 437, 438, 
	439, 436, 561, 435, 436, 436, 436, 2, 
	435, 437, 438, 439, 436, 562, 435, 436, 
	436, 436, 2, 435, 437, 438, 439, 436, 
	563, 435, 436, 436, 436, 2, 435, 437, 
	438, 439, 436, 564, 435, 436, 436, 436, 
	2, 435, 437, 565, 438, 439, 436, 435, 
	436, 436, 436, 2, 435, 437, 438, 439, 
	436, 566, 435, 436, 436, 436, 2, 435, 
	437, 438, 439, 436, 567, 435, 436, 436, 
	436, 2, 435, 568, 437, 569, 438, 439, 
	436, 435, 436, 436, 436, 2, 570, 571, 
	2, 573, 574, 572, 576, 577, 575, 578, 
	2, 579, 2, 577, 575, 581, 582, 580, 
	584, 585, 583, 585, 583, 586, 587, 588, 
	589, 2, 591, 592, 590, 594, 595, 593, 
	596, 597, 598, 599, 596, 2, 595, 593, 
	601, 602, 600, 604, 605, 603, 605, 603, 
	606, 607, 2, 609, 610, 608, 612, 613, 
	611, 614, 615, 616, 617, 614, 2, 613, 
	611, 619, 620, 618, 622, 623, 621, 623, 
	621, 624, 2, 626, 627, 625, 629, 630, 
	628, 631, 632, 633, 634, 635, 636, 631, 
	2, 637, 638, 639, 637, 2, 640, 641, 
	642, 643, 644, 645, 640, 2, 646, 647, 
	648, 649, 650, 651, 646, 2, 630, 628, 
	652, 2, 653, 654, 2, 656, 657, 655, 
	659, 660, 658, 661, 662, 663, 664, 661, 
	2, 660, 658, 666, 667, 665, 669, 670, 
	668, 670, 668, 671, 672, 673, 674, 675, 
	676, 677, 2, 678, 2, 679, 2, 680, 
	2, 681, 2, 682, 2, 683, 2, 684, 
	2, 685, 2, 686, 2, 687, 2, 688, 
	2, 689, 2, 690, 2, 691, 2, 692, 
	2, 693, 2, 694, 695, 2, 696, 697, 
	698, 699, 696, 2, 700, 2, 701, 2, 
	702, 2, 703, 2, 704, 2, 705, 2, 
	706, 2, 707, 2, 708, 2, 709, 2, 
	710, 2, 711, 2, 712, 713, 2, 714, 
	2, 715, 2, 716, 2, 717, 2, 718, 
	719, 720, 721, 718, 2, 722, 2, 723, 
	2, 724, 2, 725, 2, 726, 2, 727, 
	728, 2, 729, 2, 730, 2, 731, 2, 
	732, 2, 733, 734, 735, 736, 733, 2, 
	737, 2, 738, 2, 739, 2, 740, 2, 
	741, 2, 742, 2, 743, 744, 745, 746, 
	743, 2, 747, 2, 748, 2, 749, 2, 
	750, 2, 751, 752, 2, 753, 2, 754, 
	2, 755, 2, 756, 2, 757, 758, 759, 
	760, 757, 2, 761, 2, 762, 2, 763, 
	2, 764, 2, 765, 2, 766, 2, 767, 
	768, 769, 770, 767, 2, 771, 772, 2, 
	773, 2, 774, 2, 775, 2, 776, 777, 
	778, 779, 780, 781, 782, 2, 783, 2, 
	784, 2, 785, 2, 786, 2, 787, 2, 
	788, 2, 789, 2, 790, 2, 791, 2, 
	792, 2, 793, 2, 794, 2, 795, 2, 
	796, 2, 797, 2, 798, 2, 799, 800, 
	2, 801, 802, 2, 803, 804, 805, 806, 
	803, 2, 807, 2, 808, 2, 809, 2, 
	810, 2, 811, 2, 812, 2, 813, 2, 
	814, 2, 815, 2, 816, 2, 817, 2, 
	818, 2, 819, 820, 2, 821, 2, 822, 
	2, 823, 2, 824, 2, 825, 826, 2, 
	827, 2, 828, 2, 829, 2, 830, 2, 
	831, 2, 832, 833, 2, 834, 2, 835, 
	2, 836, 2, 837, 2, 838, 839, 2, 
	840, 2, 841, 2, 842, 2, 843, 2, 
	844, 2, 845, 2, 846, 847, 2, 848, 
	2, 849, 2, 850, 2, 851, 2, 852, 
	853, 2, 854, 2, 855, 2, 856, 2, 
	857, 2, 858, 859, 2, 860, 2, 861, 
	2, 862, 2, 863, 2, 864, 2, 865, 
	2, 866, 867, 2, 868, 2, 869, 2, 
	870, 2, 871, 872, 873, 2, 874, 2, 
	875, 2, 876, 2, 877, 2, 878, 2, 
	879, 881, 882, 880, 2, 883, 2, 884, 
	885, 883, 2, 886, 887, 2, 888, 889, 
	889, 2, 890, 2, 891, 890, 2, 892, 
	2, 893, 2, 894, 2, 895, 2, 896, 
	2, 897, 2, 898, 2, 899, 2, 900, 
	2, 901, 2, 902, 2, 903, 904, 2, 
	905, 2, 906, 2, 907, 2, 908, 2, 
	909, 2, 910, 912, 913, 911, 2, 914, 
	2, 915, 916, 914, 2, 917, 918, 2, 
	919, 920, 920, 2, 921, 2, 922, 921, 
	2, 923, 2, 924, 2, 925, 2, 926, 
	2, 927, 2, 928, 2, 929, 2, 930, 
	2, 931, 2, 932, 2, 933, 2, 934, 
	2, 935, 2, 936, 2, 937, 939, 940, 
	938, 2, 941, 2, 942, 943, 941, 2, 
	944, 945, 2, 946, 947, 947, 2, 948, 
	2, 949, 948, 2, 950, 2, 951, 2, 
	952, 2, 953, 2, 954, 2, 955, 2, 
	956, 2, 957, 2, 958, 2, 959, 2, 
	960, 2, 961, 2, 962, 2, 963, 2, 
	964, 966, 967, 965, 2, 968, 2, 969, 
	970, 968, 2, 971, 972, 2, 973, 974, 
	974, 2, 975, 2, 976, 975, 2, 977, 
	2, 978, 2, 979, 2, 980, 2, 981, 
	2, 982, 2, 983, 2, 984, 2, 985, 
	2, 986, 2, 987, 2, 988, 989, 2, 
	990, 2, 991, 2, 992, 2, 993, 2, 
	994, 995, 2, 996, 2, 997, 2, 998, 
	2, 999, 2, 1000, 2, 1001, 2, 1002, 
	1003, 2, 1004, 2, 1005, 2, 1006, 1007, 
	1008, 2, 1009, 2, 1010, 2, 1011, 2, 
	1012, 2, 1013, 2, 1014, 1016, 1017, 1015, 
	2, 1018, 2, 1019, 1020, 1018, 2, 1021, 
	1022, 1023, 1024, 1021, 2, 1025, 1026, 1026, 
	2, 1027, 2, 1028, 1027, 2, 1029, 2, 
	1030, 2, 1031, 2, 1032, 2, 1033, 2, 
	1034, 2, 1035, 2, 1036, 2, 1037, 2, 
	1038, 2, 1039, 2, 1040, 1041, 2, 1042, 
	2, 1043, 2, 1044, 2, 1045, 2, 1046, 
	2, 1047, 1049, 1050, 1048, 2, 1051, 2, 
	1052, 1053, 1051, 2, 1054, 1055, 1056, 1057, 
	1054, 2, 1058, 1059, 1059, 2, 1060, 2, 
	1061, 1060, 2, 1062, 2, 1063, 2, 1064, 
	2, 1065, 2, 1066, 2, 1067, 2, 1068, 
	2, 1069, 2, 1070, 2, 1071, 2, 1072, 
	2, 1073, 2, 1074, 2, 1075, 2, 1076, 
	1078, 1079, 1077, 2, 1080, 2, 1081, 1082, 
	1080, 2, 1083, 1084, 1085, 1086, 1083, 2, 
	1087, 1088, 1088, 2, 1089, 2, 1090, 1089, 
	2, 1091, 2, 1092, 2, 1093, 2, 1094, 
	2, 1095, 2, 1096, 2, 1097, 2, 1098, 
	2, 1099, 2, 1100, 2, 1101, 2, 1102, 
	2, 1103, 2, 1104, 2, 1105, 1107, 1108, 
	1106, 2, 1109, 2, 1110, 1111, 1109, 2, 
	1112, 1113, 1114, 1115, 1112, 2, 1116, 1117, 
	1117, 2, 1118, 2, 1119, 1118, 2, 1120, 
	2, 1121, 2, 1122, 2, 1123, 2, 1124, 
	2, 1125, 2, 1126, 2, 1127, 2, 1128, 
	2, 1129, 2, 1130, 2, 1131, 1132, 2, 
	1133, 2, 1134, 2, 1135, 2, 1136, 2, 
	1137, 1138, 1139, 1140, 1137, 2, 1141, 2, 
	1142, 2, 1143, 2, 1144, 2, 1145, 2, 
	1146, 2, 1147, 1148, 1149, 1150, 1147, 2, 
	1151, 1152, 1152, 2, 1153, 2, 1154, 1153, 
	1154, 1154, 1154, 1154, 2, 1155, 1156, 1156, 
	2, 7, 1157, 8, 9, 10, 1157, 7, 
	1157, 1157, 1157, 2, 1, 0, 1158, 1, 
	2, 1159, 1160, 1161, 1159, 2, 0
};

static const short _hext_trans_targs[] = {
	1, 707, 0, 3, 702, 705, 706, 4, 
	5, 342, 707, 4, 5, 6, 185, 708, 
	7, 171, 181, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 27, 36, 138, 
	162, 18, 19, 24, 20, 21, 23, 20, 
	21, 23, 4, 22, 5, 707, 4, 5, 
	707, 25, 21, 26, 25, 21, 26, 28, 
	29, 33, 30, 31, 32, 30, 31, 32, 
	4, 22, 5, 707, 34, 31, 35, 34, 
	31, 35, 37, 41, 44, 45, 60, 74, 
	90, 114, 38, 39, 40, 38, 39, 40, 
	4, 5, 707, 42, 39, 43, 42, 39, 
	43, 4, 44, 5, 707, 46, 47, 48, 
	49, 50, 51, 52, 57, 53, 54, 56, 
	53, 54, 56, 55, 36, 58, 54, 59, 
	58, 54, 59, 61, 62, 63, 64, 65, 
	66, 67, 68, 69, 73, 68, 69, 73, 
	70, 71, 72, 36, 70, 71, 72, 70, 
	71, 72, 75, 76, 77, 78, 79, 80, 
	81, 82, 87, 83, 84, 86, 83, 84, 
	86, 85, 36, 88, 84, 89, 88, 84, 
	89, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 113, 99, 100, 113, 101, 
	102, 111, 112, 101, 102, 103, 108, 104, 
	105, 107, 104, 105, 107, 106, 36, 109, 
	105, 110, 109, 105, 110, 101, 102, 111, 
	112, 101, 102, 111, 112, 115, 126, 116, 
	121, 117, 118, 119, 120, 36, 122, 123, 
	124, 125, 36, 127, 128, 129, 36, 130, 
	135, 131, 132, 134, 131, 132, 134, 133, 
	36, 136, 132, 137, 136, 132, 137, 139, 
	143, 146, 154, 140, 141, 142, 140, 141, 
	142, 4, 22, 5, 707, 144, 141, 145, 
	144, 141, 145, 147, 151, 148, 149, 150, 
	148, 149, 150, 4, 22, 5, 707, 152, 
	149, 153, 152, 149, 153, 155, 156, 157, 
	161, 156, 157, 161, 4, 158, 5, 707, 
	159, 160, 4, 5, 707, 4, 158, 5, 
	707, 159, 160, 4, 158, 5, 707, 159, 
	160, 163, 164, 168, 165, 166, 167, 165, 
	166, 167, 4, 22, 5, 707, 169, 166, 
	170, 169, 166, 170, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 17, 27, 36, 
	138, 162, 182, 183, 184, 17, 27, 36, 
	138, 162, 4, 186, 187, 197, 185, 5, 
	206, 309, 707, 333, 4, 5, 707, 188, 
	189, 194, 190, 191, 193, 190, 191, 193, 
	4, 192, 5, 707, 4, 5, 707, 195, 
	191, 196, 195, 191, 196, 198, 199, 203, 
	200, 201, 202, 200, 201, 202, 4, 192, 
	5, 707, 204, 201, 205, 204, 201, 205, 
	207, 212, 215, 216, 231, 245, 261, 285, 
	208, 209, 211, 208, 209, 211, 4, 5, 
	707, 210, 4, 5, 707, 213, 209, 214, 
	213, 209, 214, 4, 215, 5, 707, 210, 
	217, 218, 219, 220, 221, 222, 223, 228, 
	224, 225, 227, 224, 225, 227, 226, 206, 
	229, 225, 230, 229, 225, 230, 232, 233, 
	234, 235, 236, 237, 238, 239, 240, 244, 
	239, 240, 244, 241, 242, 243, 206, 241, 
	242, 243, 241, 242, 243, 246, 247, 248, 
	249, 250, 251, 252, 253, 258, 254, 255, 
	257, 254, 255, 257, 256, 206, 259, 255, 
	260, 259, 255, 260, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 284, 270, 
	271, 284, 272, 273, 282, 283, 272, 273, 
	274, 279, 275, 276, 278, 275, 276, 278, 
	277, 206, 280, 276, 281, 280, 276, 281, 
	272, 273, 282, 283, 272, 273, 282, 283, 
	286, 297, 287, 292, 288, 289, 290, 291, 
	206, 293, 294, 295, 296, 206, 298, 299, 
	300, 206, 301, 306, 302, 303, 305, 302, 
	303, 305, 304, 206, 307, 303, 308, 307, 
	303, 308, 310, 314, 317, 325, 311, 312, 
	313, 311, 312, 313, 4, 192, 5, 707, 
	315, 312, 316, 315, 312, 316, 318, 322, 
	319, 320, 321, 319, 320, 321, 4, 192, 
	5, 707, 323, 320, 324, 323, 320, 324, 
	326, 327, 328, 332, 327, 328, 332, 4, 
	329, 5, 707, 330, 331, 4, 5, 707, 
	4, 329, 5, 707, 330, 331, 4, 329, 
	5, 707, 330, 331, 334, 335, 339, 336, 
	337, 338, 336, 337, 338, 4, 192, 5, 
	707, 340, 337, 341, 340, 337, 341, 343, 
	361, 374, 379, 397, 414, 685, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 353, 
	354, 355, 356, 357, 358, 359, 360, 359, 
	4, 5, 342, 707, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	360, 373, 375, 376, 377, 378, 4, 5, 
	342, 707, 380, 381, 382, 383, 384, 385, 
	390, 386, 387, 388, 389, 4, 5, 342, 
	707, 391, 392, 393, 394, 395, 396, 4, 
	5, 342, 707, 398, 399, 400, 401, 402, 
	407, 403, 404, 405, 406, 4, 5, 342, 
	707, 408, 409, 410, 411, 412, 413, 4, 
	5, 342, 707, 415, 597, 416, 417, 418, 
	419, 438, 451, 456, 474, 491, 580, 420, 
	421, 422, 423, 424, 425, 426, 427, 428, 
	429, 430, 431, 432, 433, 434, 435, 436, 
	435, 437, 418, 4, 5, 342, 707, 439, 
	440, 441, 442, 443, 444, 445, 446, 447, 
	448, 449, 450, 436, 450, 452, 453, 454, 
	455, 437, 418, 457, 458, 459, 460, 461, 
	462, 467, 463, 464, 465, 466, 437, 418, 
	468, 469, 470, 471, 472, 473, 437, 418, 
	475, 476, 477, 478, 479, 484, 480, 481, 
	482, 483, 437, 418, 485, 486, 487, 488, 
	489, 490, 437, 418, 492, 493, 494, 495, 
	514, 559, 496, 497, 498, 499, 500, 501, 
	502, 507, 511, 502, 503, 504, 437, 418, 
	503, 505, 506, 503, 508, 509, 510, 503, 
	512, 513, 503, 515, 516, 517, 518, 519, 
	538, 520, 521, 522, 523, 524, 525, 526, 
	531, 535, 526, 527, 528, 437, 418, 527, 
	529, 530, 527, 532, 533, 534, 527, 536, 
	537, 527, 539, 540, 541, 542, 543, 544, 
	545, 546, 547, 552, 556, 547, 548, 549, 
	437, 418, 548, 550, 551, 548, 553, 554, 
	555, 548, 557, 558, 548, 560, 561, 562, 
	563, 564, 565, 566, 567, 568, 573, 577, 
	568, 569, 570, 437, 418, 569, 571, 572, 
	569, 574, 575, 576, 569, 578, 579, 569, 
	581, 582, 583, 584, 585, 590, 586, 587, 
	588, 589, 437, 418, 591, 592, 593, 594, 
	595, 596, 437, 418, 598, 599, 600, 619, 
	664, 601, 602, 603, 604, 605, 606, 607, 
	612, 616, 607, 608, 609, 4, 5, 342, 
	707, 608, 610, 611, 608, 613, 614, 615, 
	608, 617, 618, 608, 620, 621, 622, 623, 
	624, 643, 625, 626, 627, 628, 629, 630, 
	631, 636, 640, 631, 632, 633, 4, 5, 
	342, 707, 632, 634, 635, 632, 637, 638, 
	639, 632, 641, 642, 632, 644, 645, 646, 
	647, 648, 649, 650, 651, 652, 657, 661, 
	652, 653, 654, 4, 5, 342, 707, 653, 
	655, 656, 653, 658, 659, 660, 653, 662, 
	663, 653, 665, 666, 667, 668, 669, 670, 
	671, 672, 673, 678, 682, 673, 674, 675, 
	4, 5, 342, 707, 674, 676, 677, 674, 
	679, 680, 681, 674, 683, 684, 674, 686, 
	687, 688, 689, 690, 695, 691, 692, 693, 
	694, 4, 5, 342, 707, 696, 697, 698, 
	699, 700, 701, 4, 5, 342, 707, 703, 
	704, 707, 704, 3, 706, 706, 2, 707, 
	1, 2
};

static const short _hext_trans_actions[] = {
	0, 0, 107, 205, 0, 93, 205, 95, 
	95, 95, 95, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 57, 57, 57, 
	57, 0, 0, 0, 13, 118, 13, 0, 
	15, 0, 291, 91, 291, 291, 219, 219, 
	219, 17, 121, 17, 0, 19, 0, 0, 
	0, 0, 13, 118, 13, 0, 15, 0, 
	283, 89, 283, 283, 17, 121, 17, 0, 
	19, 0, 0, 0, 79, 79, 79, 79, 
	79, 79, 13, 118, 13, 0, 15, 0, 
	243, 243, 243, 17, 121, 17, 0, 19, 
	0, 251, 0, 251, 251, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 118, 13, 
	0, 15, 0, 0, 71, 17, 121, 17, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 45, 193, 45, 0, 47, 0, 
	53, 0, 0, 73, 199, 51, 51, 196, 
	49, 49, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 118, 13, 0, 15, 
	0, 0, 69, 17, 121, 17, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 45, 193, 45, 0, 47, 0, 53, 
	53, 0, 0, 0, 0, 0, 0, 5, 
	112, 5, 0, 7, 0, 0, 75, 9, 
	115, 9, 0, 11, 0, 199, 199, 51, 
	51, 196, 196, 49, 49, 0, 0, 0, 
	0, 0, 0, 0, 0, 65, 0, 0, 
	0, 0, 67, 0, 0, 0, 61, 0, 
	0, 13, 118, 13, 0, 15, 0, 0, 
	63, 17, 121, 17, 0, 19, 0, 0, 
	0, 0, 0, 13, 118, 13, 0, 15, 
	0, 259, 83, 259, 259, 17, 121, 17, 
	0, 19, 0, 0, 0, 5, 112, 5, 
	0, 7, 0, 267, 85, 267, 267, 9, 
	115, 9, 0, 11, 0, 0, 45, 193, 
	45, 0, 47, 0, 304, 202, 304, 304, 
	0, 0, 215, 215, 215, 326, 239, 326, 
	326, 51, 51, 314, 235, 314, 314, 49, 
	49, 0, 0, 0, 13, 118, 13, 0, 
	15, 0, 275, 87, 275, 275, 17, 121, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 59, 59, 59, 
	59, 59, 0, 0, 0, 55, 55, 55, 
	55, 55, 299, 109, 3, 3, 0, 299, 
	3, 3, 299, 3, 231, 231, 231, 0, 
	0, 0, 13, 118, 13, 0, 15, 0, 
	295, 91, 295, 295, 227, 227, 227, 17, 
	121, 17, 0, 19, 0, 0, 0, 0, 
	13, 118, 13, 0, 15, 0, 287, 89, 
	287, 287, 17, 121, 17, 0, 19, 0, 
	0, 0, 79, 79, 79, 79, 79, 79, 
	13, 118, 13, 0, 15, 0, 247, 247, 
	247, 77, 211, 211, 211, 17, 121, 17, 
	0, 19, 0, 255, 0, 255, 255, 81, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 118, 13, 0, 15, 0, 0, 71, 
	17, 121, 17, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 45, 193, 45, 
	0, 47, 0, 53, 0, 0, 73, 199, 
	51, 51, 196, 49, 49, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 118, 
	13, 0, 15, 0, 0, 69, 17, 121, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 45, 193, 45, 0, 
	47, 0, 53, 53, 0, 0, 0, 0, 
	0, 0, 5, 112, 5, 0, 7, 0, 
	0, 75, 9, 115, 9, 0, 11, 0, 
	199, 199, 51, 51, 196, 196, 49, 49, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	65, 0, 0, 0, 0, 67, 0, 0, 
	0, 61, 0, 0, 13, 118, 13, 0, 
	15, 0, 0, 63, 17, 121, 17, 0, 
	19, 0, 0, 0, 0, 0, 13, 118, 
	13, 0, 15, 0, 263, 83, 263, 263, 
	17, 121, 17, 0, 19, 0, 0, 0, 
	5, 112, 5, 0, 7, 0, 271, 85, 
	271, 271, 9, 115, 9, 0, 11, 0, 
	0, 45, 193, 45, 0, 47, 0, 309, 
	202, 309, 309, 0, 0, 223, 223, 223, 
	332, 239, 332, 332, 51, 51, 320, 235, 
	320, 320, 49, 49, 0, 0, 0, 13, 
	118, 13, 0, 15, 0, 279, 87, 279, 
	279, 17, 121, 17, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 39, 0, 
	99, 99, 99, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 33, 
	35, 0, 0, 0, 0, 0, 130, 130, 
	130, 130, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 154, 154, 154, 
	154, 0, 0, 0, 0, 0, 0, 160, 
	160, 160, 160, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 166, 166, 166, 
	166, 0, 0, 0, 0, 0, 0, 172, 
	172, 172, 172, 0, 0, 0, 0, 41, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 39, 
	0, 43, 43, 97, 97, 97, 97, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 33, 35, 0, 0, 0, 0, 
	0, 127, 127, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 151, 151, 
	0, 0, 0, 0, 0, 0, 157, 157, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 163, 163, 0, 0, 0, 0, 
	0, 0, 169, 169, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	25, 0, 0, 0, 27, 27, 133, 133, 
	29, 124, 0, 31, 0, 0, 0, 21, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 25, 25, 
	0, 0, 0, 27, 27, 139, 139, 29, 
	124, 0, 31, 0, 0, 0, 21, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 25, 25, 0, 0, 0, 27, 27, 
	175, 175, 29, 124, 0, 31, 0, 0, 
	0, 21, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 25, 25, 0, 0, 
	0, 27, 27, 145, 145, 29, 124, 0, 
	31, 0, 0, 0, 21, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 181, 181, 0, 0, 0, 0, 
	0, 0, 187, 187, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 25, 25, 
	0, 0, 0, 27, 27, 136, 136, 136, 
	136, 29, 124, 0, 31, 0, 0, 0, 
	21, 0, 0, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	25, 0, 0, 0, 27, 27, 142, 142, 
	142, 142, 29, 124, 0, 31, 0, 0, 
	0, 21, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 25, 25, 0, 0, 
	0, 27, 27, 178, 178, 178, 178, 29, 
	124, 0, 31, 0, 0, 0, 21, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 25, 25, 0, 0, 0, 27, 27, 
	148, 148, 148, 148, 29, 124, 0, 31, 
	0, 0, 0, 21, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 184, 184, 184, 184, 0, 0, 0, 
	0, 0, 0, 190, 190, 190, 190, 103, 
	103, 105, 0, 208, 208, 0, 0, 101, 
	101, 101
};

static const short _hext_eof_actions[] = {
	0, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 0, 101
};

static const int hext_start = 707;
static const int hext_first_final = 707;
static const int hext_error = 0;

static const int hext_en_main = 707;


#line 51 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Convenience lambda to store the start of a token. Used within the hext
  // machine definition.
  auto tk_start = [this, &tok_begin, &tok_end](){
    tok_begin = this->p;
    tok_end = nullptr;
  };

  // Convenience lambda to complete a token. Used within the hext
  // machine definition.
  auto tk_stop = [this, &tok, &tok_begin, &tok_end](){
    assert(tok_begin);
    assert(this->p);
    tok_end = this->p;
    tok = std::string(
      tok_begin,
      static_cast<std::string::size_type>(std::distance(tok_begin, tok_end))
    );
  };

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1568 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1573 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _hext_indicies[_trans];
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ tk_stop(); pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ tk_stop(); pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ tk_stop(); pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 182 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(); }
	break;
	case 48:
#line 186 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(CasePipe::ToUpper); }
	break;
	case 49:
#line 188 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 50:
#line 190 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 51:
#line 192 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 52:
#line 195 "hext-machine.rl"
	{ pv.add_pipe<RegexReplacePipe>(*pv.regex, pv.literal_value); }
	break;
	case 53:
#line 201 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 54:
#line 203 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 55:
#line 204 "hext-machine.rl"
	{ tk_stop(); pv.cap_var = tok; }
	break;
	case 56:
#line 211 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 57:
#line 214 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 58:
#line 217 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 59:
#line 220 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 60:
#line 223 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 61:
#line 231 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 62:
#line 236 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 63:
#line 240 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 64:
#line 244 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 65:
#line 252 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 66:
#line 256 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 67:
#line 260 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 68:
#line 263 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 69:
#line 264 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 70:
#line 282 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 71:
#line 285 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 72:
#line 288 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 73:
#line 289 "hext-machine.rl"
	{ tk_stop(); set_open_tag_or_throw(tok); }
	break;
	case 74:
#line 292 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 75:
#line 295 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 76:
#line 303 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 77:
#line 310 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 78:
#line 311 "hext-machine.rl"
	{ tk_stop();
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 79:
#line 316 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1985 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 76:
#line 303 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 79:
#line 316 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 2009 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 123 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

