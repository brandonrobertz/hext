// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/RegexPipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 65 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 65, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 2, 3, 62, 2, 4, 
	5, 2, 6, 7, 2, 8, 9, 2, 
	10, 11, 2, 16, 17, 2, 19, 35, 
	2, 19, 70, 2, 24, 35, 2, 24, 
	70, 2, 25, 35, 2, 25, 70, 2, 
	26, 35, 2, 26, 70, 2, 27, 35, 
	2, 27, 70, 2, 28, 35, 2, 28, 
	70, 2, 29, 35, 2, 29, 70, 2, 
	30, 35, 2, 30, 70, 2, 31, 35, 
	2, 31, 70, 2, 32, 35, 2, 32, 
	70, 2, 33, 35, 2, 33, 70, 2, 
	36, 37, 2, 38, 40, 2, 39, 40, 
	2, 40, 41, 2, 65, 67, 2, 66, 
	67, 3, 0, 59, 64, 3, 1, 57, 
	64, 3, 1, 58, 64, 3, 1, 60, 
	64, 3, 1, 61, 64, 3, 1, 63, 
	64, 3, 38, 40, 41, 3, 39, 40, 
	41, 3, 48, 56, 64, 3, 48, 59, 
	64, 3, 50, 56, 64, 3, 50, 59, 
	64, 3, 51, 58, 64, 3, 51, 61, 
	64, 3, 52, 58, 64, 3, 52, 61, 
	64, 3, 53, 58, 64, 3, 53, 61, 
	64, 3, 54, 58, 64, 3, 54, 61, 
	64, 3, 55, 58, 64, 3, 55, 61, 
	64, 4, 3, 62, 63, 64, 4, 40, 
	41, 57, 64, 4, 40, 41, 60, 64, 
	5, 38, 40, 41, 57, 64, 5, 38, 
	40, 41, 60, 64, 5, 39, 40, 41, 
	57, 64, 5, 39, 40, 41, 60, 64
	
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 43, 44, 46, 48, 50, 56, 61, 
	62, 64, 66, 67, 68, 70, 72, 74, 
	80, 81, 83, 85, 86, 87, 98, 100, 
	102, 107, 108, 110, 112, 113, 118, 129, 
	133, 135, 137, 143, 144, 146, 148, 149, 
	151, 153, 161, 166, 174, 182, 183, 185, 
	187, 189, 195, 196, 198, 200, 201, 202, 
	204, 206, 208, 214, 215, 217, 219, 220, 
	222, 223, 224, 225, 226, 227, 228, 230, 
	232, 235, 237, 240, 243, 244, 245, 246, 
	247, 250, 252, 254, 256, 257, 259, 260, 
	262, 264, 265, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 280, 281, 282, 283, 
	289, 308, 313, 314, 316, 318, 320, 326, 
	331, 332, 334, 336, 337, 338, 340, 342, 
	344, 350, 351, 353, 355, 356, 375, 379, 
	381, 383, 389, 390, 392, 394, 395, 397, 
	399, 407, 412, 420, 428, 429, 431, 433, 
	435, 441, 442, 444, 446, 447, 449, 451, 
	457, 462, 463, 465, 467, 468, 474, 486, 
	487, 489, 491, 493, 499, 500, 502, 504, 
	505, 507, 508, 509, 510, 511, 512, 513, 
	515, 517, 520, 522, 523, 534, 537, 540, 
	541, 542, 543, 544, 547, 549, 551, 553, 
	554, 556, 557, 559, 561, 562, 569, 570, 
	571, 572, 573, 574, 575, 576, 577, 578, 
	579, 580, 581, 582, 583, 584, 586, 589, 
	595, 596, 597, 598, 599, 600, 601, 602, 
	603, 604, 605, 606, 608, 611, 612, 613, 
	614, 615, 621, 622, 623, 624, 625, 626, 
	628, 629, 630, 631, 632, 638, 639, 640, 
	641, 642, 643, 644, 650, 651, 652, 653, 
	654, 656, 657, 658, 659, 660, 666, 667, 
	668, 669, 670, 671, 672, 678, 680, 681, 
	682, 683, 690, 691, 692, 693, 694, 695, 
	696, 697, 698, 699, 700, 701, 702, 703, 
	704, 705, 707, 710, 712, 718, 719, 720, 
	721, 722, 723, 724, 725, 726, 727, 728, 
	729, 731, 734, 735, 736, 737, 738, 740, 
	741, 742, 743, 744, 745, 747, 748, 749, 
	750, 751, 753, 754, 755, 756, 757, 758, 
	759, 761, 762, 763, 764, 765, 767, 768, 
	769, 770, 771, 773, 774, 775, 776, 777, 
	778, 779, 781, 782, 783, 784, 787, 788, 
	789, 790, 791, 792, 797, 799, 803, 805, 
	808, 810, 813, 814, 815, 816, 817, 818, 
	819, 820, 821, 822, 823, 824, 826, 827, 
	828, 829, 830, 831, 836, 838, 842, 844, 
	847, 849, 852, 853, 854, 855, 856, 857, 
	858, 859, 860, 861, 862, 863, 864, 865, 
	866, 871, 873, 877, 879, 882, 884, 887, 
	888, 889, 890, 891, 892, 893, 894, 895, 
	896, 897, 898, 899, 900, 901, 906, 908, 
	912, 914, 917, 919, 922, 923, 924, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	935, 936, 937, 938, 939, 941, 942, 943, 
	944, 945, 946, 947, 949, 950, 951, 954, 
	955, 956, 957, 958, 959, 964, 966, 970, 
	976, 979, 981, 984, 985, 986, 987, 988, 
	989, 990, 991, 992, 993, 994, 995, 997, 
	998, 999, 1000, 1001, 1002, 1007, 1009, 1013, 
	1019, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 
	1040, 1041, 1046, 1048, 1052, 1058, 1061, 1063, 
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1085, 
	1087, 1091, 1097, 1100, 1102, 1105, 1106, 1107, 
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 
	1116, 1118, 1119, 1120, 1121, 1122, 1128, 1129, 
	1130, 1131, 1132, 1133, 1134, 1140, 1145, 1146, 
	1155, 1160, 1174, 1179, 1184
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 45, 
	61, 94, 124, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 62, 34, 
	39, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 92, 34, 92, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 48, 57, 65, 90, 97, 
	122, 34, 39, 47, 61, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 114, 116, 101, 103, 
	101, 120, 40, 47, 47, 92, 47, 92, 
	41, 99, 105, 45, 124, 41, 99, 105, 
	41, 99, 105, 92, 114, 105, 109, 40, 
	45, 124, 34, 39, 34, 92, 34, 92, 
	41, 45, 124, 92, 39, 92, 39, 92, 
	92, 116, 114, 105, 112, 45, 116, 97, 
	103, 115, 36, 42, 45, 61, 94, 124, 
	101, 120, 116, 36, 42, 45, 61, 94, 
	124, 32, 33, 36, 42, 45, 47, 61, 
	62, 94, 95, 124, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 47, 62, 9, 
	13, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 32, 33, 36, 42, 
	45, 47, 61, 62, 94, 95, 124, 9, 
	13, 48, 57, 65, 90, 97, 122, 34, 
	39, 47, 61, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 47, 92, 47, 92, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	47, 62, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 92, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 34, 
	92, 34, 92, 32, 47, 62, 63, 9, 
	13, 32, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 63, 9, 13, 
	48, 57, 65, 90, 97, 122, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 114, 116, 101, 103, 101, 120, 40, 
	47, 47, 92, 47, 92, 41, 99, 105, 
	45, 124, 62, 34, 39, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 41, 99, 
	105, 41, 99, 105, 92, 114, 105, 109, 
	40, 45, 124, 34, 39, 34, 92, 34, 
	92, 41, 45, 124, 92, 39, 92, 39, 
	92, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 111, 116, 
	116, 40, 58, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 41, 58, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 41, 58, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	32, 34, 35, 39, 60, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 3, 2, 2, 
	3, 1, 2, 2, 1, 3, 3, 4, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 6, 3, 6, 6, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 3, 3, 1, 1, 1, 1, 
	3, 2, 2, 2, 1, 2, 1, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 1, 1, 1, 6, 
	11, 3, 1, 2, 2, 2, 4, 3, 
	1, 2, 2, 1, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 11, 4, 2, 
	2, 4, 1, 2, 2, 1, 2, 2, 
	6, 3, 6, 6, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 2, 2, 4, 
	3, 1, 2, 2, 1, 4, 4, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	2, 3, 2, 1, 3, 3, 3, 1, 
	1, 1, 1, 3, 2, 2, 2, 1, 
	2, 1, 2, 2, 1, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 2, 1, 1, 
	1, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 2, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	2, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 1, 1, 3, 
	1, 6, 3, 3, 6
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 4, 0, 0, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 1, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 4, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 2, 0, 3, 
	2, 4, 1, 1, 5
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 53, 55, 58, 61, 64, 70, 75, 
	77, 80, 83, 85, 87, 90, 93, 96, 
	102, 104, 107, 110, 112, 114, 122, 125, 
	128, 133, 135, 138, 141, 143, 148, 156, 
	161, 164, 167, 173, 175, 178, 181, 183, 
	186, 189, 197, 202, 210, 218, 220, 223, 
	226, 229, 235, 237, 240, 243, 245, 247, 
	250, 253, 256, 262, 264, 267, 270, 272, 
	275, 277, 279, 281, 283, 285, 287, 290, 
	293, 297, 300, 304, 308, 310, 312, 314, 
	316, 320, 323, 326, 329, 331, 334, 336, 
	339, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 369, 371, 373, 375, 
	382, 398, 403, 405, 408, 411, 414, 420, 
	425, 427, 430, 433, 435, 437, 440, 443, 
	446, 452, 454, 457, 460, 462, 478, 483, 
	486, 489, 495, 497, 500, 503, 505, 508, 
	511, 519, 524, 532, 540, 542, 545, 548, 
	551, 557, 559, 562, 565, 567, 570, 573, 
	579, 584, 586, 589, 592, 594, 600, 609, 
	611, 614, 617, 620, 626, 628, 631, 634, 
	636, 639, 641, 643, 645, 647, 649, 651, 
	654, 657, 661, 664, 666, 674, 678, 682, 
	684, 686, 688, 690, 694, 697, 700, 703, 
	705, 708, 710, 713, 716, 718, 726, 728, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 761, 
	767, 769, 771, 773, 775, 777, 779, 781, 
	783, 785, 787, 789, 791, 794, 796, 798, 
	800, 802, 808, 810, 812, 814, 816, 818, 
	821, 823, 825, 827, 829, 835, 837, 839, 
	841, 843, 845, 847, 853, 855, 857, 859, 
	861, 864, 866, 868, 870, 872, 878, 880, 
	882, 884, 886, 888, 890, 896, 899, 901, 
	903, 905, 913, 915, 917, 919, 921, 923, 
	925, 927, 929, 931, 933, 935, 937, 939, 
	941, 943, 945, 948, 951, 957, 959, 961, 
	963, 965, 967, 969, 971, 973, 975, 977, 
	979, 981, 984, 986, 988, 990, 992, 995, 
	997, 999, 1001, 1003, 1005, 1008, 1010, 1012, 
	1014, 1016, 1019, 1021, 1023, 1025, 1027, 1029, 
	1031, 1034, 1036, 1038, 1040, 1042, 1045, 1047, 
	1049, 1051, 1053, 1056, 1058, 1060, 1062, 1064, 
	1066, 1068, 1071, 1073, 1075, 1077, 1081, 1083, 
	1085, 1087, 1089, 1091, 1096, 1098, 1102, 1105, 
	1109, 1111, 1114, 1116, 1118, 1120, 1122, 1124, 
	1126, 1128, 1130, 1132, 1134, 1136, 1139, 1141, 
	1143, 1145, 1147, 1149, 1154, 1156, 1160, 1163, 
	1167, 1169, 1172, 1174, 1176, 1178, 1180, 1182, 
	1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 
	1200, 1205, 1207, 1211, 1214, 1218, 1220, 1223, 
	1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 
	1241, 1243, 1245, 1247, 1249, 1251, 1256, 1258, 
	1262, 1265, 1269, 1271, 1274, 1276, 1278, 1280, 
	1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 
	1299, 1301, 1303, 1305, 1307, 1310, 1312, 1314, 
	1316, 1318, 1320, 1322, 1325, 1327, 1329, 1333, 
	1335, 1337, 1339, 1341, 1343, 1348, 1350, 1354, 
	1360, 1364, 1366, 1369, 1371, 1373, 1375, 1377, 
	1379, 1381, 1383, 1385, 1387, 1389, 1391, 1394, 
	1396, 1398, 1400, 1402, 1404, 1409, 1411, 1415, 
	1421, 1425, 1427, 1430, 1432, 1434, 1436, 1438, 
	1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 
	1456, 1458, 1463, 1465, 1469, 1475, 1479, 1481, 
	1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 
	1500, 1502, 1504, 1506, 1508, 1510, 1512, 1517, 
	1519, 1523, 1529, 1533, 1535, 1538, 1540, 1542, 
	1544, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 
	1560, 1563, 1565, 1567, 1569, 1571, 1577, 1579, 
	1581, 1583, 1585, 1587, 1589, 1595, 1599, 1601, 
	1608, 1612, 1623, 1628, 1633
};

static const short _hext_trans_targs[] = {
	578, 1, 3, 573, 576, 577, 577, 0, 
	4, 5, 213, 578, 4, 0, 4, 5, 
	578, 6, 4, 120, 120, 0, 579, 0, 
	7, 106, 116, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 47, 70, 79, 0, 18, 0, 19, 
	24, 0, 21, 23, 20, 21, 23, 20, 
	4, 22, 5, 578, 4, 0, 4, 5, 
	578, 4, 0, 23, 20, 21, 26, 25, 
	21, 26, 25, 26, 25, 28, 0, 29, 
	33, 0, 31, 32, 30, 31, 32, 30, 
	4, 22, 5, 578, 4, 0, 32, 30, 
	31, 35, 34, 31, 35, 34, 35, 34, 
	37, 0, 38, 42, 45, 45, 46, 46, 
	46, 0, 40, 41, 39, 40, 41, 39, 
	4, 5, 578, 4, 0, 41, 39, 40, 
	44, 43, 40, 44, 43, 44, 43, 4, 
	5, 578, 4, 0, 4, 5, 578, 4, 
	46, 46, 46, 0, 48, 52, 55, 62, 
	0, 50, 51, 49, 50, 51, 49, 4, 
	22, 5, 578, 4, 0, 51, 49, 50, 
	54, 53, 50, 54, 53, 54, 53, 57, 
	61, 56, 57, 61, 56, 4, 58, 5, 
	578, 59, 60, 4, 0, 4, 5, 578, 
	4, 0, 4, 58, 5, 578, 59, 60, 
	4, 0, 4, 58, 5, 578, 59, 60, 
	4, 0, 61, 56, 63, 67, 0, 65, 
	66, 64, 65, 66, 64, 4, 22, 5, 
	578, 4, 0, 66, 64, 65, 69, 68, 
	65, 69, 68, 69, 68, 71, 0, 72, 
	76, 0, 74, 75, 73, 74, 75, 73, 
	4, 22, 5, 578, 4, 0, 75, 73, 
	74, 78, 77, 74, 78, 77, 78, 77, 
	80, 93, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 88, 
	92, 87, 88, 92, 87, 89, 90, 91, 
	0, 36, 79, 0, 89, 90, 91, 0, 
	89, 90, 91, 0, 92, 87, 94, 0, 
	95, 0, 96, 0, 97, 36, 79, 0, 
	98, 103, 0, 100, 102, 99, 100, 102, 
	99, 101, 0, 36, 79, 0, 102, 99, 
	100, 105, 104, 100, 105, 104, 105, 104, 
	107, 0, 108, 0, 109, 0, 110, 0, 
	111, 0, 112, 0, 113, 0, 114, 0, 
	115, 0, 17, 27, 36, 47, 70, 79, 
	0, 117, 0, 118, 0, 119, 0, 17, 
	27, 36, 47, 70, 79, 0, 4, 121, 
	122, 132, 141, 5, 142, 578, 175, 120, 
	184, 4, 120, 120, 120, 0, 4, 5, 
	578, 4, 0, 123, 0, 124, 129, 0, 
	126, 128, 125, 126, 128, 125, 4, 127, 
	5, 578, 4, 0, 4, 5, 578, 4, 
	0, 128, 125, 126, 131, 130, 126, 131, 
	130, 131, 130, 133, 0, 134, 138, 0, 
	136, 137, 135, 136, 137, 135, 4, 127, 
	5, 578, 4, 0, 137, 135, 136, 140, 
	139, 136, 140, 139, 140, 139, 4, 121, 
	122, 132, 141, 5, 142, 580, 175, 120, 
	184, 4, 120, 120, 120, 0, 143, 147, 
	150, 157, 0, 145, 146, 144, 145, 146, 
	144, 4, 127, 5, 578, 4, 0, 146, 
	144, 145, 149, 148, 145, 149, 148, 149, 
	148, 152, 156, 151, 152, 156, 151, 4, 
	153, 5, 578, 154, 155, 4, 0, 4, 
	5, 578, 4, 0, 4, 153, 5, 578, 
	154, 155, 4, 0, 4, 153, 5, 578, 
	154, 155, 4, 0, 156, 151, 158, 162, 
	0, 160, 161, 159, 160, 161, 159, 4, 
	127, 5, 578, 4, 0, 161, 159, 160, 
	164, 163, 160, 164, 163, 164, 163, 167, 
	169, 166, 167, 169, 166, 4, 5, 578, 
	168, 4, 0, 4, 5, 578, 4, 0, 
	169, 166, 167, 172, 171, 167, 172, 171, 
	172, 171, 4, 5, 578, 168, 4, 0, 
	4, 5, 578, 168, 4, 174, 174, 174, 
	0, 176, 0, 177, 181, 0, 179, 180, 
	178, 179, 180, 178, 4, 127, 5, 578, 
	4, 0, 180, 178, 179, 183, 182, 179, 
	183, 182, 183, 182, 185, 200, 0, 186, 
	0, 187, 0, 188, 0, 189, 0, 190, 
	0, 191, 0, 193, 199, 192, 193, 199, 
	192, 194, 197, 198, 0, 195, 184, 0, 
	196, 0, 165, 170, 173, 173, 174, 174, 
	174, 0, 194, 197, 198, 0, 194, 197, 
	198, 0, 199, 192, 201, 0, 202, 0, 
	203, 0, 204, 195, 184, 0, 205, 210, 
	0, 207, 209, 206, 207, 209, 206, 208, 
	0, 195, 184, 0, 209, 206, 207, 212, 
	211, 207, 212, 211, 212, 211, 214, 232, 
	245, 250, 268, 285, 556, 0, 215, 0, 
	216, 0, 217, 0, 218, 0, 219, 0, 
	220, 0, 221, 0, 222, 0, 223, 0, 
	224, 0, 225, 0, 226, 0, 227, 0, 
	228, 0, 229, 0, 230, 0, 231, 230, 
	0, 4, 5, 213, 578, 4, 0, 233, 
	0, 234, 0, 235, 0, 236, 0, 237, 
	0, 238, 0, 239, 0, 240, 0, 241, 
	0, 242, 0, 243, 0, 244, 0, 231, 
	244, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 4, 5, 213, 578, 4, 0, 
	251, 0, 252, 0, 253, 0, 254, 0, 
	255, 0, 256, 261, 0, 257, 0, 258, 
	0, 259, 0, 260, 0, 4, 5, 213, 
	578, 4, 0, 262, 0, 263, 0, 264, 
	0, 265, 0, 266, 0, 267, 0, 4, 
	5, 213, 578, 4, 0, 269, 0, 270, 
	0, 271, 0, 272, 0, 273, 278, 0, 
	274, 0, 275, 0, 276, 0, 277, 0, 
	4, 5, 213, 578, 4, 0, 279, 0, 
	280, 0, 281, 0, 282, 0, 283, 0, 
	284, 0, 4, 5, 213, 578, 4, 0, 
	286, 468, 0, 287, 0, 288, 0, 289, 
	0, 290, 309, 322, 327, 345, 362, 451, 
	0, 291, 0, 292, 0, 293, 0, 294, 
	0, 295, 0, 296, 0, 297, 0, 298, 
	0, 299, 0, 300, 0, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 0, 306, 
	0, 307, 306, 0, 308, 289, 0, 4, 
	5, 213, 578, 4, 0, 310, 0, 311, 
	0, 312, 0, 313, 0, 314, 0, 315, 
	0, 316, 0, 317, 0, 318, 0, 319, 
	0, 320, 0, 321, 0, 307, 321, 0, 
	323, 0, 324, 0, 325, 0, 326, 0, 
	308, 289, 0, 328, 0, 329, 0, 330, 
	0, 331, 0, 332, 0, 333, 338, 0, 
	334, 0, 335, 0, 336, 0, 337, 0, 
	308, 289, 0, 339, 0, 340, 0, 341, 
	0, 342, 0, 343, 0, 344, 0, 308, 
	289, 0, 346, 0, 347, 0, 348, 0, 
	349, 0, 350, 355, 0, 351, 0, 352, 
	0, 353, 0, 354, 0, 308, 289, 0, 
	356, 0, 357, 0, 358, 0, 359, 0, 
	360, 0, 361, 0, 308, 289, 0, 363, 
	0, 364, 0, 365, 0, 366, 385, 430, 
	0, 367, 0, 368, 0, 369, 0, 370, 
	0, 371, 0, 372, 378, 382, 373, 0, 
	373, 0, 374, 375, 373, 0, 308, 289, 
	0, 374, 376, 376, 0, 377, 0, 374, 
	377, 0, 379, 0, 380, 0, 381, 0, 
	374, 0, 383, 0, 384, 0, 374, 0, 
	386, 0, 387, 0, 388, 0, 389, 0, 
	390, 409, 0, 391, 0, 392, 0, 393, 
	0, 394, 0, 395, 0, 396, 402, 406, 
	397, 0, 397, 0, 398, 399, 397, 0, 
	308, 289, 0, 398, 400, 400, 0, 401, 
	0, 398, 401, 0, 403, 0, 404, 0, 
	405, 0, 398, 0, 407, 0, 408, 0, 
	398, 0, 410, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 415, 0, 416, 0, 
	417, 423, 427, 418, 0, 418, 0, 419, 
	420, 418, 0, 308, 289, 0, 419, 421, 
	421, 0, 422, 0, 419, 422, 0, 424, 
	0, 425, 0, 426, 0, 419, 0, 428, 
	0, 429, 0, 419, 0, 431, 0, 432, 
	0, 433, 0, 434, 0, 435, 0, 436, 
	0, 437, 0, 438, 444, 448, 439, 0, 
	439, 0, 440, 441, 439, 0, 308, 289, 
	0, 440, 442, 442, 0, 443, 0, 440, 
	443, 0, 445, 0, 446, 0, 447, 0, 
	440, 0, 449, 0, 450, 0, 440, 0, 
	452, 0, 453, 0, 454, 0, 455, 0, 
	456, 461, 0, 457, 0, 458, 0, 459, 
	0, 460, 0, 308, 289, 0, 462, 0, 
	463, 0, 464, 0, 465, 0, 466, 0, 
	467, 0, 308, 289, 0, 469, 0, 470, 
	0, 471, 490, 535, 0, 472, 0, 473, 
	0, 474, 0, 475, 0, 476, 0, 477, 
	483, 487, 478, 0, 478, 0, 479, 480, 
	478, 0, 4, 5, 213, 578, 4, 0, 
	479, 481, 481, 0, 482, 0, 479, 482, 
	0, 484, 0, 485, 0, 486, 0, 479, 
	0, 488, 0, 489, 0, 479, 0, 491, 
	0, 492, 0, 493, 0, 494, 0, 495, 
	514, 0, 496, 0, 497, 0, 498, 0, 
	499, 0, 500, 0, 501, 507, 511, 502, 
	0, 502, 0, 503, 504, 502, 0, 4, 
	5, 213, 578, 4, 0, 503, 505, 505, 
	0, 506, 0, 503, 506, 0, 508, 0, 
	509, 0, 510, 0, 503, 0, 512, 0, 
	513, 0, 503, 0, 515, 0, 516, 0, 
	517, 0, 518, 0, 519, 0, 520, 0, 
	521, 0, 522, 528, 532, 523, 0, 523, 
	0, 524, 525, 523, 0, 4, 5, 213, 
	578, 4, 0, 524, 526, 526, 0, 527, 
	0, 524, 527, 0, 529, 0, 530, 0, 
	531, 0, 524, 0, 533, 0, 534, 0, 
	524, 0, 536, 0, 537, 0, 538, 0, 
	539, 0, 540, 0, 541, 0, 542, 0, 
	543, 549, 553, 544, 0, 544, 0, 545, 
	546, 544, 0, 4, 5, 213, 578, 4, 
	0, 545, 547, 547, 0, 548, 0, 545, 
	548, 0, 550, 0, 551, 0, 552, 0, 
	545, 0, 554, 0, 555, 0, 545, 0, 
	557, 0, 558, 0, 559, 0, 560, 0, 
	561, 566, 0, 562, 0, 563, 0, 564, 
	0, 565, 0, 4, 5, 213, 578, 4, 
	0, 567, 0, 568, 0, 569, 0, 570, 
	0, 571, 0, 572, 0, 4, 5, 213, 
	578, 4, 0, 574, 575, 575, 0, 578, 
	0, 575, 578, 575, 575, 575, 575, 0, 
	3, 577, 577, 0, 4, 577, 5, 213, 
	578, 577, 4, 577, 577, 577, 0, 578, 
	1, 2, 578, 0, 578, 1, 2, 578, 
	0, 578, 165, 1, 170, 2, 173, 578, 
	173, 174, 174, 174, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 195, 0, 83, 195, 195, 97, 
	85, 85, 85, 85, 85, 97, 0, 0, 
	0, 0, 0, 1, 1, 97, 0, 97, 
	0, 0, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 57, 57, 
	57, 57, 57, 57, 97, 0, 97, 0, 
	0, 97, 102, 5, 5, 7, 0, 0, 
	281, 81, 281, 281, 281, 97, 209, 209, 
	209, 209, 97, 0, 0, 105, 9, 9, 
	11, 0, 0, 0, 0, 0, 97, 0, 
	0, 97, 102, 5, 5, 7, 0, 0, 
	273, 79, 273, 273, 273, 97, 0, 0, 
	105, 9, 9, 11, 0, 0, 0, 0, 
	0, 97, 0, 0, 69, 69, 69, 69, 
	69, 97, 108, 13, 13, 15, 0, 0, 
	233, 233, 233, 233, 97, 0, 0, 111, 
	17, 17, 19, 0, 0, 0, 0, 241, 
	241, 241, 241, 97, 241, 241, 241, 241, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	97, 102, 5, 5, 7, 0, 0, 249, 
	73, 249, 249, 249, 97, 0, 0, 105, 
	9, 9, 11, 0, 0, 0, 0, 183, 
	45, 45, 47, 0, 0, 294, 192, 294, 
	294, 0, 0, 294, 97, 205, 205, 205, 
	205, 97, 316, 229, 316, 316, 51, 51, 
	316, 97, 304, 225, 304, 304, 49, 49, 
	304, 97, 0, 0, 0, 0, 97, 102, 
	5, 5, 7, 0, 0, 257, 75, 257, 
	257, 257, 97, 0, 0, 105, 9, 9, 
	11, 0, 0, 0, 0, 0, 97, 0, 
	0, 97, 102, 5, 5, 7, 0, 0, 
	265, 77, 265, 265, 265, 97, 0, 0, 
	105, 9, 9, 11, 0, 0, 0, 0, 
	0, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 183, 
	45, 45, 47, 0, 0, 53, 0, 0, 
	97, 65, 65, 97, 189, 51, 51, 97, 
	186, 49, 49, 97, 0, 0, 0, 97, 
	0, 97, 0, 97, 0, 61, 61, 97, 
	0, 0, 97, 108, 13, 13, 15, 0, 
	0, 0, 97, 63, 63, 97, 0, 0, 
	111, 17, 17, 19, 0, 0, 0, 0, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 59, 59, 59, 59, 59, 59, 
	97, 0, 97, 0, 97, 0, 97, 55, 
	55, 55, 55, 55, 55, 97, 289, 99, 
	3, 3, 3, 289, 3, 289, 3, 0, 
	3, 289, 0, 0, 0, 97, 221, 221, 
	221, 221, 97, 0, 97, 0, 0, 97, 
	102, 5, 5, 7, 0, 0, 285, 81, 
	285, 285, 285, 97, 217, 217, 217, 217, 
	97, 0, 0, 105, 9, 9, 11, 0, 
	0, 0, 0, 0, 97, 0, 0, 97, 
	102, 5, 5, 7, 0, 0, 277, 79, 
	277, 277, 277, 97, 0, 0, 105, 9, 
	9, 11, 0, 0, 0, 0, 289, 99, 
	3, 3, 3, 289, 3, 289, 3, 0, 
	3, 289, 0, 0, 0, 97, 0, 0, 
	0, 0, 97, 102, 5, 5, 7, 0, 
	0, 253, 73, 253, 253, 253, 97, 0, 
	0, 105, 9, 9, 11, 0, 0, 0, 
	0, 183, 45, 45, 47, 0, 0, 299, 
	192, 299, 299, 0, 0, 299, 97, 213, 
	213, 213, 213, 97, 322, 229, 322, 322, 
	51, 51, 322, 97, 310, 225, 310, 310, 
	49, 49, 310, 97, 0, 0, 0, 0, 
	97, 102, 5, 5, 7, 0, 0, 261, 
	75, 261, 261, 261, 97, 0, 0, 105, 
	9, 9, 11, 0, 0, 0, 0, 108, 
	13, 13, 15, 0, 0, 237, 237, 237, 
	67, 237, 97, 201, 201, 201, 201, 97, 
	0, 0, 111, 17, 17, 19, 0, 0, 
	0, 0, 245, 245, 245, 71, 245, 97, 
	245, 245, 245, 71, 245, 0, 0, 0, 
	97, 0, 97, 0, 0, 97, 102, 5, 
	5, 7, 0, 0, 269, 77, 269, 269, 
	269, 97, 0, 0, 105, 9, 9, 11, 
	0, 0, 0, 0, 0, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 183, 45, 45, 47, 0, 
	0, 53, 0, 0, 97, 65, 65, 97, 
	0, 97, 0, 0, 69, 69, 69, 69, 
	69, 97, 189, 51, 51, 97, 186, 49, 
	49, 97, 0, 0, 0, 97, 0, 97, 
	0, 97, 0, 61, 61, 97, 0, 0, 
	97, 108, 13, 13, 15, 0, 0, 0, 
	97, 63, 63, 97, 0, 0, 111, 17, 
	17, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 37, 97, 39, 0, 
	97, 89, 89, 89, 89, 89, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 33, 97, 35, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 120, 120, 120, 120, 120, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 144, 144, 144, 
	144, 144, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 150, 
	150, 150, 150, 150, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	156, 156, 156, 156, 156, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 162, 162, 162, 162, 162, 97, 
	0, 0, 97, 0, 97, 0, 97, 41, 
	97, 0, 0, 0, 0, 0, 0, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 37, 
	97, 39, 0, 97, 43, 43, 97, 87, 
	87, 87, 87, 87, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 33, 97, 35, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	117, 117, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	141, 141, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 147, 
	147, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 153, 153, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 159, 159, 97, 0, 
	97, 0, 97, 0, 97, 0, 0, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 25, 0, 0, 25, 97, 
	0, 97, 27, 27, 0, 97, 123, 123, 
	97, 29, 114, 114, 97, 0, 97, 31, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	21, 97, 0, 97, 0, 97, 23, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 25, 0, 0, 
	25, 97, 0, 97, 27, 27, 0, 97, 
	129, 129, 97, 29, 114, 114, 97, 0, 
	97, 31, 0, 97, 0, 97, 0, 97, 
	0, 97, 21, 97, 0, 97, 0, 97, 
	23, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	25, 0, 0, 25, 97, 0, 97, 27, 
	27, 0, 97, 165, 165, 97, 29, 114, 
	114, 97, 0, 97, 31, 0, 97, 0, 
	97, 0, 97, 0, 97, 21, 97, 0, 
	97, 0, 97, 23, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 25, 0, 0, 25, 97, 
	0, 97, 27, 27, 0, 97, 135, 135, 
	97, 29, 114, 114, 97, 0, 97, 31, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	21, 97, 0, 97, 0, 97, 23, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 171, 171, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 177, 177, 97, 0, 97, 0, 
	97, 0, 0, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 25, 
	0, 0, 25, 97, 0, 97, 27, 27, 
	0, 97, 126, 126, 126, 126, 126, 97, 
	29, 114, 114, 97, 0, 97, 31, 0, 
	97, 0, 97, 0, 97, 0, 97, 21, 
	97, 0, 97, 0, 97, 23, 97, 0, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 25, 0, 0, 25, 
	97, 0, 97, 27, 27, 0, 97, 132, 
	132, 132, 132, 132, 97, 29, 114, 114, 
	97, 0, 97, 31, 0, 97, 0, 97, 
	0, 97, 0, 97, 21, 97, 0, 97, 
	0, 97, 23, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 25, 0, 0, 25, 97, 0, 
	97, 27, 27, 0, 97, 168, 168, 168, 
	168, 168, 97, 29, 114, 114, 97, 0, 
	97, 31, 0, 97, 0, 97, 0, 97, 
	0, 97, 21, 97, 0, 97, 0, 97, 
	23, 97, 0, 97, 0, 97, 0, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	25, 0, 0, 25, 97, 0, 97, 27, 
	27, 0, 97, 138, 138, 138, 138, 138, 
	97, 29, 114, 114, 97, 0, 97, 31, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	21, 97, 0, 97, 0, 97, 23, 97, 
	0, 97, 0, 97, 0, 97, 0, 97, 
	0, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 174, 174, 174, 174, 174, 
	97, 0, 97, 0, 97, 0, 97, 0, 
	97, 0, 97, 0, 97, 180, 180, 180, 
	180, 180, 97, 93, 93, 93, 97, 95, 
	97, 0, 95, 0, 0, 0, 0, 97, 
	198, 198, 198, 97, 85, 0, 85, 85, 
	85, 0, 85, 0, 0, 0, 97, 0, 
	0, 0, 0, 97, 91, 91, 91, 91, 
	97, 0, 0, 0, 0, 0, 69, 0, 
	69, 69, 69, 69, 97, 0
};

static const short _hext_eof_actions[] = {
	0, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 0, 91, 0
};

static const int hext_start = 578;
static const int hext_first_final = 578;
static const int hext_error = 0;

static const int hext_en_main = 578;


#line 65 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1122 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1127 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ TK_START; }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ TK_START; }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ TK_START; }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ TK_START; }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ TK_START; }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ TK_START; }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 186 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 48:
#line 192 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 49:
#line 194 "hext-machine.rl"
	{ TK_START; }
	break;
	case 50:
#line 195 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 51:
#line 202 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 52:
#line 205 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 53:
#line 208 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 54:
#line 211 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 55:
#line 214 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 56:
#line 222 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 57:
#line 227 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 58:
#line 231 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 59:
#line 235 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 60:
#line 243 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 61:
#line 247 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 62:
#line 251 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 63:
#line 254 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 64:
#line 255 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 65:
#line 273 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 66:
#line 276 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 67:
#line 279 "hext-machine.rl"
	{ TK_START; }
	break;
	case 68:
#line 280 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 69:
#line 283 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 70:
#line 286 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 71:
#line 294 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 72:
#line 301 "hext-machine.rl"
	{ TK_START; }
	break;
	case 73:
#line 302 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 74:
#line 307 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1518 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 71:
#line 294 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 74:
#line 307 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1542 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 120 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

