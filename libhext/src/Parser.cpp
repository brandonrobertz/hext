// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexReplacePipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 50 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 68, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 2, 3, 65, 2, 4, 5, 2, 
	6, 7, 2, 8, 9, 2, 10, 11, 
	2, 16, 17, 2, 19, 35, 2, 19, 
	73, 2, 24, 35, 2, 24, 73, 2, 
	25, 35, 2, 25, 73, 2, 26, 35, 
	2, 26, 73, 2, 27, 35, 2, 27, 
	73, 2, 28, 35, 2, 28, 73, 2, 
	29, 35, 2, 29, 73, 2, 30, 35, 
	2, 30, 73, 2, 31, 35, 2, 31, 
	73, 2, 32, 35, 2, 32, 73, 2, 
	33, 35, 2, 33, 73, 2, 36, 37, 
	2, 38, 40, 2, 39, 40, 2, 40, 
	41, 2, 68, 70, 2, 69, 70, 3, 
	0, 62, 67, 3, 1, 60, 67, 3, 
	1, 61, 67, 3, 1, 63, 67, 3, 
	1, 64, 67, 3, 1, 66, 67, 3, 
	38, 40, 41, 3, 39, 40, 41, 3, 
	51, 59, 67, 3, 51, 62, 67, 3, 
	53, 59, 67, 3, 53, 62, 67, 3, 
	54, 61, 67, 3, 54, 64, 67, 3, 
	55, 61, 67, 3, 55, 64, 67, 3, 
	56, 61, 67, 3, 56, 64, 67, 3, 
	57, 61, 67, 3, 57, 64, 67, 3, 
	58, 61, 67, 3, 58, 64, 67, 4, 
	3, 65, 66, 67, 4, 40, 41, 60, 
	67, 4, 40, 41, 63, 67, 5, 38, 
	40, 41, 60, 67, 5, 38, 40, 41, 
	63, 67, 5, 39, 40, 41, 60, 67, 
	5, 39, 40, 41, 63, 67
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 90, 92, 94, 
	100, 101, 103, 105, 106, 108, 110, 118, 
	123, 131, 139, 140, 142, 144, 146, 152, 
	153, 155, 157, 158, 169, 171, 173, 178, 
	179, 181, 183, 184, 196, 197, 199, 201, 
	203, 209, 210, 212, 214, 215, 220, 221, 
	222, 223, 224, 225, 226, 228, 230, 232, 
	233, 235, 236, 237, 239, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 251, 253, 
	256, 258, 261, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 274, 276, 278, 279, 
	281, 282, 284, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 295, 297, 299, 305, 
	309, 314, 316, 318, 319, 321, 322, 324, 
	326, 327, 333, 339, 340, 341, 342, 343, 
	346, 348, 350, 352, 353, 355, 356, 358, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 370, 375, 376, 377, 378, 383, 
	402, 407, 408, 410, 412, 414, 420, 425, 
	426, 428, 430, 431, 432, 434, 436, 438, 
	444, 445, 447, 449, 450, 455, 457, 459, 
	465, 466, 468, 470, 471, 473, 475, 483, 
	488, 496, 504, 505, 507, 509, 511, 517, 
	518, 520, 522, 523, 534, 536, 538, 544, 
	549, 550, 552, 554, 555, 568, 569, 571, 
	573, 575, 581, 582, 584, 586, 587, 592, 
	593, 594, 595, 596, 597, 598, 600, 602, 
	604, 605, 607, 608, 609, 611, 613, 614, 
	615, 616, 617, 618, 619, 620, 621, 623, 
	625, 628, 630, 633, 636, 637, 638, 639, 
	640, 641, 642, 643, 644, 646, 648, 650, 
	651, 653, 654, 656, 658, 659, 660, 661, 
	662, 663, 664, 665, 666, 667, 669, 671, 
	677, 681, 686, 688, 690, 691, 693, 694, 
	696, 698, 699, 705, 711, 712, 713, 714, 
	715, 718, 720, 722, 724, 725, 727, 728, 
	730, 732, 733, 740, 741, 742, 743, 744, 
	745, 746, 747, 748, 749, 750, 751, 752, 
	753, 754, 755, 757, 760, 766, 767, 768, 
	769, 770, 771, 772, 773, 774, 775, 776, 
	777, 779, 782, 783, 784, 785, 786, 792, 
	793, 794, 795, 796, 797, 799, 800, 801, 
	802, 803, 809, 810, 811, 812, 813, 814, 
	815, 821, 822, 823, 824, 825, 827, 828, 
	829, 830, 831, 837, 838, 839, 840, 841, 
	842, 843, 849, 851, 852, 853, 854, 861, 
	862, 863, 864, 865, 866, 867, 868, 869, 
	870, 871, 872, 873, 874, 875, 876, 878, 
	881, 883, 889, 890, 891, 892, 893, 894, 
	895, 896, 897, 898, 899, 900, 902, 905, 
	906, 907, 908, 909, 911, 912, 913, 914, 
	915, 916, 918, 919, 920, 921, 922, 924, 
	925, 926, 927, 928, 929, 930, 932, 933, 
	934, 935, 936, 938, 939, 940, 941, 942, 
	944, 945, 946, 947, 948, 949, 950, 952, 
	953, 954, 955, 958, 959, 960, 961, 962, 
	963, 968, 970, 974, 976, 979, 981, 984, 
	985, 986, 987, 988, 989, 990, 991, 992, 
	993, 994, 995, 997, 998, 999, 1000, 1001, 
	1002, 1007, 1009, 1013, 1015, 1018, 1020, 1023, 
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 
	1032, 1033, 1034, 1035, 1036, 1037, 1042, 1044, 
	1048, 1050, 1053, 1055, 1058, 1059, 1060, 1061, 
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 
	1070, 1071, 1072, 1077, 1079, 1083, 1085, 1088, 
	1090, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 
	1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 
	1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 
	1118, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 
	1129, 1130, 1135, 1137, 1141, 1147, 1150, 1152, 
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 
	1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 
	1172, 1173, 1178, 1180, 1184, 1190, 1193, 1195, 
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1217, 
	1219, 1223, 1229, 1232, 1234, 1237, 1238, 1239, 
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 
	1248, 1249, 1250, 1251, 1256, 1258, 1262, 1268, 
	1271, 1273, 1276, 1277, 1278, 1279, 1280, 1281, 
	1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 
	1291, 1292, 1293, 1299, 1300, 1301, 1302, 1303, 
	1304, 1305, 1311, 1316, 1317, 1326, 1331, 1345, 
	1350
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 61, 
	94, 124, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 47, 
	61, 62, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 47, 
	62, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 92, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 34, 92, 34, 92, 32, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	32, 47, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 97, 
	102, 112, 114, 116, 112, 112, 101, 110, 
	100, 40, 34, 39, 34, 92, 34, 92, 
	41, 61, 124, 62, 92, 39, 92, 39, 
	92, 92, 105, 108, 116, 101, 114, 40, 
	47, 47, 92, 47, 92, 41, 99, 105, 
	61, 124, 41, 99, 105, 41, 99, 105, 
	92, 114, 101, 112, 101, 110, 100, 40, 
	34, 39, 34, 92, 34, 92, 41, 61, 
	124, 92, 39, 92, 39, 92, 92, 101, 
	112, 108, 97, 99, 101, 40, 47, 47, 
	92, 47, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 9, 13, 32, 34, 39, 
	9, 13, 34, 92, 34, 92, 41, 61, 
	124, 92, 39, 92, 39, 92, 92, 32, 
	44, 99, 105, 9, 13, 32, 44, 99, 
	105, 9, 13, 92, 114, 105, 109, 40, 
	61, 124, 34, 39, 34, 92, 34, 92, 
	41, 61, 124, 92, 39, 92, 39, 92, 
	92, 116, 114, 105, 112, 45, 116, 97, 
	103, 115, 36, 42, 61, 94, 124, 101, 
	120, 116, 36, 42, 61, 94, 124, 32, 
	33, 36, 42, 45, 47, 61, 62, 94, 
	95, 124, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 47, 62, 9, 13, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 32, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 34, 39, 47, 61, 62, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 47, 
	92, 47, 92, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 47, 62, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	92, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 34, 39, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 34, 92, 
	34, 92, 32, 47, 62, 63, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 32, 47, 62, 63, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 97, 102, 112, 114, 116, 
	112, 112, 101, 110, 100, 40, 34, 39, 
	34, 92, 34, 92, 41, 61, 124, 62, 
	92, 39, 92, 39, 92, 92, 105, 108, 
	116, 101, 114, 40, 47, 47, 92, 47, 
	92, 41, 99, 105, 61, 124, 41, 99, 
	105, 41, 99, 105, 92, 114, 101, 112, 
	101, 110, 100, 40, 34, 39, 34, 92, 
	34, 92, 41, 61, 124, 92, 39, 92, 
	39, 92, 92, 101, 112, 108, 97, 99, 
	101, 40, 47, 47, 92, 47, 92, 32, 
	44, 99, 105, 9, 13, 32, 44, 9, 
	13, 32, 34, 39, 9, 13, 34, 92, 
	34, 92, 41, 61, 124, 92, 39, 92, 
	39, 92, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 99, 105, 9, 13, 92, 
	114, 105, 109, 40, 61, 124, 34, 39, 
	34, 92, 34, 92, 41, 61, 124, 92, 
	39, 92, 39, 92, 92, 97, 99, 101, 
	102, 108, 110, 111, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 32, 47, 58, 62, 9, 13, 
	105, 114, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 32, 47, 58, 62, 9, 
	13, 102, 45, 116, 121, 112, 101, 32, 
	47, 58, 62, 9, 13, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 32, 
	47, 58, 62, 9, 13, 102, 45, 116, 
	121, 112, 101, 32, 47, 58, 62, 9, 
	13, 111, 116, 116, 40, 58, 97, 99, 
	101, 102, 108, 110, 111, 116, 116, 114, 
	105, 98, 117, 116, 101, 45, 99, 111, 
	117, 110, 116, 40, 48, 57, 41, 48, 
	57, 41, 58, 32, 47, 58, 62, 9, 
	13, 104, 105, 108, 100, 45, 99, 111, 
	117, 110, 116, 40, 48, 57, 41, 48, 
	57, 109, 112, 116, 121, 41, 58, 105, 
	114, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 41, 58, 102, 45, 116, 121, 
	112, 101, 41, 58, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 41, 58, 
	102, 45, 116, 121, 112, 101, 41, 58, 
	116, 104, 45, 99, 108, 111, 104, 105, 
	108, 100, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 41, 58, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 110, 108, 121, 45, 
	99, 111, 104, 105, 108, 100, 41, 58, 
	102, 45, 116, 121, 112, 101, 41, 58, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 32, 
	47, 58, 62, 9, 13, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 42, 
	65, 90, 97, 122, 62, 45, 62, 95, 
	48, 57, 65, 90, 97, 122, 42, 65, 
	90, 97, 122, 32, 45, 47, 58, 62, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 35, 60, 9, 13, 32, 35, 
	60, 9, 13, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 5, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 3, 2, 2, 3, 1, 
	2, 2, 1, 4, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 5, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	2, 1, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 3, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 2, 1, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 4, 2, 
	3, 2, 2, 1, 2, 1, 2, 2, 
	1, 4, 4, 1, 1, 1, 1, 3, 
	2, 2, 2, 1, 2, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 1, 1, 1, 5, 11, 
	3, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 5, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 3, 2, 2, 4, 3, 
	1, 2, 2, 1, 5, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 5, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 2, 1, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	2, 1, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 4, 
	2, 3, 2, 2, 1, 2, 1, 2, 
	2, 1, 4, 4, 1, 1, 1, 1, 
	3, 2, 2, 2, 1, 2, 1, 2, 
	2, 1, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 2, 1, 1, 1, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	2, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	2, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 2, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 3, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 4, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 3, 1, 6, 3, 
	3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	1, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 1, 1, 
	0, 0, 0, 0, 4, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 2, 0, 3, 2, 4, 1, 
	1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 117, 120, 123, 
	129, 131, 134, 137, 139, 142, 145, 153, 
	158, 166, 174, 176, 179, 182, 185, 191, 
	193, 196, 199, 201, 209, 212, 215, 220, 
	222, 225, 228, 230, 239, 241, 244, 247, 
	250, 256, 258, 261, 264, 266, 272, 274, 
	276, 278, 280, 282, 284, 287, 290, 293, 
	295, 298, 300, 302, 305, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 327, 330, 
	334, 337, 341, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 364, 367, 370, 372, 
	375, 377, 380, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 404, 407, 413, 
	417, 422, 425, 428, 430, 433, 435, 438, 
	441, 443, 449, 455, 457, 459, 461, 463, 
	467, 470, 473, 476, 478, 481, 483, 486, 
	489, 491, 493, 495, 497, 499, 501, 503, 
	505, 507, 509, 515, 517, 519, 521, 527, 
	543, 548, 550, 553, 556, 559, 565, 570, 
	572, 575, 578, 580, 582, 585, 588, 591, 
	597, 599, 602, 605, 607, 613, 616, 619, 
	625, 627, 630, 633, 635, 638, 641, 649, 
	654, 662, 670, 672, 675, 678, 681, 687, 
	689, 692, 695, 697, 705, 708, 711, 717, 
	722, 724, 727, 730, 732, 742, 744, 747, 
	750, 753, 759, 761, 764, 767, 769, 775, 
	777, 779, 781, 783, 785, 787, 790, 793, 
	796, 798, 801, 803, 805, 808, 811, 813, 
	815, 817, 819, 821, 823, 825, 827, 830, 
	833, 837, 840, 844, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 867, 870, 873, 
	875, 878, 880, 883, 886, 888, 890, 892, 
	894, 896, 898, 900, 902, 904, 907, 910, 
	916, 920, 925, 928, 931, 933, 936, 938, 
	941, 944, 946, 952, 958, 960, 962, 964, 
	966, 970, 973, 976, 979, 981, 984, 986, 
	989, 992, 994, 1002, 1004, 1006, 1008, 1010, 
	1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 
	1028, 1030, 1032, 1034, 1037, 1043, 1045, 1047, 
	1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 
	1065, 1067, 1070, 1072, 1074, 1076, 1078, 1084, 
	1086, 1088, 1090, 1092, 1094, 1097, 1099, 1101, 
	1103, 1105, 1111, 1113, 1115, 1117, 1119, 1121, 
	1123, 1129, 1131, 1133, 1135, 1137, 1140, 1142, 
	1144, 1146, 1148, 1154, 1156, 1158, 1160, 1162, 
	1164, 1166, 1172, 1175, 1177, 1179, 1181, 1189, 
	1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 
	1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 
	1224, 1227, 1233, 1235, 1237, 1239, 1241, 1243, 
	1245, 1247, 1249, 1251, 1253, 1255, 1257, 1260, 
	1262, 1264, 1266, 1268, 1271, 1273, 1275, 1277, 
	1279, 1281, 1284, 1286, 1288, 1290, 1292, 1295, 
	1297, 1299, 1301, 1303, 1305, 1307, 1310, 1312, 
	1314, 1316, 1318, 1321, 1323, 1325, 1327, 1329, 
	1332, 1334, 1336, 1338, 1340, 1342, 1344, 1347, 
	1349, 1351, 1353, 1357, 1359, 1361, 1363, 1365, 
	1367, 1372, 1374, 1378, 1381, 1385, 1387, 1390, 
	1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406, 
	1408, 1410, 1412, 1415, 1417, 1419, 1421, 1423, 
	1425, 1430, 1432, 1436, 1439, 1443, 1445, 1448, 
	1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 
	1466, 1468, 1470, 1472, 1474, 1476, 1481, 1483, 
	1487, 1490, 1494, 1496, 1499, 1501, 1503, 1505, 
	1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 
	1523, 1525, 1527, 1532, 1534, 1538, 1541, 1545, 
	1547, 1550, 1552, 1554, 1556, 1558, 1560, 1562, 
	1564, 1566, 1568, 1570, 1572, 1575, 1577, 1579, 
	1581, 1583, 1586, 1588, 1590, 1592, 1594, 1596, 
	1598, 1601, 1603, 1605, 1609, 1611, 1613, 1615, 
	1617, 1619, 1624, 1626, 1630, 1636, 1640, 1642, 
	1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 
	1661, 1663, 1665, 1667, 1670, 1672, 1674, 1676, 
	1678, 1680, 1685, 1687, 1691, 1697, 1701, 1703, 
	1706, 1708, 1710, 1712, 1714, 1716, 1718, 1720, 
	1722, 1724, 1726, 1728, 1730, 1732, 1734, 1739, 
	1741, 1745, 1751, 1755, 1757, 1760, 1762, 1764, 
	1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780, 
	1782, 1784, 1786, 1788, 1793, 1795, 1799, 1805, 
	1809, 1811, 1814, 1816, 1818, 1820, 1822, 1824, 
	1826, 1828, 1830, 1832, 1834, 1836, 1839, 1841, 
	1843, 1845, 1847, 1853, 1855, 1857, 1859, 1861, 
	1863, 1865, 1871, 1875, 1877, 1884, 1888, 1899, 
	1904
};

static const short _hext_trans_targs[] = {
	687, 1, 3, 682, 685, 686, 686, 0, 
	4, 5, 322, 687, 4, 0, 4, 5, 
	687, 6, 4, 175, 175, 0, 688, 0, 
	7, 161, 171, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 68, 77, 0, 18, 0, 19, 24, 
	0, 21, 23, 20, 21, 23, 20, 4, 
	22, 5, 687, 4, 0, 4, 5, 687, 
	4, 0, 23, 20, 21, 26, 25, 21, 
	26, 25, 26, 25, 28, 0, 29, 33, 
	0, 31, 32, 30, 31, 32, 30, 4, 
	22, 5, 687, 4, 0, 32, 30, 31, 
	35, 34, 31, 35, 34, 35, 34, 37, 
	41, 44, 51, 59, 0, 39, 40, 38, 
	39, 40, 38, 4, 22, 5, 687, 4, 
	0, 40, 38, 39, 43, 42, 39, 43, 
	42, 43, 42, 46, 50, 45, 46, 50, 
	45, 4, 47, 5, 687, 48, 49, 4, 
	0, 4, 5, 687, 4, 0, 4, 47, 
	5, 687, 48, 49, 4, 0, 4, 47, 
	5, 687, 48, 49, 4, 0, 50, 45, 
	52, 56, 0, 54, 55, 53, 54, 55, 
	53, 4, 22, 5, 687, 4, 0, 55, 
	53, 54, 58, 57, 54, 58, 57, 58, 
	57, 60, 64, 67, 67, 67, 67, 67, 
	0, 62, 63, 61, 62, 63, 61, 4, 
	5, 687, 4, 0, 63, 61, 62, 66, 
	65, 62, 66, 65, 66, 65, 4, 5, 
	687, 67, 4, 67, 67, 67, 0, 69, 
	0, 70, 74, 0, 72, 73, 71, 72, 
	73, 71, 4, 22, 5, 687, 4, 0, 
	73, 71, 72, 76, 75, 72, 76, 75, 
	76, 75, 78, 94, 108, 124, 148, 0, 
	79, 0, 80, 0, 81, 0, 82, 0, 
	83, 0, 84, 0, 85, 91, 0, 87, 
	90, 86, 87, 90, 86, 88, 0, 89, 
	77, 0, 59, 0, 90, 86, 87, 93, 
	92, 87, 93, 92, 93, 92, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 103, 107, 102, 103, 
	107, 102, 104, 105, 106, 0, 89, 77, 
	0, 104, 105, 106, 0, 104, 105, 106, 
	0, 107, 102, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 116, 121, 0, 118, 120, 117, 118, 
	120, 117, 119, 0, 89, 77, 0, 120, 
	117, 118, 123, 122, 118, 123, 122, 123, 
	122, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	0, 134, 147, 133, 134, 147, 133, 135, 
	136, 145, 146, 135, 0, 135, 136, 135, 
	0, 136, 137, 142, 136, 0, 139, 141, 
	138, 139, 141, 138, 140, 0, 89, 77, 
	0, 141, 138, 139, 144, 143, 139, 144, 
	143, 144, 143, 135, 136, 145, 146, 135, 
	0, 135, 136, 145, 146, 135, 0, 147, 
	133, 149, 0, 150, 0, 151, 0, 152, 
	89, 77, 0, 153, 158, 0, 155, 157, 
	154, 155, 157, 154, 156, 0, 89, 77, 
	0, 157, 154, 155, 160, 159, 155, 160, 
	159, 160, 159, 162, 0, 163, 0, 164, 
	0, 165, 0, 166, 0, 167, 0, 168, 
	0, 169, 0, 170, 0, 17, 27, 36, 
	68, 77, 0, 172, 0, 173, 0, 174, 
	0, 17, 27, 36, 68, 77, 0, 4, 
	176, 177, 187, 175, 5, 196, 687, 229, 
	175, 238, 4, 175, 175, 175, 0, 4, 
	5, 687, 4, 0, 178, 0, 179, 184, 
	0, 181, 183, 180, 181, 183, 180, 4, 
	182, 5, 687, 4, 0, 4, 5, 687, 
	4, 0, 183, 180, 181, 186, 185, 181, 
	186, 185, 186, 185, 188, 0, 189, 193, 
	0, 191, 192, 190, 191, 192, 190, 4, 
	182, 5, 687, 4, 0, 192, 190, 191, 
	195, 194, 191, 195, 194, 195, 194, 197, 
	201, 204, 211, 219, 0, 199, 200, 198, 
	199, 200, 198, 4, 182, 5, 687, 4, 
	0, 200, 198, 199, 203, 202, 199, 203, 
	202, 203, 202, 206, 210, 205, 206, 210, 
	205, 4, 207, 5, 687, 208, 209, 4, 
	0, 4, 5, 687, 4, 0, 4, 207, 
	5, 687, 208, 209, 4, 0, 4, 207, 
	5, 687, 208, 209, 4, 0, 210, 205, 
	212, 216, 0, 214, 215, 213, 214, 215, 
	213, 4, 182, 5, 687, 4, 0, 215, 
	213, 214, 218, 217, 214, 218, 217, 218, 
	217, 220, 225, 228, 228, 228, 228, 228, 
	0, 222, 224, 221, 222, 224, 221, 4, 
	5, 687, 223, 4, 0, 4, 5, 687, 
	4, 0, 224, 221, 222, 227, 226, 222, 
	227, 226, 227, 226, 4, 5, 687, 223, 
	228, 4, 228, 228, 228, 0, 230, 0, 
	231, 235, 0, 233, 234, 232, 233, 234, 
	232, 4, 182, 5, 687, 4, 0, 234, 
	232, 233, 237, 236, 233, 237, 236, 237, 
	236, 239, 255, 269, 285, 309, 0, 240, 
	0, 241, 0, 242, 0, 243, 0, 244, 
	0, 245, 0, 246, 252, 0, 248, 251, 
	247, 248, 251, 247, 249, 0, 250, 238, 
	0, 219, 0, 251, 247, 248, 254, 253, 
	248, 254, 253, 254, 253, 256, 0, 257, 
	0, 258, 0, 259, 0, 260, 0, 261, 
	0, 262, 0, 264, 268, 263, 264, 268, 
	263, 265, 266, 267, 0, 250, 238, 0, 
	265, 266, 267, 0, 265, 266, 267, 0, 
	268, 263, 270, 0, 271, 0, 272, 0, 
	273, 0, 274, 0, 275, 0, 276, 0, 
	277, 282, 0, 279, 281, 278, 279, 281, 
	278, 280, 0, 250, 238, 0, 281, 278, 
	279, 284, 283, 279, 284, 283, 284, 283, 
	286, 0, 287, 0, 288, 0, 289, 0, 
	290, 0, 291, 0, 292, 0, 293, 0, 
	295, 308, 294, 295, 308, 294, 296, 297, 
	306, 307, 296, 0, 296, 297, 296, 0, 
	297, 298, 303, 297, 0, 300, 302, 299, 
	300, 302, 299, 301, 0, 250, 238, 0, 
	302, 299, 300, 305, 304, 300, 305, 304, 
	305, 304, 296, 297, 306, 307, 296, 0, 
	296, 297, 306, 307, 296, 0, 308, 294, 
	310, 0, 311, 0, 312, 0, 313, 250, 
	238, 0, 314, 319, 0, 316, 318, 315, 
	316, 318, 315, 317, 0, 250, 238, 0, 
	318, 315, 316, 321, 320, 316, 321, 320, 
	321, 320, 323, 341, 354, 359, 377, 394, 
	665, 0, 324, 0, 325, 0, 326, 0, 
	327, 0, 328, 0, 329, 0, 330, 0, 
	331, 0, 332, 0, 333, 0, 334, 0, 
	335, 0, 336, 0, 337, 0, 338, 0, 
	339, 0, 340, 339, 0, 4, 5, 322, 
	687, 4, 0, 342, 0, 343, 0, 344, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 340, 353, 0, 355, 0, 
	356, 0, 357, 0, 358, 0, 4, 5, 
	322, 687, 4, 0, 360, 0, 361, 0, 
	362, 0, 363, 0, 364, 0, 365, 370, 
	0, 366, 0, 367, 0, 368, 0, 369, 
	0, 4, 5, 322, 687, 4, 0, 371, 
	0, 372, 0, 373, 0, 374, 0, 375, 
	0, 376, 0, 4, 5, 322, 687, 4, 
	0, 378, 0, 379, 0, 380, 0, 381, 
	0, 382, 387, 0, 383, 0, 384, 0, 
	385, 0, 386, 0, 4, 5, 322, 687, 
	4, 0, 388, 0, 389, 0, 390, 0, 
	391, 0, 392, 0, 393, 0, 4, 5, 
	322, 687, 4, 0, 395, 577, 0, 396, 
	0, 397, 0, 398, 0, 399, 418, 431, 
	436, 454, 471, 560, 0, 400, 0, 401, 
	0, 402, 0, 403, 0, 404, 0, 405, 
	0, 406, 0, 407, 0, 408, 0, 409, 
	0, 410, 0, 411, 0, 412, 0, 413, 
	0, 414, 0, 415, 0, 416, 415, 0, 
	417, 398, 0, 4, 5, 322, 687, 4, 
	0, 419, 0, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 0, 429, 0, 430, 
	0, 416, 430, 0, 432, 0, 433, 0, 
	434, 0, 435, 0, 417, 398, 0, 437, 
	0, 438, 0, 439, 0, 440, 0, 441, 
	0, 442, 447, 0, 443, 0, 444, 0, 
	445, 0, 446, 0, 417, 398, 0, 448, 
	0, 449, 0, 450, 0, 451, 0, 452, 
	0, 453, 0, 417, 398, 0, 455, 0, 
	456, 0, 457, 0, 458, 0, 459, 464, 
	0, 460, 0, 461, 0, 462, 0, 463, 
	0, 417, 398, 0, 465, 0, 466, 0, 
	467, 0, 468, 0, 469, 0, 470, 0, 
	417, 398, 0, 472, 0, 473, 0, 474, 
	0, 475, 494, 539, 0, 476, 0, 477, 
	0, 478, 0, 479, 0, 480, 0, 481, 
	487, 491, 482, 0, 482, 0, 483, 484, 
	482, 0, 417, 398, 0, 483, 485, 485, 
	0, 486, 0, 483, 486, 0, 488, 0, 
	489, 0, 490, 0, 483, 0, 492, 0, 
	493, 0, 483, 0, 495, 0, 496, 0, 
	497, 0, 498, 0, 499, 518, 0, 500, 
	0, 501, 0, 502, 0, 503, 0, 504, 
	0, 505, 511, 515, 506, 0, 506, 0, 
	507, 508, 506, 0, 417, 398, 0, 507, 
	509, 509, 0, 510, 0, 507, 510, 0, 
	512, 0, 513, 0, 514, 0, 507, 0, 
	516, 0, 517, 0, 507, 0, 519, 0, 
	520, 0, 521, 0, 522, 0, 523, 0, 
	524, 0, 525, 0, 526, 532, 536, 527, 
	0, 527, 0, 528, 529, 527, 0, 417, 
	398, 0, 528, 530, 530, 0, 531, 0, 
	528, 531, 0, 533, 0, 534, 0, 535, 
	0, 528, 0, 537, 0, 538, 0, 528, 
	0, 540, 0, 541, 0, 542, 0, 543, 
	0, 544, 0, 545, 0, 546, 0, 547, 
	553, 557, 548, 0, 548, 0, 549, 550, 
	548, 0, 417, 398, 0, 549, 551, 551, 
	0, 552, 0, 549, 552, 0, 554, 0, 
	555, 0, 556, 0, 549, 0, 558, 0, 
	559, 0, 549, 0, 561, 0, 562, 0, 
	563, 0, 564, 0, 565, 570, 0, 566, 
	0, 567, 0, 568, 0, 569, 0, 417, 
	398, 0, 571, 0, 572, 0, 573, 0, 
	574, 0, 575, 0, 576, 0, 417, 398, 
	0, 578, 0, 579, 0, 580, 599, 644, 
	0, 581, 0, 582, 0, 583, 0, 584, 
	0, 585, 0, 586, 592, 596, 587, 0, 
	587, 0, 588, 589, 587, 0, 4, 5, 
	322, 687, 4, 0, 588, 590, 590, 0, 
	591, 0, 588, 591, 0, 593, 0, 594, 
	0, 595, 0, 588, 0, 597, 0, 598, 
	0, 588, 0, 600, 0, 601, 0, 602, 
	0, 603, 0, 604, 623, 0, 605, 0, 
	606, 0, 607, 0, 608, 0, 609, 0, 
	610, 616, 620, 611, 0, 611, 0, 612, 
	613, 611, 0, 4, 5, 322, 687, 4, 
	0, 612, 614, 614, 0, 615, 0, 612, 
	615, 0, 617, 0, 618, 0, 619, 0, 
	612, 0, 621, 0, 622, 0, 612, 0, 
	624, 0, 625, 0, 626, 0, 627, 0, 
	628, 0, 629, 0, 630, 0, 631, 637, 
	641, 632, 0, 632, 0, 633, 634, 632, 
	0, 4, 5, 322, 687, 4, 0, 633, 
	635, 635, 0, 636, 0, 633, 636, 0, 
	638, 0, 639, 0, 640, 0, 633, 0, 
	642, 0, 643, 0, 633, 0, 645, 0, 
	646, 0, 647, 0, 648, 0, 649, 0, 
	650, 0, 651, 0, 652, 658, 662, 653, 
	0, 653, 0, 654, 655, 653, 0, 4, 
	5, 322, 687, 4, 0, 654, 656, 656, 
	0, 657, 0, 654, 657, 0, 659, 0, 
	660, 0, 661, 0, 654, 0, 663, 0, 
	664, 0, 654, 0, 666, 0, 667, 0, 
	668, 0, 669, 0, 670, 675, 0, 671, 
	0, 672, 0, 673, 0, 674, 0, 4, 
	5, 322, 687, 4, 0, 676, 0, 677, 
	0, 678, 0, 679, 0, 680, 0, 681, 
	0, 4, 5, 322, 687, 4, 0, 683, 
	684, 684, 0, 687, 0, 684, 687, 684, 
	684, 684, 684, 0, 3, 686, 686, 0, 
	4, 686, 5, 322, 687, 686, 4, 686, 
	686, 686, 0, 687, 1, 2, 687, 0, 
	687, 1, 2, 687, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 201, 0, 89, 201, 201, 103, 
	91, 91, 91, 91, 91, 103, 0, 0, 
	0, 0, 0, 1, 1, 103, 0, 103, 
	0, 0, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 57, 57, 
	57, 57, 57, 103, 0, 103, 0, 0, 
	103, 114, 13, 13, 15, 0, 0, 287, 
	87, 287, 287, 287, 103, 215, 215, 215, 
	215, 103, 0, 0, 117, 17, 17, 19, 
	0, 0, 0, 0, 0, 103, 0, 0, 
	103, 114, 13, 13, 15, 0, 0, 279, 
	85, 279, 279, 279, 103, 0, 0, 117, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 103, 114, 13, 13, 
	15, 0, 0, 255, 79, 255, 255, 255, 
	103, 0, 0, 117, 17, 17, 19, 0, 
	0, 0, 0, 189, 45, 45, 47, 0, 
	0, 300, 198, 300, 300, 0, 0, 300, 
	103, 211, 211, 211, 211, 103, 322, 235, 
	322, 322, 51, 51, 322, 103, 310, 231, 
	310, 310, 49, 49, 310, 103, 0, 0, 
	0, 0, 103, 108, 5, 5, 7, 0, 
	0, 263, 81, 263, 263, 263, 103, 0, 
	0, 111, 9, 9, 11, 0, 0, 0, 
	0, 0, 0, 75, 75, 75, 75, 75, 
	103, 114, 13, 13, 15, 0, 0, 239, 
	239, 239, 239, 103, 0, 0, 117, 17, 
	17, 19, 0, 0, 0, 0, 247, 247, 
	247, 0, 247, 0, 0, 0, 103, 0, 
	103, 0, 0, 103, 114, 13, 13, 15, 
	0, 0, 271, 83, 271, 271, 271, 103, 
	0, 0, 117, 17, 17, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 0, 103, 114, 
	13, 13, 15, 0, 0, 0, 103, 67, 
	67, 103, 0, 103, 0, 0, 117, 17, 
	17, 19, 0, 0, 0, 0, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 189, 45, 45, 47, 
	0, 0, 53, 0, 0, 103, 69, 69, 
	103, 195, 51, 51, 103, 192, 49, 49, 
	103, 0, 0, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 0, 103, 114, 13, 13, 15, 
	0, 0, 0, 103, 65, 65, 103, 0, 
	0, 117, 17, 17, 19, 0, 0, 0, 
	0, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 189, 45, 45, 47, 0, 0, 53, 
	53, 0, 0, 53, 103, 0, 0, 0, 
	103, 0, 0, 0, 0, 103, 108, 5, 
	5, 7, 0, 0, 0, 103, 71, 71, 
	103, 0, 0, 111, 9, 9, 11, 0, 
	0, 0, 0, 195, 195, 51, 51, 195, 
	103, 192, 192, 49, 49, 192, 103, 0, 
	0, 0, 103, 0, 103, 0, 103, 0, 
	61, 61, 103, 0, 0, 103, 114, 13, 
	13, 15, 0, 0, 0, 103, 63, 63, 
	103, 0, 0, 117, 17, 17, 19, 0, 
	0, 0, 0, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 59, 59, 59, 
	59, 59, 103, 0, 103, 0, 103, 0, 
	103, 55, 55, 55, 55, 55, 103, 295, 
	105, 3, 3, 0, 295, 3, 295, 3, 
	0, 3, 295, 0, 0, 0, 103, 227, 
	227, 227, 227, 103, 0, 103, 0, 0, 
	103, 114, 13, 13, 15, 0, 0, 291, 
	87, 291, 291, 291, 103, 223, 223, 223, 
	223, 103, 0, 0, 117, 17, 17, 19, 
	0, 0, 0, 0, 0, 103, 0, 0, 
	103, 114, 13, 13, 15, 0, 0, 283, 
	85, 283, 283, 283, 103, 0, 0, 117, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 103, 114, 13, 13, 
	15, 0, 0, 259, 79, 259, 259, 259, 
	103, 0, 0, 117, 17, 17, 19, 0, 
	0, 0, 0, 189, 45, 45, 47, 0, 
	0, 305, 198, 305, 305, 0, 0, 305, 
	103, 219, 219, 219, 219, 103, 328, 235, 
	328, 328, 51, 51, 328, 103, 316, 231, 
	316, 316, 49, 49, 316, 103, 0, 0, 
	0, 0, 103, 108, 5, 5, 7, 0, 
	0, 267, 81, 267, 267, 267, 103, 0, 
	0, 111, 9, 9, 11, 0, 0, 0, 
	0, 0, 0, 75, 75, 75, 75, 75, 
	103, 114, 13, 13, 15, 0, 0, 243, 
	243, 243, 73, 243, 103, 207, 207, 207, 
	207, 103, 0, 0, 117, 17, 17, 19, 
	0, 0, 0, 0, 251, 251, 251, 77, 
	0, 251, 0, 0, 0, 103, 0, 103, 
	0, 0, 103, 114, 13, 13, 15, 0, 
	0, 275, 83, 275, 275, 275, 103, 0, 
	0, 117, 17, 17, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 0, 103, 114, 13, 
	13, 15, 0, 0, 0, 103, 67, 67, 
	103, 0, 103, 0, 0, 117, 17, 17, 
	19, 0, 0, 0, 0, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 189, 45, 45, 47, 0, 
	0, 53, 0, 0, 103, 69, 69, 103, 
	195, 51, 51, 103, 192, 49, 49, 103, 
	0, 0, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 0, 103, 114, 13, 13, 15, 0, 
	0, 0, 103, 65, 65, 103, 0, 0, 
	117, 17, 17, 19, 0, 0, 0, 0, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	189, 45, 45, 47, 0, 0, 53, 53, 
	0, 0, 53, 103, 0, 0, 0, 103, 
	0, 0, 0, 0, 103, 108, 5, 5, 
	7, 0, 0, 0, 103, 71, 71, 103, 
	0, 0, 111, 9, 9, 11, 0, 0, 
	0, 0, 195, 195, 51, 51, 195, 103, 
	192, 192, 49, 49, 192, 103, 0, 0, 
	0, 103, 0, 103, 0, 103, 0, 61, 
	61, 103, 0, 0, 103, 114, 13, 13, 
	15, 0, 0, 0, 103, 63, 63, 103, 
	0, 0, 117, 17, 17, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	37, 103, 39, 0, 103, 95, 95, 95, 
	95, 95, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 33, 103, 35, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 126, 126, 
	126, 126, 126, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 150, 150, 150, 150, 150, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 156, 156, 156, 156, 156, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 162, 162, 162, 162, 
	162, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 168, 168, 
	168, 168, 168, 103, 0, 0, 103, 0, 
	103, 0, 103, 41, 103, 0, 0, 0, 
	0, 0, 0, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 37, 103, 39, 0, 103, 
	43, 43, 103, 93, 93, 93, 93, 93, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 33, 
	103, 35, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 123, 123, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 147, 147, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 153, 153, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 159, 159, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	165, 165, 103, 0, 103, 0, 103, 0, 
	103, 0, 0, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 25, 
	0, 0, 25, 103, 0, 103, 27, 27, 
	0, 103, 129, 129, 103, 29, 120, 120, 
	103, 0, 103, 31, 0, 103, 0, 103, 
	0, 103, 0, 103, 21, 103, 0, 103, 
	0, 103, 23, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 25, 0, 0, 25, 103, 0, 103, 
	27, 27, 0, 103, 135, 135, 103, 29, 
	120, 120, 103, 0, 103, 31, 0, 103, 
	0, 103, 0, 103, 0, 103, 21, 103, 
	0, 103, 0, 103, 23, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 25, 0, 0, 25, 
	103, 0, 103, 27, 27, 0, 103, 171, 
	171, 103, 29, 120, 120, 103, 0, 103, 
	31, 0, 103, 0, 103, 0, 103, 0, 
	103, 21, 103, 0, 103, 0, 103, 23, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 25, 
	0, 0, 25, 103, 0, 103, 27, 27, 
	0, 103, 141, 141, 103, 29, 120, 120, 
	103, 0, 103, 31, 0, 103, 0, 103, 
	0, 103, 0, 103, 21, 103, 0, 103, 
	0, 103, 23, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 177, 
	177, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 183, 183, 
	103, 0, 103, 0, 103, 0, 0, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 25, 0, 0, 25, 103, 
	0, 103, 27, 27, 0, 103, 132, 132, 
	132, 132, 132, 103, 29, 120, 120, 103, 
	0, 103, 31, 0, 103, 0, 103, 0, 
	103, 0, 103, 21, 103, 0, 103, 0, 
	103, 23, 103, 0, 103, 0, 103, 0, 
	103, 0, 103, 0, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	25, 0, 0, 25, 103, 0, 103, 27, 
	27, 0, 103, 138, 138, 138, 138, 138, 
	103, 29, 120, 120, 103, 0, 103, 31, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	21, 103, 0, 103, 0, 103, 23, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 25, 0, 
	0, 25, 103, 0, 103, 27, 27, 0, 
	103, 174, 174, 174, 174, 174, 103, 29, 
	120, 120, 103, 0, 103, 31, 0, 103, 
	0, 103, 0, 103, 0, 103, 21, 103, 
	0, 103, 0, 103, 23, 103, 0, 103, 
	0, 103, 0, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 25, 0, 0, 25, 
	103, 0, 103, 27, 27, 0, 103, 144, 
	144, 144, 144, 144, 103, 29, 120, 120, 
	103, 0, 103, 31, 0, 103, 0, 103, 
	0, 103, 0, 103, 21, 103, 0, 103, 
	0, 103, 23, 103, 0, 103, 0, 103, 
	0, 103, 0, 103, 0, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 180, 
	180, 180, 180, 180, 103, 0, 103, 0, 
	103, 0, 103, 0, 103, 0, 103, 0, 
	103, 186, 186, 186, 186, 186, 103, 99, 
	99, 99, 103, 101, 103, 0, 101, 0, 
	0, 0, 0, 103, 204, 204, 204, 103, 
	91, 0, 91, 91, 91, 0, 91, 0, 
	0, 0, 103, 0, 0, 0, 0, 103, 
	97, 97, 97, 97, 103, 0
};

static const short _hext_eof_actions[] = {
	0, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 0, 
	97
};

static const int hext_start = 687;
static const int hext_first_final = 687;
static const int hext_error = 0;

static const int hext_en_main = 687;


#line 50 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Convenience lambda to store the start of a token. Used within the hext
  // machine definition.
  auto tk_start = [this, &tok_begin, &tok_end](){
    tok_begin = this->p;
    tok_end = nullptr;
  };

  // Convenience lambda to complete a token. Used within the hext
  // machine definition.
  auto tk_stop = [this, &tok, &tok_begin, &tok_end](){
    assert(tok_begin);
    assert(this->p);
    tok_end = this->p;
    tok = std::string(
      tok_begin,
      static_cast<std::string::size_type>(std::distance(tok_begin, tok_end))
    );
  };

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1279 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1284 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ tk_stop(); pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ tk_stop(); pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ tk_stop(); pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 182 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 48:
#line 186 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 49:
#line 188 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 50:
#line 191 "hext-machine.rl"
	{ pv.add_pipe<RegexReplacePipe>(*pv.regex, pv.literal_value); }
	break;
	case 51:
#line 197 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 52:
#line 199 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 53:
#line 200 "hext-machine.rl"
	{ tk_stop(); pv.cap_var = tok; }
	break;
	case 54:
#line 207 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 55:
#line 210 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 56:
#line 213 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 57:
#line 216 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 58:
#line 219 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 59:
#line 227 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 60:
#line 232 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 61:
#line 236 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 62:
#line 240 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 63:
#line 248 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 64:
#line 252 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 65:
#line 256 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 66:
#line 259 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 67:
#line 260 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 68:
#line 278 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 69:
#line 281 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 70:
#line 284 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 71:
#line 285 "hext-machine.rl"
	{ tk_stop(); set_open_tag_or_throw(tok); }
	break;
	case 72:
#line 288 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 73:
#line 291 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 74:
#line 299 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 75:
#line 306 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 76:
#line 307 "hext-machine.rl"
	{ tk_stop();
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 77:
#line 312 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1687 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 74:
#line 299 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 77:
#line 312 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1711 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 122 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

