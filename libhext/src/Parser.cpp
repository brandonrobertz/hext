// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 64 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 42, 1, 
	43, 1, 44, 1, 45, 1, 46, 1, 
	47, 1, 48, 1, 49, 1, 50, 1, 
	51, 1, 52, 1, 53, 1, 63, 1, 
	66, 1, 67, 1, 68, 1, 69, 1, 
	70, 1, 71, 1, 72, 2, 3, 60, 
	2, 4, 5, 2, 6, 7, 2, 8, 
	9, 2, 10, 11, 2, 16, 17, 2, 
	19, 35, 2, 19, 68, 2, 24, 35, 
	2, 24, 68, 2, 25, 35, 2, 25, 
	68, 2, 26, 35, 2, 26, 68, 2, 
	27, 35, 2, 27, 68, 2, 28, 35, 
	2, 28, 68, 2, 29, 35, 2, 29, 
	68, 2, 30, 35, 2, 30, 68, 2, 
	31, 35, 2, 31, 68, 2, 32, 35, 
	2, 32, 68, 2, 33, 35, 2, 33, 
	68, 2, 36, 37, 2, 40, 41, 2, 
	63, 65, 2, 64, 65, 3, 0, 57, 
	62, 3, 1, 55, 62, 3, 1, 56, 
	62, 3, 1, 58, 62, 3, 1, 59, 
	62, 3, 1, 61, 62, 3, 38, 40, 
	41, 3, 39, 40, 41, 3, 46, 54, 
	62, 3, 46, 57, 62, 3, 48, 54, 
	62, 3, 48, 57, 62, 3, 49, 56, 
	62, 3, 49, 59, 62, 3, 50, 56, 
	62, 3, 50, 59, 62, 3, 51, 56, 
	62, 3, 51, 59, 62, 3, 52, 56, 
	62, 3, 52, 59, 62, 3, 53, 56, 
	62, 3, 53, 59, 62, 4, 3, 60, 
	61, 62, 4, 40, 41, 55, 62, 4, 
	40, 41, 58, 62, 5, 38, 40, 41, 
	55, 62, 5, 38, 40, 41, 58, 62, 
	5, 39, 40, 41, 55, 62, 5, 39, 
	40, 41, 58, 62
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 43, 44, 46, 48, 50, 56, 61, 
	62, 64, 66, 67, 68, 70, 72, 74, 
	80, 81, 83, 85, 86, 87, 98, 100, 
	102, 107, 108, 110, 112, 113, 118, 129, 
	133, 135, 137, 143, 144, 146, 148, 149, 
	151, 153, 161, 166, 174, 182, 183, 185, 
	187, 189, 195, 196, 198, 200, 201, 202, 
	204, 206, 208, 214, 215, 217, 219, 220, 
	221, 222, 223, 224, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 241, 242, 
	243, 244, 250, 269, 274, 275, 277, 279, 
	281, 287, 292, 293, 295, 297, 298, 299, 
	301, 303, 305, 311, 312, 314, 316, 317, 
	336, 340, 342, 344, 350, 351, 353, 355, 
	356, 358, 360, 368, 373, 381, 389, 390, 
	392, 394, 396, 402, 403, 405, 407, 408, 
	410, 412, 418, 423, 424, 426, 428, 429, 
	435, 447, 448, 450, 452, 454, 460, 461, 
	463, 465, 466, 467, 468, 469, 470, 472, 
	473, 484, 491, 492, 493, 494, 495, 496, 
	497, 498, 499, 500, 501, 502, 503, 504, 
	505, 506, 508, 511, 517, 518, 519, 520, 
	521, 522, 523, 524, 525, 526, 527, 528, 
	530, 533, 534, 535, 536, 537, 543, 544, 
	545, 546, 547, 548, 550, 551, 552, 553, 
	554, 560, 561, 562, 563, 564, 565, 566, 
	572, 573, 574, 575, 576, 578, 579, 580, 
	581, 582, 588, 589, 590, 591, 592, 593, 
	594, 600, 602, 603, 604, 605, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 626, 627, 629, 632, 
	634, 640, 641, 642, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 653, 656, 657, 
	658, 659, 660, 662, 663, 664, 665, 666, 
	667, 669, 670, 671, 672, 673, 675, 676, 
	677, 678, 679, 680, 681, 683, 684, 685, 
	686, 687, 689, 690, 691, 692, 693, 695, 
	696, 697, 698, 699, 700, 701, 703, 704, 
	705, 706, 709, 710, 711, 712, 713, 714, 
	719, 721, 725, 727, 730, 732, 735, 736, 
	737, 738, 739, 740, 741, 742, 743, 744, 
	745, 746, 748, 749, 750, 751, 752, 753, 
	758, 760, 764, 766, 769, 771, 774, 775, 
	776, 777, 778, 779, 780, 781, 782, 783, 
	784, 785, 786, 787, 788, 793, 795, 799, 
	801, 804, 806, 809, 810, 811, 812, 813, 
	814, 815, 816, 817, 818, 819, 820, 821, 
	822, 823, 828, 830, 834, 836, 839, 841, 
	844, 845, 846, 847, 848, 849, 850, 851, 
	852, 853, 854, 855, 857, 858, 859, 860, 
	861, 863, 864, 865, 866, 867, 868, 869, 
	871, 872, 873, 876, 877, 878, 879, 880, 
	881, 886, 888, 892, 898, 901, 903, 906, 
	907, 908, 909, 910, 911, 912, 913, 914, 
	915, 916, 917, 919, 920, 921, 922, 923, 
	924, 929, 931, 935, 941, 944, 946, 949, 
	950, 951, 952, 953, 954, 955, 956, 957, 
	958, 959, 960, 961, 962, 963, 968, 970, 
	974, 980, 983, 985, 988, 989, 990, 991, 
	992, 993, 994, 995, 996, 997, 998, 999, 
	1000, 1001, 1002, 1007, 1009, 1013, 1019, 1022, 
	1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 
	1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 
	1043, 1044, 1050, 1051, 1052, 1053, 1054, 1055, 
	1056, 1062, 1067, 1068, 1077, 1082, 1096, 1101, 
	1106
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 45, 
	61, 94, 124, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 62, 34, 
	39, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 92, 34, 92, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 48, 57, 65, 90, 97, 
	122, 34, 39, 47, 61, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 116, 114, 105, 109, 
	45, 124, 116, 114, 105, 112, 45, 116, 
	97, 103, 115, 36, 42, 45, 61, 94, 
	124, 101, 120, 116, 36, 42, 45, 61, 
	94, 124, 32, 33, 36, 42, 45, 47, 
	61, 62, 94, 95, 124, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	9, 13, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 33, 36, 
	42, 45, 47, 61, 62, 94, 95, 124, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	34, 39, 47, 61, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 47, 92, 47, 92, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 47, 62, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	34, 92, 34, 92, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	63, 9, 13, 32, 47, 62, 63, 9, 
	13, 48, 57, 65, 90, 97, 122, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 116, 114, 105, 109, 45, 124, 
	62, 34, 39, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 114, 105, 98, 
	117, 116, 101, 45, 99, 111, 117, 110, 
	116, 40, 48, 57, 41, 48, 57, 32, 
	47, 58, 62, 9, 13, 104, 105, 108, 
	100, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 109, 112, 116, 
	121, 32, 47, 58, 62, 9, 13, 105, 
	114, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 32, 47, 
	58, 62, 9, 13, 102, 45, 116, 121, 
	112, 101, 32, 47, 58, 62, 9, 13, 
	111, 116, 116, 40, 58, 97, 99, 101, 
	102, 108, 110, 111, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	41, 58, 32, 47, 58, 62, 9, 13, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	109, 112, 116, 121, 41, 58, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 97, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 41, 
	58, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 104, 
	45, 99, 108, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 32, 
	47, 58, 62, 9, 13, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 110, 108, 121, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 42, 65, 
	90, 97, 122, 62, 45, 62, 95, 48, 
	57, 65, 90, 97, 122, 42, 65, 90, 
	97, 122, 32, 45, 47, 58, 62, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 35, 60, 9, 13, 32, 35, 60, 
	9, 13, 32, 34, 35, 39, 60, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 3, 2, 2, 
	3, 1, 2, 2, 1, 3, 3, 4, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 6, 3, 6, 6, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 1, 1, 
	1, 6, 11, 3, 1, 2, 2, 2, 
	4, 3, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 11, 
	4, 2, 2, 4, 1, 2, 2, 1, 
	2, 2, 6, 3, 6, 6, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 4, 3, 1, 2, 2, 1, 4, 
	4, 1, 2, 2, 2, 4, 1, 2, 
	2, 1, 1, 1, 1, 1, 2, 1, 
	3, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 2, 1, 1, 1, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 2, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 3, 
	0, 2, 2, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 3, 
	0, 2, 2, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 3, 1, 6, 3, 3, 
	6
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 4, 0, 0, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 1, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 4, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 1, 
	4, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 2, 0, 3, 2, 4, 1, 1, 
	5
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 53, 55, 58, 61, 64, 70, 75, 
	77, 80, 83, 85, 87, 90, 93, 96, 
	102, 104, 107, 110, 112, 114, 122, 125, 
	128, 133, 135, 138, 141, 143, 148, 156, 
	161, 164, 167, 173, 175, 178, 181, 183, 
	186, 189, 197, 202, 210, 218, 220, 223, 
	226, 229, 235, 237, 240, 243, 245, 247, 
	250, 253, 256, 262, 264, 267, 270, 272, 
	274, 276, 278, 280, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 301, 308, 310, 
	312, 314, 321, 337, 342, 344, 347, 350, 
	353, 359, 364, 366, 369, 372, 374, 376, 
	379, 382, 385, 391, 393, 396, 399, 401, 
	417, 422, 425, 428, 434, 436, 439, 442, 
	444, 447, 450, 458, 463, 471, 479, 481, 
	484, 487, 490, 496, 498, 501, 504, 506, 
	509, 512, 518, 523, 525, 528, 531, 533, 
	539, 548, 550, 553, 556, 559, 565, 567, 
	570, 573, 575, 577, 579, 581, 583, 586, 
	588, 596, 604, 606, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 626, 628, 630, 
	632, 634, 636, 639, 645, 647, 649, 651, 
	653, 655, 657, 659, 661, 663, 665, 667, 
	669, 672, 674, 676, 678, 680, 686, 688, 
	690, 692, 694, 696, 699, 701, 703, 705, 
	707, 713, 715, 717, 719, 721, 723, 725, 
	731, 733, 735, 737, 739, 742, 744, 746, 
	748, 750, 756, 758, 760, 762, 764, 766, 
	768, 774, 777, 779, 781, 783, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 826, 
	829, 835, 837, 839, 841, 843, 845, 847, 
	849, 851, 853, 855, 857, 859, 862, 864, 
	866, 868, 870, 873, 875, 877, 879, 881, 
	883, 886, 888, 890, 892, 894, 897, 899, 
	901, 903, 905, 907, 909, 912, 914, 916, 
	918, 920, 923, 925, 927, 929, 931, 934, 
	936, 938, 940, 942, 944, 946, 949, 951, 
	953, 955, 959, 961, 963, 965, 967, 969, 
	974, 976, 980, 983, 987, 989, 992, 994, 
	996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 
	1012, 1014, 1017, 1019, 1021, 1023, 1025, 1027, 
	1032, 1034, 1038, 1041, 1045, 1047, 1050, 1052, 
	1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 
	1070, 1072, 1074, 1076, 1078, 1083, 1085, 1089, 
	1092, 1096, 1098, 1101, 1103, 1105, 1107, 1109, 
	1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 
	1127, 1129, 1134, 1136, 1140, 1143, 1147, 1149, 
	1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 
	1168, 1170, 1172, 1174, 1177, 1179, 1181, 1183, 
	1185, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 
	1203, 1205, 1207, 1211, 1213, 1215, 1217, 1219, 
	1221, 1226, 1228, 1232, 1238, 1242, 1244, 1247, 
	1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 
	1265, 1267, 1269, 1272, 1274, 1276, 1278, 1280, 
	1282, 1287, 1289, 1293, 1299, 1303, 1305, 1308, 
	1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 
	1326, 1328, 1330, 1332, 1334, 1336, 1341, 1343, 
	1347, 1353, 1357, 1359, 1362, 1364, 1366, 1368, 
	1370, 1372, 1374, 1376, 1378, 1380, 1382, 1384, 
	1386, 1388, 1390, 1395, 1397, 1401, 1407, 1411, 
	1413, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 
	1430, 1432, 1434, 1436, 1438, 1441, 1443, 1445, 
	1447, 1449, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1473, 1477, 1479, 1486, 1490, 1501, 1506, 
	1511
};

static const short _hext_trans_targs[] = {
	534, 1, 3, 529, 532, 533, 533, 0, 
	4, 5, 169, 534, 4, 0, 4, 5, 
	534, 6, 4, 98, 98, 0, 535, 0, 
	7, 84, 94, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 47, 70, 79, 0, 18, 0, 19, 
	24, 0, 21, 23, 20, 21, 23, 20, 
	4, 22, 5, 534, 4, 0, 4, 5, 
	534, 4, 0, 23, 20, 21, 26, 25, 
	21, 26, 25, 26, 25, 28, 0, 29, 
	33, 0, 31, 32, 30, 31, 32, 30, 
	4, 22, 5, 534, 4, 0, 32, 30, 
	31, 35, 34, 31, 35, 34, 35, 34, 
	37, 0, 38, 42, 45, 45, 46, 46, 
	46, 0, 40, 41, 39, 40, 41, 39, 
	4, 5, 534, 4, 0, 41, 39, 40, 
	44, 43, 40, 44, 43, 44, 43, 4, 
	5, 534, 4, 0, 4, 5, 534, 4, 
	46, 46, 46, 0, 48, 52, 55, 62, 
	0, 50, 51, 49, 50, 51, 49, 4, 
	22, 5, 534, 4, 0, 51, 49, 50, 
	54, 53, 50, 54, 53, 54, 53, 57, 
	61, 56, 57, 61, 56, 4, 58, 5, 
	534, 59, 60, 4, 0, 4, 5, 534, 
	4, 0, 4, 58, 5, 534, 59, 60, 
	4, 0, 4, 58, 5, 534, 59, 60, 
	4, 0, 61, 56, 63, 67, 0, 65, 
	66, 64, 65, 66, 64, 4, 22, 5, 
	534, 4, 0, 66, 64, 65, 69, 68, 
	65, 69, 68, 69, 68, 71, 0, 72, 
	76, 0, 74, 75, 73, 74, 75, 73, 
	4, 22, 5, 534, 4, 0, 75, 73, 
	74, 78, 77, 74, 78, 77, 78, 77, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	36, 79, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 17, 27, 36, 
	47, 70, 79, 0, 95, 0, 96, 0, 
	97, 0, 17, 27, 36, 47, 70, 79, 
	0, 4, 99, 100, 110, 119, 5, 120, 
	534, 153, 98, 162, 4, 98, 98, 98, 
	0, 4, 5, 534, 4, 0, 101, 0, 
	102, 107, 0, 104, 106, 103, 104, 106, 
	103, 4, 105, 5, 534, 4, 0, 4, 
	5, 534, 4, 0, 106, 103, 104, 109, 
	108, 104, 109, 108, 109, 108, 111, 0, 
	112, 116, 0, 114, 115, 113, 114, 115, 
	113, 4, 105, 5, 534, 4, 0, 115, 
	113, 114, 118, 117, 114, 118, 117, 118, 
	117, 4, 99, 100, 110, 119, 5, 120, 
	536, 153, 98, 162, 4, 98, 98, 98, 
	0, 121, 125, 128, 135, 0, 123, 124, 
	122, 123, 124, 122, 4, 105, 5, 534, 
	4, 0, 124, 122, 123, 127, 126, 123, 
	127, 126, 127, 126, 130, 134, 129, 130, 
	134, 129, 4, 131, 5, 534, 132, 133, 
	4, 0, 4, 5, 534, 4, 0, 4, 
	131, 5, 534, 132, 133, 4, 0, 4, 
	131, 5, 534, 132, 133, 4, 0, 134, 
	129, 136, 140, 0, 138, 139, 137, 138, 
	139, 137, 4, 105, 5, 534, 4, 0, 
	139, 137, 138, 142, 141, 138, 142, 141, 
	142, 141, 145, 147, 144, 145, 147, 144, 
	4, 5, 534, 146, 4, 0, 4, 5, 
	534, 4, 0, 147, 144, 145, 150, 149, 
	145, 150, 149, 150, 149, 4, 5, 534, 
	146, 4, 0, 4, 5, 534, 146, 4, 
	152, 152, 152, 0, 154, 0, 155, 159, 
	0, 157, 158, 156, 157, 158, 156, 4, 
	105, 5, 534, 4, 0, 158, 156, 157, 
	161, 160, 157, 161, 160, 161, 160, 163, 
	0, 164, 0, 165, 0, 166, 0, 167, 
	162, 0, 168, 0, 143, 148, 151, 151, 
	152, 152, 152, 0, 170, 188, 201, 206, 
	224, 241, 512, 0, 171, 0, 172, 0, 
	173, 0, 174, 0, 175, 0, 176, 0, 
	177, 0, 178, 0, 179, 0, 180, 0, 
	181, 0, 182, 0, 183, 0, 184, 0, 
	185, 0, 186, 0, 187, 186, 0, 4, 
	5, 169, 534, 4, 0, 189, 0, 190, 
	0, 191, 0, 192, 0, 193, 0, 194, 
	0, 195, 0, 196, 0, 197, 0, 198, 
	0, 199, 0, 200, 0, 187, 200, 0, 
	202, 0, 203, 0, 204, 0, 205, 0, 
	4, 5, 169, 534, 4, 0, 207, 0, 
	208, 0, 209, 0, 210, 0, 211, 0, 
	212, 217, 0, 213, 0, 214, 0, 215, 
	0, 216, 0, 4, 5, 169, 534, 4, 
	0, 218, 0, 219, 0, 220, 0, 221, 
	0, 222, 0, 223, 0, 4, 5, 169, 
	534, 4, 0, 225, 0, 226, 0, 227, 
	0, 228, 0, 229, 234, 0, 230, 0, 
	231, 0, 232, 0, 233, 0, 4, 5, 
	169, 534, 4, 0, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	4, 5, 169, 534, 4, 0, 242, 424, 
	0, 243, 0, 244, 0, 245, 0, 246, 
	265, 278, 283, 301, 318, 407, 0, 247, 
	0, 248, 0, 249, 0, 250, 0, 251, 
	0, 252, 0, 253, 0, 254, 0, 255, 
	0, 256, 0, 257, 0, 258, 0, 259, 
	0, 260, 0, 261, 0, 262, 0, 263, 
	262, 0, 264, 245, 0, 4, 5, 169, 
	534, 4, 0, 266, 0, 267, 0, 268, 
	0, 269, 0, 270, 0, 271, 0, 272, 
	0, 273, 0, 274, 0, 275, 0, 276, 
	0, 277, 0, 263, 277, 0, 279, 0, 
	280, 0, 281, 0, 282, 0, 264, 245, 
	0, 284, 0, 285, 0, 286, 0, 287, 
	0, 288, 0, 289, 294, 0, 290, 0, 
	291, 0, 292, 0, 293, 0, 264, 245, 
	0, 295, 0, 296, 0, 297, 0, 298, 
	0, 299, 0, 300, 0, 264, 245, 0, 
	302, 0, 303, 0, 304, 0, 305, 0, 
	306, 311, 0, 307, 0, 308, 0, 309, 
	0, 310, 0, 264, 245, 0, 312, 0, 
	313, 0, 314, 0, 315, 0, 316, 0, 
	317, 0, 264, 245, 0, 319, 0, 320, 
	0, 321, 0, 322, 341, 386, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 327, 
	0, 328, 334, 338, 329, 0, 329, 0, 
	330, 331, 329, 0, 264, 245, 0, 330, 
	332, 332, 0, 333, 0, 330, 333, 0, 
	335, 0, 336, 0, 337, 0, 330, 0, 
	339, 0, 340, 0, 330, 0, 342, 0, 
	343, 0, 344, 0, 345, 0, 346, 365, 
	0, 347, 0, 348, 0, 349, 0, 350, 
	0, 351, 0, 352, 358, 362, 353, 0, 
	353, 0, 354, 355, 353, 0, 264, 245, 
	0, 354, 356, 356, 0, 357, 0, 354, 
	357, 0, 359, 0, 360, 0, 361, 0, 
	354, 0, 363, 0, 364, 0, 354, 0, 
	366, 0, 367, 0, 368, 0, 369, 0, 
	370, 0, 371, 0, 372, 0, 373, 379, 
	383, 374, 0, 374, 0, 375, 376, 374, 
	0, 264, 245, 0, 375, 377, 377, 0, 
	378, 0, 375, 378, 0, 380, 0, 381, 
	0, 382, 0, 375, 0, 384, 0, 385, 
	0, 375, 0, 387, 0, 388, 0, 389, 
	0, 390, 0, 391, 0, 392, 0, 393, 
	0, 394, 400, 404, 395, 0, 395, 0, 
	396, 397, 395, 0, 264, 245, 0, 396, 
	398, 398, 0, 399, 0, 396, 399, 0, 
	401, 0, 402, 0, 403, 0, 396, 0, 
	405, 0, 406, 0, 396, 0, 408, 0, 
	409, 0, 410, 0, 411, 0, 412, 417, 
	0, 413, 0, 414, 0, 415, 0, 416, 
	0, 264, 245, 0, 418, 0, 419, 0, 
	420, 0, 421, 0, 422, 0, 423, 0, 
	264, 245, 0, 425, 0, 426, 0, 427, 
	446, 491, 0, 428, 0, 429, 0, 430, 
	0, 431, 0, 432, 0, 433, 439, 443, 
	434, 0, 434, 0, 435, 436, 434, 0, 
	4, 5, 169, 534, 4, 0, 435, 437, 
	437, 0, 438, 0, 435, 438, 0, 440, 
	0, 441, 0, 442, 0, 435, 0, 444, 
	0, 445, 0, 435, 0, 447, 0, 448, 
	0, 449, 0, 450, 0, 451, 470, 0, 
	452, 0, 453, 0, 454, 0, 455, 0, 
	456, 0, 457, 463, 467, 458, 0, 458, 
	0, 459, 460, 458, 0, 4, 5, 169, 
	534, 4, 0, 459, 461, 461, 0, 462, 
	0, 459, 462, 0, 464, 0, 465, 0, 
	466, 0, 459, 0, 468, 0, 469, 0, 
	459, 0, 471, 0, 472, 0, 473, 0, 
	474, 0, 475, 0, 476, 0, 477, 0, 
	478, 484, 488, 479, 0, 479, 0, 480, 
	481, 479, 0, 4, 5, 169, 534, 4, 
	0, 480, 482, 482, 0, 483, 0, 480, 
	483, 0, 485, 0, 486, 0, 487, 0, 
	480, 0, 489, 0, 490, 0, 480, 0, 
	492, 0, 493, 0, 494, 0, 495, 0, 
	496, 0, 497, 0, 498, 0, 499, 505, 
	509, 500, 0, 500, 0, 501, 502, 500, 
	0, 4, 5, 169, 534, 4, 0, 501, 
	503, 503, 0, 504, 0, 501, 504, 0, 
	506, 0, 507, 0, 508, 0, 501, 0, 
	510, 0, 511, 0, 501, 0, 513, 0, 
	514, 0, 515, 0, 516, 0, 517, 522, 
	0, 518, 0, 519, 0, 520, 0, 521, 
	0, 4, 5, 169, 534, 4, 0, 523, 
	0, 524, 0, 525, 0, 526, 0, 527, 
	0, 528, 0, 4, 5, 169, 534, 4, 
	0, 530, 531, 531, 0, 534, 0, 531, 
	534, 531, 531, 531, 531, 0, 3, 533, 
	533, 0, 4, 533, 5, 169, 534, 533, 
	4, 533, 533, 533, 0, 534, 1, 2, 
	534, 0, 534, 1, 2, 534, 0, 534, 
	143, 1, 148, 2, 151, 534, 151, 152, 
	152, 152, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 183, 0, 77, 183, 183, 91, 
	79, 79, 79, 79, 79, 91, 0, 0, 
	0, 0, 0, 1, 1, 91, 0, 91, 
	0, 0, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 55, 55, 
	55, 55, 55, 55, 91, 0, 91, 0, 
	0, 91, 96, 5, 5, 7, 0, 0, 
	269, 75, 269, 269, 269, 91, 197, 197, 
	197, 197, 91, 0, 0, 99, 9, 9, 
	11, 0, 0, 0, 0, 0, 91, 0, 
	0, 91, 96, 5, 5, 7, 0, 0, 
	261, 73, 261, 261, 261, 91, 0, 0, 
	99, 9, 9, 11, 0, 0, 0, 0, 
	0, 91, 0, 0, 63, 63, 63, 63, 
	63, 91, 102, 13, 13, 15, 0, 0, 
	221, 221, 221, 221, 91, 0, 0, 105, 
	17, 17, 19, 0, 0, 0, 0, 229, 
	229, 229, 229, 91, 229, 229, 229, 229, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	91, 96, 5, 5, 7, 0, 0, 237, 
	67, 237, 237, 237, 91, 0, 0, 99, 
	9, 9, 11, 0, 0, 0, 0, 177, 
	45, 45, 47, 0, 0, 282, 180, 282, 
	282, 0, 0, 282, 91, 193, 193, 193, 
	193, 91, 304, 217, 304, 304, 51, 51, 
	304, 91, 292, 213, 292, 292, 49, 49, 
	292, 91, 0, 0, 0, 0, 91, 96, 
	5, 5, 7, 0, 0, 245, 69, 245, 
	245, 245, 91, 0, 0, 99, 9, 9, 
	11, 0, 0, 0, 0, 0, 91, 0, 
	0, 91, 96, 5, 5, 7, 0, 0, 
	253, 71, 253, 253, 253, 91, 0, 0, 
	99, 9, 9, 11, 0, 0, 0, 0, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	59, 59, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 57, 57, 57, 
	57, 57, 57, 91, 0, 91, 0, 91, 
	0, 91, 53, 53, 53, 53, 53, 53, 
	91, 277, 93, 3, 3, 3, 277, 3, 
	277, 3, 0, 3, 277, 0, 0, 0, 
	91, 209, 209, 209, 209, 91, 0, 91, 
	0, 0, 91, 96, 5, 5, 7, 0, 
	0, 273, 75, 273, 273, 273, 91, 205, 
	205, 205, 205, 91, 0, 0, 99, 9, 
	9, 11, 0, 0, 0, 0, 0, 91, 
	0, 0, 91, 96, 5, 5, 7, 0, 
	0, 265, 73, 265, 265, 265, 91, 0, 
	0, 99, 9, 9, 11, 0, 0, 0, 
	0, 277, 93, 3, 3, 3, 277, 3, 
	277, 3, 0, 3, 277, 0, 0, 0, 
	91, 0, 0, 0, 0, 91, 96, 5, 
	5, 7, 0, 0, 241, 67, 241, 241, 
	241, 91, 0, 0, 99, 9, 9, 11, 
	0, 0, 0, 0, 177, 45, 45, 47, 
	0, 0, 287, 180, 287, 287, 0, 0, 
	287, 91, 201, 201, 201, 201, 91, 310, 
	217, 310, 310, 51, 51, 310, 91, 298, 
	213, 298, 298, 49, 49, 298, 91, 0, 
	0, 0, 0, 91, 96, 5, 5, 7, 
	0, 0, 249, 69, 249, 249, 249, 91, 
	0, 0, 99, 9, 9, 11, 0, 0, 
	0, 0, 102, 13, 13, 15, 0, 0, 
	225, 225, 225, 61, 225, 91, 189, 189, 
	189, 189, 91, 0, 0, 105, 17, 17, 
	19, 0, 0, 0, 0, 233, 233, 233, 
	65, 233, 91, 233, 233, 233, 65, 233, 
	0, 0, 0, 91, 0, 91, 0, 0, 
	91, 96, 5, 5, 7, 0, 0, 257, 
	71, 257, 257, 257, 91, 0, 0, 99, 
	9, 9, 11, 0, 0, 0, 0, 0, 
	91, 0, 91, 0, 91, 0, 91, 59, 
	59, 91, 0, 91, 0, 0, 63, 63, 
	63, 63, 63, 91, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 37, 91, 39, 0, 91, 83, 
	83, 83, 83, 83, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 33, 91, 35, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	114, 114, 114, 114, 114, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 138, 138, 138, 138, 138, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 144, 144, 144, 
	144, 144, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 150, 150, 
	150, 150, 150, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	156, 156, 156, 156, 156, 91, 0, 0, 
	91, 0, 91, 0, 91, 41, 91, 0, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 37, 91, 39, 
	0, 91, 43, 43, 91, 81, 81, 81, 
	81, 81, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 33, 91, 35, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 111, 111, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 135, 135, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 141, 141, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 147, 147, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 153, 153, 91, 0, 91, 0, 
	91, 0, 91, 0, 0, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 25, 0, 0, 25, 91, 0, 91, 
	27, 27, 0, 91, 117, 117, 91, 29, 
	108, 108, 91, 0, 91, 31, 0, 91, 
	0, 91, 0, 91, 0, 91, 21, 91, 
	0, 91, 0, 91, 23, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 25, 0, 0, 25, 91, 
	0, 91, 27, 27, 0, 91, 123, 123, 
	91, 29, 108, 108, 91, 0, 91, 31, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	21, 91, 0, 91, 0, 91, 23, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 25, 0, 
	0, 25, 91, 0, 91, 27, 27, 0, 
	91, 159, 159, 91, 29, 108, 108, 91, 
	0, 91, 31, 0, 91, 0, 91, 0, 
	91, 0, 91, 21, 91, 0, 91, 0, 
	91, 23, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 25, 0, 0, 25, 91, 0, 91, 
	27, 27, 0, 91, 129, 129, 91, 29, 
	108, 108, 91, 0, 91, 31, 0, 91, 
	0, 91, 0, 91, 0, 91, 21, 91, 
	0, 91, 0, 91, 23, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 165, 165, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	171, 171, 91, 0, 91, 0, 91, 0, 
	0, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 25, 0, 0, 
	25, 91, 0, 91, 27, 27, 0, 91, 
	120, 120, 120, 120, 120, 91, 29, 108, 
	108, 91, 0, 91, 31, 0, 91, 0, 
	91, 0, 91, 0, 91, 21, 91, 0, 
	91, 0, 91, 23, 91, 0, 91, 0, 
	91, 0, 91, 0, 91, 0, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 25, 0, 0, 25, 91, 0, 
	91, 27, 27, 0, 91, 126, 126, 126, 
	126, 126, 91, 29, 108, 108, 91, 0, 
	91, 31, 0, 91, 0, 91, 0, 91, 
	0, 91, 21, 91, 0, 91, 0, 91, 
	23, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	25, 0, 0, 25, 91, 0, 91, 27, 
	27, 0, 91, 162, 162, 162, 162, 162, 
	91, 29, 108, 108, 91, 0, 91, 31, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	21, 91, 0, 91, 0, 91, 23, 91, 
	0, 91, 0, 91, 0, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 25, 0, 
	0, 25, 91, 0, 91, 27, 27, 0, 
	91, 132, 132, 132, 132, 132, 91, 29, 
	108, 108, 91, 0, 91, 31, 0, 91, 
	0, 91, 0, 91, 0, 91, 21, 91, 
	0, 91, 0, 91, 23, 91, 0, 91, 
	0, 91, 0, 91, 0, 91, 0, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 168, 168, 168, 168, 168, 91, 0, 
	91, 0, 91, 0, 91, 0, 91, 0, 
	91, 0, 91, 174, 174, 174, 174, 174, 
	91, 87, 87, 87, 91, 89, 91, 0, 
	89, 0, 0, 0, 0, 91, 186, 186, 
	186, 91, 79, 0, 79, 79, 79, 0, 
	79, 0, 0, 0, 91, 0, 0, 0, 
	0, 91, 85, 85, 85, 85, 91, 0, 
	0, 0, 0, 0, 63, 0, 63, 63, 
	63, 63, 91, 0
};

static const short _hext_eof_actions[] = {
	0, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 0, 85, 
	0
};

static const int hext_start = 534;
static const int hext_first_final = 534;
static const int hext_error = 0;

static const int hext_en_main = 534;


#line 64 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1054 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1059 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ TK_START; }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ TK_START; }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ TK_START; }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ TK_START; }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ TK_START; }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ TK_START; }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 186 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 47:
#line 188 "hext-machine.rl"
	{ TK_START; }
	break;
	case 48:
#line 189 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 49:
#line 196 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 50:
#line 199 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 51:
#line 202 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 52:
#line 205 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 53:
#line 208 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 54:
#line 216 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 55:
#line 221 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 56:
#line 225 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 57:
#line 229 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 58:
#line 237 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 59:
#line 241 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 60:
#line 245 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 61:
#line 248 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 62:
#line 249 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 63:
#line 267 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 64:
#line 270 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 65:
#line 273 "hext-machine.rl"
	{ TK_START; }
	break;
	case 66:
#line 274 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 67:
#line 277 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 68:
#line 280 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 69:
#line 288 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 70:
#line 295 "hext-machine.rl"
	{ TK_START; }
	break;
	case 71:
#line 296 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 72:
#line 301 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1442 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 69:
#line 288 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 72:
#line 301 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1466 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 119 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

