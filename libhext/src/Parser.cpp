// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/CasePipe.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexReplacePipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 51 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 70, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 2, 3, 67, 
	2, 4, 5, 2, 6, 7, 2, 8, 
	9, 2, 10, 11, 2, 16, 17, 2, 
	19, 35, 2, 19, 75, 2, 24, 35, 
	2, 24, 75, 2, 25, 35, 2, 25, 
	75, 2, 26, 35, 2, 26, 75, 2, 
	27, 35, 2, 27, 75, 2, 28, 35, 
	2, 28, 75, 2, 29, 35, 2, 29, 
	75, 2, 30, 35, 2, 30, 75, 2, 
	31, 35, 2, 31, 75, 2, 32, 35, 
	2, 32, 75, 2, 33, 35, 2, 33, 
	75, 2, 36, 37, 2, 38, 40, 2, 
	39, 40, 2, 40, 41, 2, 70, 72, 
	2, 71, 72, 3, 0, 64, 69, 3, 
	1, 62, 69, 3, 1, 63, 69, 3, 
	1, 65, 69, 3, 1, 66, 69, 3, 
	1, 68, 69, 3, 38, 40, 41, 3, 
	39, 40, 41, 3, 53, 61, 69, 3, 
	53, 64, 69, 3, 55, 61, 69, 3, 
	55, 64, 69, 3, 56, 63, 69, 3, 
	56, 66, 69, 3, 57, 63, 69, 3, 
	57, 66, 69, 3, 58, 63, 69, 3, 
	58, 66, 69, 3, 59, 63, 69, 3, 
	59, 66, 69, 3, 60, 63, 69, 3, 
	60, 66, 69, 4, 3, 67, 68, 69, 
	4, 40, 41, 62, 69, 4, 40, 41, 
	65, 69, 5, 38, 40, 41, 62, 69, 
	5, 38, 40, 41, 65, 69, 5, 39, 
	40, 41, 62, 69, 5, 39, 40, 41, 
	65, 69
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 90, 92, 94, 
	100, 101, 103, 105, 106, 108, 110, 118, 
	123, 131, 139, 140, 142, 144, 146, 152, 
	153, 155, 157, 158, 169, 171, 173, 178, 
	179, 181, 183, 184, 196, 197, 199, 201, 
	203, 209, 210, 212, 214, 215, 220, 221, 
	222, 223, 224, 225, 226, 228, 230, 232, 
	233, 235, 236, 237, 239, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 251, 253, 
	256, 258, 261, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 274, 276, 278, 279, 
	281, 282, 284, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 295, 297, 299, 305, 
	309, 314, 316, 318, 319, 321, 322, 324, 
	326, 327, 333, 339, 340, 342, 344, 345, 
	346, 347, 348, 350, 351, 352, 353, 354, 
	356, 357, 358, 361, 363, 365, 367, 368, 
	370, 371, 373, 375, 376, 377, 378, 379, 
	380, 381, 382, 383, 384, 385, 390, 391, 
	392, 393, 398, 417, 422, 423, 425, 427, 
	429, 435, 440, 441, 443, 445, 446, 447, 
	449, 451, 453, 459, 460, 462, 464, 465, 
	470, 472, 474, 480, 481, 483, 485, 486, 
	488, 490, 498, 503, 511, 519, 520, 522, 
	524, 526, 532, 533, 535, 537, 538, 549, 
	551, 553, 559, 564, 565, 567, 569, 570, 
	583, 584, 586, 588, 590, 596, 597, 599, 
	601, 602, 607, 608, 609, 610, 611, 612, 
	613, 615, 617, 619, 620, 622, 623, 624, 
	626, 628, 629, 630, 631, 632, 633, 634, 
	635, 636, 638, 640, 643, 645, 648, 651, 
	652, 653, 654, 655, 656, 657, 658, 659, 
	661, 663, 665, 666, 668, 669, 671, 673, 
	674, 675, 676, 677, 678, 679, 680, 681, 
	682, 684, 686, 692, 696, 701, 703, 705, 
	706, 708, 709, 711, 713, 714, 720, 726, 
	727, 729, 731, 732, 733, 734, 735, 737, 
	738, 739, 740, 741, 743, 744, 745, 748, 
	750, 752, 754, 755, 757, 758, 760, 762, 
	763, 770, 771, 772, 773, 774, 775, 776, 
	777, 778, 779, 780, 781, 782, 783, 784, 
	785, 787, 790, 796, 797, 798, 799, 800, 
	801, 802, 803, 804, 805, 806, 807, 809, 
	812, 813, 814, 815, 816, 822, 823, 824, 
	825, 826, 827, 829, 830, 831, 832, 833, 
	839, 840, 841, 842, 843, 844, 845, 851, 
	852, 853, 854, 855, 857, 858, 859, 860, 
	861, 867, 868, 869, 870, 871, 872, 873, 
	879, 881, 882, 883, 884, 891, 892, 893, 
	894, 895, 896, 897, 898, 899, 900, 901, 
	902, 903, 904, 905, 906, 908, 911, 913, 
	919, 920, 921, 922, 923, 924, 925, 926, 
	927, 928, 929, 930, 932, 935, 936, 937, 
	938, 939, 941, 942, 943, 944, 945, 946, 
	948, 949, 950, 951, 952, 954, 955, 956, 
	957, 958, 959, 960, 962, 963, 964, 965, 
	966, 968, 969, 970, 971, 972, 974, 975, 
	976, 977, 978, 979, 980, 982, 983, 984, 
	985, 988, 989, 990, 991, 992, 993, 998, 
	1000, 1004, 1006, 1009, 1011, 1014, 1015, 1016, 
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 
	1025, 1027, 1028, 1029, 1030, 1031, 1032, 1037, 
	1039, 1043, 1045, 1048, 1050, 1053, 1054, 1055, 
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 
	1064, 1065, 1066, 1067, 1072, 1074, 1078, 1080, 
	1083, 1085, 1088, 1089, 1090, 1091, 1092, 1093, 
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 
	1102, 1107, 1109, 1113, 1115, 1118, 1120, 1123, 
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 
	1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 
	1151, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 
	1165, 1167, 1171, 1177, 1180, 1182, 1185, 1186, 
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 
	1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 
	1208, 1210, 1214, 1220, 1223, 1225, 1228, 1229, 
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 
	1238, 1239, 1240, 1241, 1242, 1247, 1249, 1253, 
	1259, 1262, 1264, 1267, 1268, 1269, 1270, 1271, 
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 
	1280, 1281, 1286, 1288, 1292, 1298, 1301, 1303, 
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 
	1314, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 
	1323, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 
	1341, 1346, 1347, 1356, 1361, 1375, 1380
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 61, 
	94, 124, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 47, 
	61, 62, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 47, 
	62, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 92, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	95, 45, 46, 48, 57, 65, 90, 97, 
	122, 34, 92, 34, 92, 32, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	32, 47, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 97, 
	102, 112, 114, 116, 112, 112, 101, 110, 
	100, 40, 34, 39, 34, 92, 34, 92, 
	41, 61, 124, 62, 92, 39, 92, 39, 
	92, 92, 105, 108, 116, 101, 114, 40, 
	47, 47, 92, 47, 92, 41, 99, 105, 
	61, 124, 41, 99, 105, 41, 99, 105, 
	92, 114, 101, 112, 101, 110, 100, 40, 
	34, 39, 34, 92, 34, 92, 41, 61, 
	124, 92, 39, 92, 39, 92, 92, 101, 
	112, 108, 97, 99, 101, 40, 47, 47, 
	92, 47, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 9, 13, 32, 34, 39, 
	9, 13, 34, 92, 34, 92, 41, 61, 
	124, 92, 39, 92, 39, 92, 92, 32, 
	44, 99, 105, 9, 13, 32, 44, 99, 
	105, 9, 13, 92, 111, 114, 108, 117, 
	111, 119, 101, 114, 61, 124, 112, 112, 
	101, 114, 61, 124, 105, 109, 40, 61, 
	124, 34, 39, 34, 92, 34, 92, 41, 
	61, 124, 92, 39, 92, 39, 92, 92, 
	116, 114, 105, 112, 45, 116, 97, 103, 
	115, 36, 42, 61, 94, 124, 101, 120, 
	116, 36, 42, 61, 94, 124, 32, 33, 
	36, 42, 45, 47, 61, 62, 94, 95, 
	124, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 47, 62, 9, 13, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 32, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 34, 39, 47, 61, 62, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 47, 92, 
	47, 92, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 47, 62, 9, 13, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	33, 47, 62, 99, 105, 9, 13, 92, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 34, 39, 95, 45, 46, 48, 
	57, 65, 90, 97, 122, 34, 92, 34, 
	92, 32, 47, 62, 63, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 32, 47, 62, 63, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 97, 102, 112, 114, 116, 112, 
	112, 101, 110, 100, 40, 34, 39, 34, 
	92, 34, 92, 41, 61, 124, 62, 92, 
	39, 92, 39, 92, 92, 105, 108, 116, 
	101, 114, 40, 47, 47, 92, 47, 92, 
	41, 99, 105, 61, 124, 41, 99, 105, 
	41, 99, 105, 92, 114, 101, 112, 101, 
	110, 100, 40, 34, 39, 34, 92, 34, 
	92, 41, 61, 124, 92, 39, 92, 39, 
	92, 92, 101, 112, 108, 97, 99, 101, 
	40, 47, 47, 92, 47, 92, 32, 44, 
	99, 105, 9, 13, 32, 44, 9, 13, 
	32, 34, 39, 9, 13, 34, 92, 34, 
	92, 41, 61, 124, 92, 39, 92, 39, 
	92, 92, 32, 44, 99, 105, 9, 13, 
	32, 44, 99, 105, 9, 13, 92, 111, 
	114, 108, 117, 111, 119, 101, 114, 61, 
	124, 112, 112, 101, 114, 61, 124, 105, 
	109, 40, 61, 124, 34, 39, 34, 92, 
	34, 92, 41, 61, 124, 92, 39, 92, 
	39, 92, 92, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 111, 
	116, 116, 40, 58, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 114, 105, 98, 
	117, 116, 101, 45, 99, 111, 117, 110, 
	116, 40, 48, 57, 41, 48, 57, 41, 
	58, 32, 47, 58, 62, 9, 13, 104, 
	105, 108, 100, 45, 99, 111, 117, 110, 
	116, 40, 48, 57, 41, 48, 57, 109, 
	112, 116, 121, 41, 58, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	41, 58, 102, 45, 116, 121, 112, 101, 
	41, 58, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 41, 58, 102, 45, 
	116, 121, 112, 101, 41, 58, 116, 104, 
	45, 99, 108, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 41, 58, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 41, 58, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 110, 108, 121, 45, 99, 111, 
	104, 105, 108, 100, 41, 58, 102, 45, 
	116, 121, 112, 101, 41, 58, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	97, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 32, 47, 58, 62, 9, 
	13, 102, 45, 116, 121, 112, 101, 32, 
	47, 58, 62, 9, 13, 42, 65, 90, 
	97, 122, 62, 45, 62, 95, 48, 57, 
	65, 90, 97, 122, 42, 65, 90, 97, 
	122, 32, 45, 47, 58, 62, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 5, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 3, 2, 2, 3, 1, 
	2, 2, 1, 4, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 5, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	2, 1, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 3, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 2, 1, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 4, 2, 
	3, 2, 2, 1, 2, 1, 2, 2, 
	1, 4, 4, 1, 2, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 3, 2, 2, 2, 1, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 1, 1, 
	1, 5, 11, 3, 1, 2, 2, 2, 
	4, 3, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 5, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 6, 3, 6, 6, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 3, 2, 
	2, 4, 3, 1, 2, 2, 1, 5, 
	1, 2, 2, 2, 4, 1, 2, 2, 
	1, 5, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 1, 2, 1, 1, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 3, 2, 3, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 4, 2, 3, 2, 2, 1, 
	2, 1, 2, 2, 1, 4, 4, 1, 
	2, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 3, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	7, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	2, 1, 1, 1, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 2, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 3, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 3, 1, 6, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 1, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 4, 0, 
	0, 1, 1, 0, 0, 0, 0, 4, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	2, 0, 3, 2, 4, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 117, 120, 123, 
	129, 131, 134, 137, 139, 142, 145, 153, 
	158, 166, 174, 176, 179, 182, 185, 191, 
	193, 196, 199, 201, 209, 212, 215, 220, 
	222, 225, 228, 230, 239, 241, 244, 247, 
	250, 256, 258, 261, 264, 266, 272, 274, 
	276, 278, 280, 282, 284, 287, 290, 293, 
	295, 298, 300, 302, 305, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 327, 330, 
	334, 337, 341, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 364, 367, 370, 372, 
	375, 377, 380, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 404, 407, 413, 
	417, 422, 425, 428, 430, 433, 435, 438, 
	441, 443, 449, 455, 457, 460, 463, 465, 
	467, 469, 471, 474, 476, 478, 480, 482, 
	485, 487, 489, 493, 496, 499, 502, 504, 
	507, 509, 512, 515, 517, 519, 521, 523, 
	525, 527, 529, 531, 533, 535, 541, 543, 
	545, 547, 553, 569, 574, 576, 579, 582, 
	585, 591, 596, 598, 601, 604, 606, 608, 
	611, 614, 617, 623, 625, 628, 631, 633, 
	639, 642, 645, 651, 653, 656, 659, 661, 
	664, 667, 675, 680, 688, 696, 698, 701, 
	704, 707, 713, 715, 718, 721, 723, 731, 
	734, 737, 743, 748, 750, 753, 756, 758, 
	768, 770, 773, 776, 779, 785, 787, 790, 
	793, 795, 801, 803, 805, 807, 809, 811, 
	813, 816, 819, 822, 824, 827, 829, 831, 
	834, 837, 839, 841, 843, 845, 847, 849, 
	851, 853, 856, 859, 863, 866, 870, 874, 
	876, 878, 880, 882, 884, 886, 888, 890, 
	893, 896, 899, 901, 904, 906, 909, 912, 
	914, 916, 918, 920, 922, 924, 926, 928, 
	930, 933, 936, 942, 946, 951, 954, 957, 
	959, 962, 964, 967, 970, 972, 978, 984, 
	986, 989, 992, 994, 996, 998, 1000, 1003, 
	1005, 1007, 1009, 1011, 1014, 1016, 1018, 1022, 
	1025, 1028, 1031, 1033, 1036, 1038, 1041, 1044, 
	1046, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 
	1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 
	1084, 1086, 1089, 1095, 1097, 1099, 1101, 1103, 
	1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 
	1122, 1124, 1126, 1128, 1130, 1136, 1138, 1140, 
	1142, 1144, 1146, 1149, 1151, 1153, 1155, 1157, 
	1163, 1165, 1167, 1169, 1171, 1173, 1175, 1181, 
	1183, 1185, 1187, 1189, 1192, 1194, 1196, 1198, 
	1200, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 
	1224, 1227, 1229, 1231, 1233, 1241, 1243, 1245, 
	1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 
	1263, 1265, 1267, 1269, 1271, 1273, 1276, 1279, 
	1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 
	1301, 1303, 1305, 1307, 1309, 1312, 1314, 1316, 
	1318, 1320, 1323, 1325, 1327, 1329, 1331, 1333, 
	1336, 1338, 1340, 1342, 1344, 1347, 1349, 1351, 
	1353, 1355, 1357, 1359, 1362, 1364, 1366, 1368, 
	1370, 1373, 1375, 1377, 1379, 1381, 1384, 1386, 
	1388, 1390, 1392, 1394, 1396, 1399, 1401, 1403, 
	1405, 1409, 1411, 1413, 1415, 1417, 1419, 1424, 
	1426, 1430, 1433, 1437, 1439, 1442, 1444, 1446, 
	1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 
	1464, 1467, 1469, 1471, 1473, 1475, 1477, 1482, 
	1484, 1488, 1491, 1495, 1497, 1500, 1502, 1504, 
	1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 
	1522, 1524, 1526, 1528, 1533, 1535, 1539, 1542, 
	1546, 1548, 1551, 1553, 1555, 1557, 1559, 1561, 
	1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 
	1579, 1584, 1586, 1590, 1593, 1597, 1599, 1602, 
	1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618, 
	1620, 1622, 1624, 1627, 1629, 1631, 1633, 1635, 
	1638, 1640, 1642, 1644, 1646, 1648, 1650, 1653, 
	1655, 1657, 1661, 1663, 1665, 1667, 1669, 1671, 
	1676, 1678, 1682, 1688, 1692, 1694, 1697, 1699, 
	1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 
	1717, 1719, 1722, 1724, 1726, 1728, 1730, 1732, 
	1737, 1739, 1743, 1749, 1753, 1755, 1758, 1760, 
	1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 
	1778, 1780, 1782, 1784, 1786, 1791, 1793, 1797, 
	1803, 1807, 1809, 1812, 1814, 1816, 1818, 1820, 
	1822, 1824, 1826, 1828, 1830, 1832, 1834, 1836, 
	1838, 1840, 1845, 1847, 1851, 1857, 1861, 1863, 
	1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 
	1882, 1884, 1886, 1888, 1891, 1893, 1895, 1897, 
	1899, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 
	1923, 1927, 1929, 1936, 1940, 1951, 1956
};

static const short _hext_trans_targs[] = {
	709, 1, 3, 704, 707, 708, 708, 0, 
	4, 5, 344, 709, 4, 0, 4, 5, 
	709, 6, 4, 186, 186, 0, 710, 0, 
	7, 172, 182, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 68, 77, 0, 18, 0, 19, 24, 
	0, 21, 23, 20, 21, 23, 20, 4, 
	22, 5, 709, 4, 0, 4, 5, 709, 
	4, 0, 23, 20, 21, 26, 25, 21, 
	26, 25, 26, 25, 28, 0, 29, 33, 
	0, 31, 32, 30, 31, 32, 30, 4, 
	22, 5, 709, 4, 0, 32, 30, 31, 
	35, 34, 31, 35, 34, 35, 34, 37, 
	41, 44, 51, 59, 0, 39, 40, 38, 
	39, 40, 38, 4, 22, 5, 709, 4, 
	0, 40, 38, 39, 43, 42, 39, 43, 
	42, 43, 42, 46, 50, 45, 46, 50, 
	45, 4, 47, 5, 709, 48, 49, 4, 
	0, 4, 5, 709, 4, 0, 4, 47, 
	5, 709, 48, 49, 4, 0, 4, 47, 
	5, 709, 48, 49, 4, 0, 50, 45, 
	52, 56, 0, 54, 55, 53, 54, 55, 
	53, 4, 22, 5, 709, 4, 0, 55, 
	53, 54, 58, 57, 54, 58, 57, 58, 
	57, 60, 64, 67, 67, 67, 67, 67, 
	0, 62, 63, 61, 62, 63, 61, 4, 
	5, 709, 4, 0, 63, 61, 62, 66, 
	65, 62, 66, 65, 66, 65, 4, 5, 
	709, 67, 4, 67, 67, 67, 0, 69, 
	0, 70, 74, 0, 72, 73, 71, 72, 
	73, 71, 4, 22, 5, 709, 4, 0, 
	73, 71, 72, 76, 75, 72, 76, 75, 
	76, 75, 78, 94, 108, 124, 148, 0, 
	79, 0, 80, 0, 81, 0, 82, 0, 
	83, 0, 84, 0, 85, 91, 0, 87, 
	90, 86, 87, 90, 86, 88, 0, 89, 
	77, 0, 59, 0, 90, 86, 87, 93, 
	92, 87, 93, 92, 93, 92, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 103, 107, 102, 103, 
	107, 102, 104, 105, 106, 0, 89, 77, 
	0, 104, 105, 106, 0, 104, 105, 106, 
	0, 107, 102, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 116, 121, 0, 118, 120, 117, 118, 
	120, 117, 119, 0, 89, 77, 0, 120, 
	117, 118, 123, 122, 118, 123, 122, 123, 
	122, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	0, 134, 147, 133, 134, 147, 133, 135, 
	136, 145, 146, 135, 0, 135, 136, 135, 
	0, 136, 137, 142, 136, 0, 139, 141, 
	138, 139, 141, 138, 140, 0, 89, 77, 
	0, 141, 138, 139, 144, 143, 139, 144, 
	143, 144, 143, 135, 136, 145, 146, 135, 
	0, 135, 136, 145, 146, 135, 0, 147, 
	133, 149, 160, 0, 150, 155, 0, 151, 
	0, 152, 0, 153, 0, 154, 0, 89, 
	77, 0, 156, 0, 157, 0, 158, 0, 
	159, 0, 89, 77, 0, 161, 0, 162, 
	0, 163, 89, 77, 0, 164, 169, 0, 
	166, 168, 165, 166, 168, 165, 167, 0, 
	89, 77, 0, 168, 165, 166, 171, 170, 
	166, 171, 170, 171, 170, 173, 0, 174, 
	0, 175, 0, 176, 0, 177, 0, 178, 
	0, 179, 0, 180, 0, 181, 0, 17, 
	27, 36, 68, 77, 0, 183, 0, 184, 
	0, 185, 0, 17, 27, 36, 68, 77, 
	0, 4, 187, 188, 198, 186, 5, 207, 
	709, 240, 186, 249, 4, 186, 186, 186, 
	0, 4, 5, 709, 4, 0, 189, 0, 
	190, 195, 0, 192, 194, 191, 192, 194, 
	191, 4, 193, 5, 709, 4, 0, 4, 
	5, 709, 4, 0, 194, 191, 192, 197, 
	196, 192, 197, 196, 197, 196, 199, 0, 
	200, 204, 0, 202, 203, 201, 202, 203, 
	201, 4, 193, 5, 709, 4, 0, 203, 
	201, 202, 206, 205, 202, 206, 205, 206, 
	205, 208, 212, 215, 222, 230, 0, 210, 
	211, 209, 210, 211, 209, 4, 193, 5, 
	709, 4, 0, 211, 209, 210, 214, 213, 
	210, 214, 213, 214, 213, 217, 221, 216, 
	217, 221, 216, 4, 218, 5, 709, 219, 
	220, 4, 0, 4, 5, 709, 4, 0, 
	4, 218, 5, 709, 219, 220, 4, 0, 
	4, 218, 5, 709, 219, 220, 4, 0, 
	221, 216, 223, 227, 0, 225, 226, 224, 
	225, 226, 224, 4, 193, 5, 709, 4, 
	0, 226, 224, 225, 229, 228, 225, 229, 
	228, 229, 228, 231, 236, 239, 239, 239, 
	239, 239, 0, 233, 235, 232, 233, 235, 
	232, 4, 5, 709, 234, 4, 0, 4, 
	5, 709, 4, 0, 235, 232, 233, 238, 
	237, 233, 238, 237, 238, 237, 4, 5, 
	709, 234, 239, 4, 239, 239, 239, 0, 
	241, 0, 242, 246, 0, 244, 245, 243, 
	244, 245, 243, 4, 193, 5, 709, 4, 
	0, 245, 243, 244, 248, 247, 244, 248, 
	247, 248, 247, 250, 266, 280, 296, 320, 
	0, 251, 0, 252, 0, 253, 0, 254, 
	0, 255, 0, 256, 0, 257, 263, 0, 
	259, 262, 258, 259, 262, 258, 260, 0, 
	261, 249, 0, 230, 0, 262, 258, 259, 
	265, 264, 259, 265, 264, 265, 264, 267, 
	0, 268, 0, 269, 0, 270, 0, 271, 
	0, 272, 0, 273, 0, 275, 279, 274, 
	275, 279, 274, 276, 277, 278, 0, 261, 
	249, 0, 276, 277, 278, 0, 276, 277, 
	278, 0, 279, 274, 281, 0, 282, 0, 
	283, 0, 284, 0, 285, 0, 286, 0, 
	287, 0, 288, 293, 0, 290, 292, 289, 
	290, 292, 289, 291, 0, 261, 249, 0, 
	292, 289, 290, 295, 294, 290, 295, 294, 
	295, 294, 297, 0, 298, 0, 299, 0, 
	300, 0, 301, 0, 302, 0, 303, 0, 
	304, 0, 306, 319, 305, 306, 319, 305, 
	307, 308, 317, 318, 307, 0, 307, 308, 
	307, 0, 308, 309, 314, 308, 0, 311, 
	313, 310, 311, 313, 310, 312, 0, 261, 
	249, 0, 313, 310, 311, 316, 315, 311, 
	316, 315, 316, 315, 307, 308, 317, 318, 
	307, 0, 307, 308, 317, 318, 307, 0, 
	319, 305, 321, 332, 0, 322, 327, 0, 
	323, 0, 324, 0, 325, 0, 326, 0, 
	261, 249, 0, 328, 0, 329, 0, 330, 
	0, 331, 0, 261, 249, 0, 333, 0, 
	334, 0, 335, 261, 249, 0, 336, 341, 
	0, 338, 340, 337, 338, 340, 337, 339, 
	0, 261, 249, 0, 340, 337, 338, 343, 
	342, 338, 343, 342, 343, 342, 345, 363, 
	376, 381, 399, 416, 687, 0, 346, 0, 
	347, 0, 348, 0, 349, 0, 350, 0, 
	351, 0, 352, 0, 353, 0, 354, 0, 
	355, 0, 356, 0, 357, 0, 358, 0, 
	359, 0, 360, 0, 361, 0, 362, 361, 
	0, 4, 5, 344, 709, 4, 0, 364, 
	0, 365, 0, 366, 0, 367, 0, 368, 
	0, 369, 0, 370, 0, 371, 0, 372, 
	0, 373, 0, 374, 0, 375, 0, 362, 
	375, 0, 377, 0, 378, 0, 379, 0, 
	380, 0, 4, 5, 344, 709, 4, 0, 
	382, 0, 383, 0, 384, 0, 385, 0, 
	386, 0, 387, 392, 0, 388, 0, 389, 
	0, 390, 0, 391, 0, 4, 5, 344, 
	709, 4, 0, 393, 0, 394, 0, 395, 
	0, 396, 0, 397, 0, 398, 0, 4, 
	5, 344, 709, 4, 0, 400, 0, 401, 
	0, 402, 0, 403, 0, 404, 409, 0, 
	405, 0, 406, 0, 407, 0, 408, 0, 
	4, 5, 344, 709, 4, 0, 410, 0, 
	411, 0, 412, 0, 413, 0, 414, 0, 
	415, 0, 4, 5, 344, 709, 4, 0, 
	417, 599, 0, 418, 0, 419, 0, 420, 
	0, 421, 440, 453, 458, 476, 493, 582, 
	0, 422, 0, 423, 0, 424, 0, 425, 
	0, 426, 0, 427, 0, 428, 0, 429, 
	0, 430, 0, 431, 0, 432, 0, 433, 
	0, 434, 0, 435, 0, 436, 0, 437, 
	0, 438, 437, 0, 439, 420, 0, 4, 
	5, 344, 709, 4, 0, 441, 0, 442, 
	0, 443, 0, 444, 0, 445, 0, 446, 
	0, 447, 0, 448, 0, 449, 0, 450, 
	0, 451, 0, 452, 0, 438, 452, 0, 
	454, 0, 455, 0, 456, 0, 457, 0, 
	439, 420, 0, 459, 0, 460, 0, 461, 
	0, 462, 0, 463, 0, 464, 469, 0, 
	465, 0, 466, 0, 467, 0, 468, 0, 
	439, 420, 0, 470, 0, 471, 0, 472, 
	0, 473, 0, 474, 0, 475, 0, 439, 
	420, 0, 477, 0, 478, 0, 479, 0, 
	480, 0, 481, 486, 0, 482, 0, 483, 
	0, 484, 0, 485, 0, 439, 420, 0, 
	487, 0, 488, 0, 489, 0, 490, 0, 
	491, 0, 492, 0, 439, 420, 0, 494, 
	0, 495, 0, 496, 0, 497, 516, 561, 
	0, 498, 0, 499, 0, 500, 0, 501, 
	0, 502, 0, 503, 509, 513, 504, 0, 
	504, 0, 505, 506, 504, 0, 439, 420, 
	0, 505, 507, 507, 0, 508, 0, 505, 
	508, 0, 510, 0, 511, 0, 512, 0, 
	505, 0, 514, 0, 515, 0, 505, 0, 
	517, 0, 518, 0, 519, 0, 520, 0, 
	521, 540, 0, 522, 0, 523, 0, 524, 
	0, 525, 0, 526, 0, 527, 533, 537, 
	528, 0, 528, 0, 529, 530, 528, 0, 
	439, 420, 0, 529, 531, 531, 0, 532, 
	0, 529, 532, 0, 534, 0, 535, 0, 
	536, 0, 529, 0, 538, 0, 539, 0, 
	529, 0, 541, 0, 542, 0, 543, 0, 
	544, 0, 545, 0, 546, 0, 547, 0, 
	548, 554, 558, 549, 0, 549, 0, 550, 
	551, 549, 0, 439, 420, 0, 550, 552, 
	552, 0, 553, 0, 550, 553, 0, 555, 
	0, 556, 0, 557, 0, 550, 0, 559, 
	0, 560, 0, 550, 0, 562, 0, 563, 
	0, 564, 0, 565, 0, 566, 0, 567, 
	0, 568, 0, 569, 575, 579, 570, 0, 
	570, 0, 571, 572, 570, 0, 439, 420, 
	0, 571, 573, 573, 0, 574, 0, 571, 
	574, 0, 576, 0, 577, 0, 578, 0, 
	571, 0, 580, 0, 581, 0, 571, 0, 
	583, 0, 584, 0, 585, 0, 586, 0, 
	587, 592, 0, 588, 0, 589, 0, 590, 
	0, 591, 0, 439, 420, 0, 593, 0, 
	594, 0, 595, 0, 596, 0, 597, 0, 
	598, 0, 439, 420, 0, 600, 0, 601, 
	0, 602, 621, 666, 0, 603, 0, 604, 
	0, 605, 0, 606, 0, 607, 0, 608, 
	614, 618, 609, 0, 609, 0, 610, 611, 
	609, 0, 4, 5, 344, 709, 4, 0, 
	610, 612, 612, 0, 613, 0, 610, 613, 
	0, 615, 0, 616, 0, 617, 0, 610, 
	0, 619, 0, 620, 0, 610, 0, 622, 
	0, 623, 0, 624, 0, 625, 0, 626, 
	645, 0, 627, 0, 628, 0, 629, 0, 
	630, 0, 631, 0, 632, 638, 642, 633, 
	0, 633, 0, 634, 635, 633, 0, 4, 
	5, 344, 709, 4, 0, 634, 636, 636, 
	0, 637, 0, 634, 637, 0, 639, 0, 
	640, 0, 641, 0, 634, 0, 643, 0, 
	644, 0, 634, 0, 646, 0, 647, 0, 
	648, 0, 649, 0, 650, 0, 651, 0, 
	652, 0, 653, 659, 663, 654, 0, 654, 
	0, 655, 656, 654, 0, 4, 5, 344, 
	709, 4, 0, 655, 657, 657, 0, 658, 
	0, 655, 658, 0, 660, 0, 661, 0, 
	662, 0, 655, 0, 664, 0, 665, 0, 
	655, 0, 667, 0, 668, 0, 669, 0, 
	670, 0, 671, 0, 672, 0, 673, 0, 
	674, 680, 684, 675, 0, 675, 0, 676, 
	677, 675, 0, 4, 5, 344, 709, 4, 
	0, 676, 678, 678, 0, 679, 0, 676, 
	679, 0, 681, 0, 682, 0, 683, 0, 
	676, 0, 685, 0, 686, 0, 676, 0, 
	688, 0, 689, 0, 690, 0, 691, 0, 
	692, 697, 0, 693, 0, 694, 0, 695, 
	0, 696, 0, 4, 5, 344, 709, 4, 
	0, 698, 0, 699, 0, 700, 0, 701, 
	0, 702, 0, 703, 0, 4, 5, 344, 
	709, 4, 0, 705, 706, 706, 0, 709, 
	0, 706, 709, 706, 706, 706, 706, 0, 
	3, 708, 708, 0, 4, 708, 5, 344, 
	709, 708, 4, 708, 708, 708, 0, 709, 
	1, 2, 709, 0, 709, 1, 2, 709, 
	0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 205, 0, 93, 205, 205, 107, 
	95, 95, 95, 95, 95, 107, 0, 0, 
	0, 0, 0, 1, 1, 107, 0, 107, 
	0, 0, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 57, 57, 
	57, 57, 57, 107, 0, 107, 0, 0, 
	107, 118, 13, 13, 15, 0, 0, 291, 
	91, 291, 291, 291, 107, 219, 219, 219, 
	219, 107, 0, 0, 121, 17, 17, 19, 
	0, 0, 0, 0, 0, 107, 0, 0, 
	107, 118, 13, 13, 15, 0, 0, 283, 
	89, 283, 283, 283, 107, 0, 0, 121, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 107, 118, 13, 13, 
	15, 0, 0, 259, 83, 259, 259, 259, 
	107, 0, 0, 121, 17, 17, 19, 0, 
	0, 0, 0, 193, 45, 45, 47, 0, 
	0, 304, 202, 304, 304, 0, 0, 304, 
	107, 215, 215, 215, 215, 107, 326, 239, 
	326, 326, 51, 51, 326, 107, 314, 235, 
	314, 314, 49, 49, 314, 107, 0, 0, 
	0, 0, 107, 112, 5, 5, 7, 0, 
	0, 267, 85, 267, 267, 267, 107, 0, 
	0, 115, 9, 9, 11, 0, 0, 0, 
	0, 0, 0, 79, 79, 79, 79, 79, 
	107, 118, 13, 13, 15, 0, 0, 243, 
	243, 243, 243, 107, 0, 0, 121, 17, 
	17, 19, 0, 0, 0, 0, 251, 251, 
	251, 0, 251, 0, 0, 0, 107, 0, 
	107, 0, 0, 107, 118, 13, 13, 15, 
	0, 0, 275, 87, 275, 275, 275, 107, 
	0, 0, 121, 17, 17, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 0, 107, 118, 
	13, 13, 15, 0, 0, 0, 107, 71, 
	71, 107, 0, 107, 0, 0, 121, 17, 
	17, 19, 0, 0, 0, 0, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 193, 45, 45, 47, 
	0, 0, 53, 0, 0, 107, 73, 73, 
	107, 199, 51, 51, 107, 196, 49, 49, 
	107, 0, 0, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 0, 107, 118, 13, 13, 15, 
	0, 0, 0, 107, 69, 69, 107, 0, 
	0, 121, 17, 17, 19, 0, 0, 0, 
	0, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 193, 45, 45, 47, 0, 0, 53, 
	53, 0, 0, 53, 107, 0, 0, 0, 
	107, 0, 0, 0, 0, 107, 112, 5, 
	5, 7, 0, 0, 0, 107, 75, 75, 
	107, 0, 0, 115, 9, 9, 11, 0, 
	0, 0, 0, 199, 199, 51, 51, 199, 
	107, 196, 196, 49, 49, 196, 107, 0, 
	0, 0, 0, 107, 0, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 65, 
	65, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 67, 67, 107, 0, 107, 0, 
	107, 0, 61, 61, 107, 0, 0, 107, 
	118, 13, 13, 15, 0, 0, 0, 107, 
	63, 63, 107, 0, 0, 121, 17, 17, 
	19, 0, 0, 0, 0, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 59, 
	59, 59, 59, 59, 107, 0, 107, 0, 
	107, 0, 107, 55, 55, 55, 55, 55, 
	107, 299, 109, 3, 3, 0, 299, 3, 
	299, 3, 0, 3, 299, 0, 0, 0, 
	107, 231, 231, 231, 231, 107, 0, 107, 
	0, 0, 107, 118, 13, 13, 15, 0, 
	0, 295, 91, 295, 295, 295, 107, 227, 
	227, 227, 227, 107, 0, 0, 121, 17, 
	17, 19, 0, 0, 0, 0, 0, 107, 
	0, 0, 107, 118, 13, 13, 15, 0, 
	0, 287, 89, 287, 287, 287, 107, 0, 
	0, 121, 17, 17, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 107, 118, 
	13, 13, 15, 0, 0, 263, 83, 263, 
	263, 263, 107, 0, 0, 121, 17, 17, 
	19, 0, 0, 0, 0, 193, 45, 45, 
	47, 0, 0, 309, 202, 309, 309, 0, 
	0, 309, 107, 223, 223, 223, 223, 107, 
	332, 239, 332, 332, 51, 51, 332, 107, 
	320, 235, 320, 320, 49, 49, 320, 107, 
	0, 0, 0, 0, 107, 112, 5, 5, 
	7, 0, 0, 271, 85, 271, 271, 271, 
	107, 0, 0, 115, 9, 9, 11, 0, 
	0, 0, 0, 0, 0, 79, 79, 79, 
	79, 79, 107, 118, 13, 13, 15, 0, 
	0, 247, 247, 247, 77, 247, 107, 211, 
	211, 211, 211, 107, 0, 0, 121, 17, 
	17, 19, 0, 0, 0, 0, 255, 255, 
	255, 81, 0, 255, 0, 0, 0, 107, 
	0, 107, 0, 0, 107, 118, 13, 13, 
	15, 0, 0, 279, 87, 279, 279, 279, 
	107, 0, 0, 121, 17, 17, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 0, 107, 
	118, 13, 13, 15, 0, 0, 0, 107, 
	71, 71, 107, 0, 107, 0, 0, 121, 
	17, 17, 19, 0, 0, 0, 0, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 193, 45, 45, 
	47, 0, 0, 53, 0, 0, 107, 73, 
	73, 107, 199, 51, 51, 107, 196, 49, 
	49, 107, 0, 0, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 0, 107, 118, 13, 13, 
	15, 0, 0, 0, 107, 69, 69, 107, 
	0, 0, 121, 17, 17, 19, 0, 0, 
	0, 0, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 193, 45, 45, 47, 0, 0, 
	53, 53, 0, 0, 53, 107, 0, 0, 
	0, 107, 0, 0, 0, 0, 107, 112, 
	5, 5, 7, 0, 0, 0, 107, 75, 
	75, 107, 0, 0, 115, 9, 9, 11, 
	0, 0, 0, 0, 199, 199, 51, 51, 
	199, 107, 196, 196, 49, 49, 196, 107, 
	0, 0, 0, 0, 107, 0, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	65, 65, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 67, 67, 107, 0, 107, 
	0, 107, 0, 61, 61, 107, 0, 0, 
	107, 118, 13, 13, 15, 0, 0, 0, 
	107, 63, 63, 107, 0, 0, 121, 17, 
	17, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 37, 107, 39, 0, 
	107, 99, 99, 99, 99, 99, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 33, 107, 35, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 130, 130, 130, 130, 130, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 154, 154, 154, 
	154, 154, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 160, 
	160, 160, 160, 160, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	166, 166, 166, 166, 166, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 172, 172, 172, 172, 172, 107, 
	0, 0, 107, 0, 107, 0, 107, 41, 
	107, 0, 0, 0, 0, 0, 0, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 37, 
	107, 39, 0, 107, 43, 43, 107, 97, 
	97, 97, 97, 97, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 33, 107, 35, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	127, 127, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	151, 151, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 157, 
	157, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 163, 163, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 169, 169, 107, 0, 
	107, 0, 107, 0, 107, 0, 0, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 25, 0, 0, 25, 107, 
	0, 107, 27, 27, 0, 107, 133, 133, 
	107, 29, 124, 124, 107, 0, 107, 31, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	21, 107, 0, 107, 0, 107, 23, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 25, 0, 0, 
	25, 107, 0, 107, 27, 27, 0, 107, 
	139, 139, 107, 29, 124, 124, 107, 0, 
	107, 31, 0, 107, 0, 107, 0, 107, 
	0, 107, 21, 107, 0, 107, 0, 107, 
	23, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	25, 0, 0, 25, 107, 0, 107, 27, 
	27, 0, 107, 175, 175, 107, 29, 124, 
	124, 107, 0, 107, 31, 0, 107, 0, 
	107, 0, 107, 0, 107, 21, 107, 0, 
	107, 0, 107, 23, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 25, 0, 0, 25, 107, 
	0, 107, 27, 27, 0, 107, 145, 145, 
	107, 29, 124, 124, 107, 0, 107, 31, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	21, 107, 0, 107, 0, 107, 23, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 181, 181, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 187, 187, 107, 0, 107, 0, 
	107, 0, 0, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 25, 
	0, 0, 25, 107, 0, 107, 27, 27, 
	0, 107, 136, 136, 136, 136, 136, 107, 
	29, 124, 124, 107, 0, 107, 31, 0, 
	107, 0, 107, 0, 107, 0, 107, 21, 
	107, 0, 107, 0, 107, 23, 107, 0, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 25, 0, 0, 25, 
	107, 0, 107, 27, 27, 0, 107, 142, 
	142, 142, 142, 142, 107, 29, 124, 124, 
	107, 0, 107, 31, 0, 107, 0, 107, 
	0, 107, 0, 107, 21, 107, 0, 107, 
	0, 107, 23, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 25, 0, 0, 25, 107, 0, 
	107, 27, 27, 0, 107, 178, 178, 178, 
	178, 178, 107, 29, 124, 124, 107, 0, 
	107, 31, 0, 107, 0, 107, 0, 107, 
	0, 107, 21, 107, 0, 107, 0, 107, 
	23, 107, 0, 107, 0, 107, 0, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	25, 0, 0, 25, 107, 0, 107, 27, 
	27, 0, 107, 148, 148, 148, 148, 148, 
	107, 29, 124, 124, 107, 0, 107, 31, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	21, 107, 0, 107, 0, 107, 23, 107, 
	0, 107, 0, 107, 0, 107, 0, 107, 
	0, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 184, 184, 184, 184, 184, 
	107, 0, 107, 0, 107, 0, 107, 0, 
	107, 0, 107, 0, 107, 190, 190, 190, 
	190, 190, 107, 103, 103, 103, 107, 105, 
	107, 0, 105, 0, 0, 0, 0, 107, 
	208, 208, 208, 107, 95, 0, 95, 95, 
	95, 0, 95, 0, 0, 0, 107, 0, 
	0, 0, 0, 107, 101, 101, 101, 101, 
	107, 0
};

static const short _hext_eof_actions[] = {
	0, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 0, 101
};

static const int hext_start = 709;
static const int hext_first_final = 709;
static const int hext_error = 0;

static const int hext_en_main = 709;


#line 51 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Convenience lambda to store the start of a token. Used within the hext
  // machine definition.
  auto tk_start = [this, &tok_begin, &tok_end](){
    tok_begin = this->p;
    tok_end = nullptr;
  };

  // Convenience lambda to complete a token. Used within the hext
  // machine definition.
  auto tk_stop = [this, &tok, &tok_begin, &tok_end](){
    assert(tok_begin);
    assert(this->p);
    tok_end = this->p;
    tok = std::string(
      tok_begin,
      static_cast<std::string::size_type>(std::distance(tok_begin, tok_end))
    );
  };

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1309 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1314 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ tk_stop(); pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ tk_stop(); pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ tk_stop(); pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 182 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(); }
	break;
	case 48:
#line 186 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(CasePipe::ToUpper); }
	break;
	case 49:
#line 188 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 50:
#line 190 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 51:
#line 192 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 52:
#line 195 "hext-machine.rl"
	{ pv.add_pipe<RegexReplacePipe>(*pv.regex, pv.literal_value); }
	break;
	case 53:
#line 201 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 54:
#line 203 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 55:
#line 204 "hext-machine.rl"
	{ tk_stop(); pv.cap_var = tok; }
	break;
	case 56:
#line 211 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 57:
#line 214 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 58:
#line 217 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 59:
#line 220 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 60:
#line 223 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 61:
#line 231 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 62:
#line 236 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 63:
#line 240 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 64:
#line 244 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 65:
#line 252 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 66:
#line 256 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 67:
#line 260 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 68:
#line 263 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 69:
#line 264 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 70:
#line 282 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 71:
#line 285 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 72:
#line 288 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 73:
#line 289 "hext-machine.rl"
	{ tk_stop(); set_open_tag_or_throw(tok); }
	break;
	case 74:
#line 292 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 75:
#line 295 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 76:
#line 303 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 77:
#line 310 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 78:
#line 311 "hext-machine.rl"
	{ tk_stop();
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 79:
#line 316 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1725 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 76:
#line 303 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 79:
#line 316 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1749 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 123 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

