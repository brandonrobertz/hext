// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/RegexPipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 65 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 64, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 2, 3, 61, 2, 4, 5, 2, 
	6, 7, 2, 8, 9, 2, 10, 11, 
	2, 16, 17, 2, 19, 35, 2, 19, 
	69, 2, 24, 35, 2, 24, 69, 2, 
	25, 35, 2, 25, 69, 2, 26, 35, 
	2, 26, 69, 2, 27, 35, 2, 27, 
	69, 2, 28, 35, 2, 28, 69, 2, 
	29, 35, 2, 29, 69, 2, 30, 35, 
	2, 30, 69, 2, 31, 35, 2, 31, 
	69, 2, 32, 35, 2, 32, 69, 2, 
	33, 35, 2, 33, 69, 2, 36, 37, 
	2, 38, 40, 2, 39, 40, 2, 40, 
	41, 2, 64, 66, 2, 65, 66, 3, 
	0, 58, 63, 3, 1, 56, 63, 3, 
	1, 57, 63, 3, 1, 59, 63, 3, 
	1, 60, 63, 3, 1, 62, 63, 3, 
	38, 40, 41, 3, 39, 40, 41, 3, 
	47, 55, 63, 3, 47, 58, 63, 3, 
	49, 55, 63, 3, 49, 58, 63, 3, 
	50, 57, 63, 3, 50, 60, 63, 3, 
	51, 57, 63, 3, 51, 60, 63, 3, 
	52, 57, 63, 3, 52, 60, 63, 3, 
	53, 57, 63, 3, 53, 60, 63, 3, 
	54, 57, 63, 3, 54, 60, 63, 4, 
	3, 61, 62, 63, 4, 40, 41, 56, 
	63, 4, 40, 41, 59, 63, 5, 38, 
	40, 41, 56, 63, 5, 38, 40, 41, 
	59, 63, 5, 39, 40, 41, 56, 63, 
	5, 39, 40, 41, 59, 63
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 43, 44, 46, 48, 50, 56, 61, 
	62, 64, 66, 67, 68, 70, 72, 74, 
	80, 81, 83, 85, 86, 87, 98, 100, 
	102, 107, 108, 110, 112, 113, 118, 129, 
	133, 135, 137, 143, 144, 146, 148, 149, 
	151, 153, 161, 166, 174, 182, 183, 185, 
	187, 189, 195, 196, 198, 200, 201, 202, 
	204, 206, 208, 214, 215, 217, 219, 220, 
	222, 223, 224, 225, 226, 227, 228, 230, 
	232, 235, 237, 240, 243, 244, 245, 246, 
	247, 249, 250, 251, 252, 253, 254, 255, 
	256, 257, 258, 264, 265, 266, 267, 273, 
	292, 297, 298, 300, 302, 304, 310, 315, 
	316, 318, 320, 321, 322, 324, 326, 328, 
	334, 335, 337, 339, 340, 359, 363, 365, 
	367, 373, 374, 376, 378, 379, 381, 383, 
	391, 396, 404, 412, 413, 415, 417, 419, 
	425, 426, 428, 430, 431, 433, 435, 441, 
	446, 447, 449, 451, 452, 458, 470, 471, 
	473, 475, 477, 483, 484, 486, 488, 489, 
	491, 492, 493, 494, 495, 496, 497, 499, 
	501, 504, 506, 507, 518, 521, 524, 525, 
	526, 527, 528, 530, 537, 538, 539, 540, 
	541, 542, 543, 544, 545, 546, 547, 548, 
	549, 550, 551, 552, 554, 557, 563, 564, 
	565, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 576, 579, 580, 581, 582, 583, 
	589, 590, 591, 592, 593, 594, 596, 597, 
	598, 599, 600, 606, 607, 608, 609, 610, 
	611, 612, 618, 619, 620, 621, 622, 624, 
	625, 626, 627, 628, 634, 635, 636, 637, 
	638, 639, 640, 646, 648, 649, 650, 651, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	666, 667, 668, 669, 670, 671, 672, 673, 
	675, 678, 680, 686, 687, 688, 689, 690, 
	691, 692, 693, 694, 695, 696, 697, 699, 
	702, 703, 704, 705, 706, 708, 709, 710, 
	711, 712, 713, 715, 716, 717, 718, 719, 
	721, 722, 723, 724, 725, 726, 727, 729, 
	730, 731, 732, 733, 735, 736, 737, 738, 
	739, 741, 742, 743, 744, 745, 746, 747, 
	749, 750, 751, 752, 755, 756, 757, 758, 
	759, 760, 765, 767, 771, 773, 776, 778, 
	781, 782, 783, 784, 785, 786, 787, 788, 
	789, 790, 791, 792, 794, 795, 796, 797, 
	798, 799, 804, 806, 810, 812, 815, 817, 
	820, 821, 822, 823, 824, 825, 826, 827, 
	828, 829, 830, 831, 832, 833, 834, 839, 
	841, 845, 847, 850, 852, 855, 856, 857, 
	858, 859, 860, 861, 862, 863, 864, 865, 
	866, 867, 868, 869, 874, 876, 880, 882, 
	885, 887, 890, 891, 892, 893, 894, 895, 
	896, 897, 898, 899, 900, 901, 903, 904, 
	905, 906, 907, 909, 910, 911, 912, 913, 
	914, 915, 917, 918, 919, 922, 923, 924, 
	925, 926, 927, 932, 934, 938, 944, 947, 
	949, 952, 953, 954, 955, 956, 957, 958, 
	959, 960, 961, 962, 963, 965, 966, 967, 
	968, 969, 970, 975, 977, 981, 987, 990, 
	992, 995, 996, 997, 998, 999, 1000, 1001, 
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 
	1014, 1016, 1020, 1026, 1029, 1031, 1034, 1035, 
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 
	1044, 1045, 1046, 1047, 1048, 1053, 1055, 1059, 
	1065, 1068, 1070, 1073, 1074, 1075, 1076, 1077, 
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 
	1087, 1088, 1089, 1090, 1096, 1097, 1098, 1099, 
	1100, 1101, 1102, 1108, 1113, 1114, 1123, 1128, 
	1142, 1147, 1152
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 45, 
	61, 94, 124, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 62, 34, 
	39, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 92, 34, 92, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 48, 57, 65, 90, 97, 
	122, 34, 39, 47, 61, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 114, 116, 101, 103, 
	101, 120, 40, 47, 47, 92, 47, 92, 
	41, 99, 105, 45, 124, 41, 99, 105, 
	41, 99, 105, 92, 114, 105, 109, 45, 
	124, 116, 114, 105, 112, 45, 116, 97, 
	103, 115, 36, 42, 45, 61, 94, 124, 
	101, 120, 116, 36, 42, 45, 61, 94, 
	124, 32, 33, 36, 42, 45, 47, 61, 
	62, 94, 95, 124, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 47, 62, 9, 
	13, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 32, 33, 36, 42, 
	45, 47, 61, 62, 94, 95, 124, 9, 
	13, 48, 57, 65, 90, 97, 122, 34, 
	39, 47, 61, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 47, 92, 47, 92, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	47, 62, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 92, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 34, 
	92, 34, 92, 32, 47, 62, 63, 9, 
	13, 32, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 63, 9, 13, 
	48, 57, 65, 90, 97, 122, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 114, 116, 101, 103, 101, 120, 40, 
	47, 47, 92, 47, 92, 41, 99, 105, 
	45, 124, 62, 34, 39, 95, 45, 46, 
	48, 57, 65, 90, 97, 122, 41, 99, 
	105, 41, 99, 105, 92, 114, 105, 109, 
	45, 124, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 111, 116, 
	116, 40, 58, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 41, 58, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 41, 58, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	32, 34, 35, 39, 60, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 3, 2, 2, 
	3, 1, 2, 2, 1, 3, 3, 4, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 6, 3, 6, 6, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 3, 3, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 1, 1, 1, 6, 11, 
	3, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 11, 4, 2, 2, 
	4, 1, 2, 2, 1, 2, 2, 6, 
	3, 6, 6, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 4, 3, 
	1, 2, 2, 1, 4, 4, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 1, 3, 3, 3, 1, 1, 
	1, 1, 2, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 1, 4, 2, 1, 1, 1, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 2, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 3, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 1, 4, 1, 1, 3, 1, 6, 
	3, 3, 6
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 4, 0, 0, 
	1, 0, 0, 0, 0, 1, 4, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	1, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 4, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 4, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 2, 0, 3, 2, 4, 
	1, 1, 5
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 53, 55, 58, 61, 64, 70, 75, 
	77, 80, 83, 85, 87, 90, 93, 96, 
	102, 104, 107, 110, 112, 114, 122, 125, 
	128, 133, 135, 138, 141, 143, 148, 156, 
	161, 164, 167, 173, 175, 178, 181, 183, 
	186, 189, 197, 202, 210, 218, 220, 223, 
	226, 229, 235, 237, 240, 243, 245, 247, 
	250, 253, 256, 262, 264, 267, 270, 272, 
	275, 277, 279, 281, 283, 285, 287, 290, 
	293, 297, 300, 304, 308, 310, 312, 314, 
	316, 319, 321, 323, 325, 327, 329, 331, 
	333, 335, 337, 344, 346, 348, 350, 357, 
	373, 378, 380, 383, 386, 389, 395, 400, 
	402, 405, 408, 410, 412, 415, 418, 421, 
	427, 429, 432, 435, 437, 453, 458, 461, 
	464, 470, 472, 475, 478, 480, 483, 486, 
	494, 499, 507, 515, 517, 520, 523, 526, 
	532, 534, 537, 540, 542, 545, 548, 554, 
	559, 561, 564, 567, 569, 575, 584, 586, 
	589, 592, 595, 601, 603, 606, 609, 611, 
	614, 616, 618, 620, 622, 624, 626, 629, 
	632, 636, 639, 641, 649, 653, 657, 659, 
	661, 663, 665, 668, 676, 678, 680, 682, 
	684, 686, 688, 690, 692, 694, 696, 698, 
	700, 702, 704, 706, 708, 711, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 741, 744, 746, 748, 750, 752, 
	758, 760, 762, 764, 766, 768, 771, 773, 
	775, 777, 779, 785, 787, 789, 791, 793, 
	795, 797, 803, 805, 807, 809, 811, 814, 
	816, 818, 820, 822, 828, 830, 832, 834, 
	836, 838, 840, 846, 849, 851, 853, 855, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 898, 901, 907, 909, 911, 913, 915, 
	917, 919, 921, 923, 925, 927, 929, 931, 
	934, 936, 938, 940, 942, 945, 947, 949, 
	951, 953, 955, 958, 960, 962, 964, 966, 
	969, 971, 973, 975, 977, 979, 981, 984, 
	986, 988, 990, 992, 995, 997, 999, 1001, 
	1003, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 
	1021, 1023, 1025, 1027, 1031, 1033, 1035, 1037, 
	1039, 1041, 1046, 1048, 1052, 1055, 1059, 1061, 
	1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 
	1080, 1082, 1084, 1086, 1089, 1091, 1093, 1095, 
	1097, 1099, 1104, 1106, 1110, 1113, 1117, 1119, 
	1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 
	1138, 1140, 1142, 1144, 1146, 1148, 1150, 1155, 
	1157, 1161, 1164, 1168, 1170, 1173, 1175, 1177, 
	1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 
	1195, 1197, 1199, 1201, 1206, 1208, 1212, 1215, 
	1219, 1221, 1224, 1226, 1228, 1230, 1232, 1234, 
	1236, 1238, 1240, 1242, 1244, 1246, 1249, 1251, 
	1253, 1255, 1257, 1260, 1262, 1264, 1266, 1268, 
	1270, 1272, 1275, 1277, 1279, 1283, 1285, 1287, 
	1289, 1291, 1293, 1298, 1300, 1304, 1310, 1314, 
	1316, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 
	1333, 1335, 1337, 1339, 1341, 1344, 1346, 1348, 
	1350, 1352, 1354, 1359, 1361, 1365, 1371, 1375, 
	1377, 1380, 1382, 1384, 1386, 1388, 1390, 1392, 
	1394, 1396, 1398, 1400, 1402, 1404, 1406, 1408, 
	1413, 1415, 1419, 1425, 1429, 1431, 1434, 1436, 
	1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 
	1454, 1456, 1458, 1460, 1462, 1467, 1469, 1473, 
	1479, 1483, 1485, 1488, 1490, 1492, 1494, 1496, 
	1498, 1500, 1502, 1504, 1506, 1508, 1510, 1513, 
	1515, 1517, 1519, 1521, 1527, 1529, 1531, 1533, 
	1535, 1537, 1539, 1545, 1549, 1551, 1558, 1562, 
	1573, 1578, 1583
};

static const short _hext_trans_targs[] = {
	560, 1, 3, 555, 558, 559, 559, 0, 
	4, 5, 195, 560, 4, 0, 4, 5, 
	560, 6, 4, 111, 111, 0, 561, 0, 
	7, 97, 107, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 47, 70, 79, 0, 18, 0, 19, 
	24, 0, 21, 23, 20, 21, 23, 20, 
	4, 22, 5, 560, 4, 0, 4, 5, 
	560, 4, 0, 23, 20, 21, 26, 25, 
	21, 26, 25, 26, 25, 28, 0, 29, 
	33, 0, 31, 32, 30, 31, 32, 30, 
	4, 22, 5, 560, 4, 0, 32, 30, 
	31, 35, 34, 31, 35, 34, 35, 34, 
	37, 0, 38, 42, 45, 45, 46, 46, 
	46, 0, 40, 41, 39, 40, 41, 39, 
	4, 5, 560, 4, 0, 41, 39, 40, 
	44, 43, 40, 44, 43, 44, 43, 4, 
	5, 560, 4, 0, 4, 5, 560, 4, 
	46, 46, 46, 0, 48, 52, 55, 62, 
	0, 50, 51, 49, 50, 51, 49, 4, 
	22, 5, 560, 4, 0, 51, 49, 50, 
	54, 53, 50, 54, 53, 54, 53, 57, 
	61, 56, 57, 61, 56, 4, 58, 5, 
	560, 59, 60, 4, 0, 4, 5, 560, 
	4, 0, 4, 58, 5, 560, 59, 60, 
	4, 0, 4, 58, 5, 560, 59, 60, 
	4, 0, 61, 56, 63, 67, 0, 65, 
	66, 64, 65, 66, 64, 4, 22, 5, 
	560, 4, 0, 66, 64, 65, 69, 68, 
	65, 69, 68, 69, 68, 71, 0, 72, 
	76, 0, 74, 75, 73, 74, 75, 73, 
	4, 22, 5, 560, 4, 0, 75, 73, 
	74, 78, 77, 74, 78, 77, 78, 77, 
	80, 93, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 88, 
	92, 87, 88, 92, 87, 89, 90, 91, 
	0, 36, 79, 0, 89, 90, 91, 0, 
	89, 90, 91, 0, 92, 87, 94, 0, 
	95, 0, 96, 0, 36, 79, 0, 98, 
	0, 99, 0, 100, 0, 101, 0, 102, 
	0, 103, 0, 104, 0, 105, 0, 106, 
	0, 17, 27, 36, 47, 70, 79, 0, 
	108, 0, 109, 0, 110, 0, 17, 27, 
	36, 47, 70, 79, 0, 4, 112, 113, 
	123, 132, 5, 133, 560, 166, 111, 175, 
	4, 111, 111, 111, 0, 4, 5, 560, 
	4, 0, 114, 0, 115, 120, 0, 117, 
	119, 116, 117, 119, 116, 4, 118, 5, 
	560, 4, 0, 4, 5, 560, 4, 0, 
	119, 116, 117, 122, 121, 117, 122, 121, 
	122, 121, 124, 0, 125, 129, 0, 127, 
	128, 126, 127, 128, 126, 4, 118, 5, 
	560, 4, 0, 128, 126, 127, 131, 130, 
	127, 131, 130, 131, 130, 4, 112, 113, 
	123, 132, 5, 133, 562, 166, 111, 175, 
	4, 111, 111, 111, 0, 134, 138, 141, 
	148, 0, 136, 137, 135, 136, 137, 135, 
	4, 118, 5, 560, 4, 0, 137, 135, 
	136, 140, 139, 136, 140, 139, 140, 139, 
	143, 147, 142, 143, 147, 142, 4, 144, 
	5, 560, 145, 146, 4, 0, 4, 5, 
	560, 4, 0, 4, 144, 5, 560, 145, 
	146, 4, 0, 4, 144, 5, 560, 145, 
	146, 4, 0, 147, 142, 149, 153, 0, 
	151, 152, 150, 151, 152, 150, 4, 118, 
	5, 560, 4, 0, 152, 150, 151, 155, 
	154, 151, 155, 154, 155, 154, 158, 160, 
	157, 158, 160, 157, 4, 5, 560, 159, 
	4, 0, 4, 5, 560, 4, 0, 160, 
	157, 158, 163, 162, 158, 163, 162, 163, 
	162, 4, 5, 560, 159, 4, 0, 4, 
	5, 560, 159, 4, 165, 165, 165, 0, 
	167, 0, 168, 172, 0, 170, 171, 169, 
	170, 171, 169, 4, 118, 5, 560, 4, 
	0, 171, 169, 170, 174, 173, 170, 174, 
	173, 174, 173, 176, 191, 0, 177, 0, 
	178, 0, 179, 0, 180, 0, 181, 0, 
	182, 0, 184, 190, 183, 184, 190, 183, 
	185, 188, 189, 0, 186, 175, 0, 187, 
	0, 156, 161, 164, 164, 165, 165, 165, 
	0, 185, 188, 189, 0, 185, 188, 189, 
	0, 190, 183, 192, 0, 193, 0, 194, 
	0, 186, 175, 0, 196, 214, 227, 232, 
	250, 267, 538, 0, 197, 0, 198, 0, 
	199, 0, 200, 0, 201, 0, 202, 0, 
	203, 0, 204, 0, 205, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 212, 0, 4, 
	5, 195, 560, 4, 0, 215, 0, 216, 
	0, 217, 0, 218, 0, 219, 0, 220, 
	0, 221, 0, 222, 0, 223, 0, 224, 
	0, 225, 0, 226, 0, 213, 226, 0, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	4, 5, 195, 560, 4, 0, 233, 0, 
	234, 0, 235, 0, 236, 0, 237, 0, 
	238, 243, 0, 239, 0, 240, 0, 241, 
	0, 242, 0, 4, 5, 195, 560, 4, 
	0, 244, 0, 245, 0, 246, 0, 247, 
	0, 248, 0, 249, 0, 4, 5, 195, 
	560, 4, 0, 251, 0, 252, 0, 253, 
	0, 254, 0, 255, 260, 0, 256, 0, 
	257, 0, 258, 0, 259, 0, 4, 5, 
	195, 560, 4, 0, 261, 0, 262, 0, 
	263, 0, 264, 0, 265, 0, 266, 0, 
	4, 5, 195, 560, 4, 0, 268, 450, 
	0, 269, 0, 270, 0, 271, 0, 272, 
	291, 304, 309, 327, 344, 433, 0, 273, 
	0, 274, 0, 275, 0, 276, 0, 277, 
	0, 278, 0, 279, 0, 280, 0, 281, 
	0, 282, 0, 283, 0, 284, 0, 285, 
	0, 286, 0, 287, 0, 288, 0, 289, 
	288, 0, 290, 271, 0, 4, 5, 195, 
	560, 4, 0, 292, 0, 293, 0, 294, 
	0, 295, 0, 296, 0, 297, 0, 298, 
	0, 299, 0, 300, 0, 301, 0, 302, 
	0, 303, 0, 289, 303, 0, 305, 0, 
	306, 0, 307, 0, 308, 0, 290, 271, 
	0, 310, 0, 311, 0, 312, 0, 313, 
	0, 314, 0, 315, 320, 0, 316, 0, 
	317, 0, 318, 0, 319, 0, 290, 271, 
	0, 321, 0, 322, 0, 323, 0, 324, 
	0, 325, 0, 326, 0, 290, 271, 0, 
	328, 0, 329, 0, 330, 0, 331, 0, 
	332, 337, 0, 333, 0, 334, 0, 335, 
	0, 336, 0, 290, 271, 0, 338, 0, 
	339, 0, 340, 0, 341, 0, 342, 0, 
	343, 0, 290, 271, 0, 345, 0, 346, 
	0, 347, 0, 348, 367, 412, 0, 349, 
	0, 350, 0, 351, 0, 352, 0, 353, 
	0, 354, 360, 364, 355, 0, 355, 0, 
	356, 357, 355, 0, 290, 271, 0, 356, 
	358, 358, 0, 359, 0, 356, 359, 0, 
	361, 0, 362, 0, 363, 0, 356, 0, 
	365, 0, 366, 0, 356, 0, 368, 0, 
	369, 0, 370, 0, 371, 0, 372, 391, 
	0, 373, 0, 374, 0, 375, 0, 376, 
	0, 377, 0, 378, 384, 388, 379, 0, 
	379, 0, 380, 381, 379, 0, 290, 271, 
	0, 380, 382, 382, 0, 383, 0, 380, 
	383, 0, 385, 0, 386, 0, 387, 0, 
	380, 0, 389, 0, 390, 0, 380, 0, 
	392, 0, 393, 0, 394, 0, 395, 0, 
	396, 0, 397, 0, 398, 0, 399, 405, 
	409, 400, 0, 400, 0, 401, 402, 400, 
	0, 290, 271, 0, 401, 403, 403, 0, 
	404, 0, 401, 404, 0, 406, 0, 407, 
	0, 408, 0, 401, 0, 410, 0, 411, 
	0, 401, 0, 413, 0, 414, 0, 415, 
	0, 416, 0, 417, 0, 418, 0, 419, 
	0, 420, 426, 430, 421, 0, 421, 0, 
	422, 423, 421, 0, 290, 271, 0, 422, 
	424, 424, 0, 425, 0, 422, 425, 0, 
	427, 0, 428, 0, 429, 0, 422, 0, 
	431, 0, 432, 0, 422, 0, 434, 0, 
	435, 0, 436, 0, 437, 0, 438, 443, 
	0, 439, 0, 440, 0, 441, 0, 442, 
	0, 290, 271, 0, 444, 0, 445, 0, 
	446, 0, 447, 0, 448, 0, 449, 0, 
	290, 271, 0, 451, 0, 452, 0, 453, 
	472, 517, 0, 454, 0, 455, 0, 456, 
	0, 457, 0, 458, 0, 459, 465, 469, 
	460, 0, 460, 0, 461, 462, 460, 0, 
	4, 5, 195, 560, 4, 0, 461, 463, 
	463, 0, 464, 0, 461, 464, 0, 466, 
	0, 467, 0, 468, 0, 461, 0, 470, 
	0, 471, 0, 461, 0, 473, 0, 474, 
	0, 475, 0, 476, 0, 477, 496, 0, 
	478, 0, 479, 0, 480, 0, 481, 0, 
	482, 0, 483, 489, 493, 484, 0, 484, 
	0, 485, 486, 484, 0, 4, 5, 195, 
	560, 4, 0, 485, 487, 487, 0, 488, 
	0, 485, 488, 0, 490, 0, 491, 0, 
	492, 0, 485, 0, 494, 0, 495, 0, 
	485, 0, 497, 0, 498, 0, 499, 0, 
	500, 0, 501, 0, 502, 0, 503, 0, 
	504, 510, 514, 505, 0, 505, 0, 506, 
	507, 505, 0, 4, 5, 195, 560, 4, 
	0, 506, 508, 508, 0, 509, 0, 506, 
	509, 0, 511, 0, 512, 0, 513, 0, 
	506, 0, 515, 0, 516, 0, 506, 0, 
	518, 0, 519, 0, 520, 0, 521, 0, 
	522, 0, 523, 0, 524, 0, 525, 531, 
	535, 526, 0, 526, 0, 527, 528, 526, 
	0, 4, 5, 195, 560, 4, 0, 527, 
	529, 529, 0, 530, 0, 527, 530, 0, 
	532, 0, 533, 0, 534, 0, 527, 0, 
	536, 0, 537, 0, 527, 0, 539, 0, 
	540, 0, 541, 0, 542, 0, 543, 548, 
	0, 544, 0, 545, 0, 546, 0, 547, 
	0, 4, 5, 195, 560, 4, 0, 549, 
	0, 550, 0, 551, 0, 552, 0, 553, 
	0, 554, 0, 4, 5, 195, 560, 4, 
	0, 556, 557, 557, 0, 560, 0, 557, 
	560, 557, 557, 557, 557, 0, 3, 559, 
	559, 0, 4, 559, 5, 195, 560, 559, 
	4, 559, 559, 559, 0, 560, 1, 2, 
	560, 0, 560, 1, 2, 560, 0, 560, 
	156, 1, 161, 2, 164, 560, 164, 165, 
	165, 165, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 193, 0, 81, 193, 193, 95, 
	83, 83, 83, 83, 83, 95, 0, 0, 
	0, 0, 0, 1, 1, 95, 0, 95, 
	0, 0, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 57, 57, 
	57, 57, 57, 57, 95, 0, 95, 0, 
	0, 95, 100, 5, 5, 7, 0, 0, 
	279, 79, 279, 279, 279, 95, 207, 207, 
	207, 207, 95, 0, 0, 103, 9, 9, 
	11, 0, 0, 0, 0, 0, 95, 0, 
	0, 95, 100, 5, 5, 7, 0, 0, 
	271, 77, 271, 271, 271, 95, 0, 0, 
	103, 9, 9, 11, 0, 0, 0, 0, 
	0, 95, 0, 0, 67, 67, 67, 67, 
	67, 95, 106, 13, 13, 15, 0, 0, 
	231, 231, 231, 231, 95, 0, 0, 109, 
	17, 17, 19, 0, 0, 0, 0, 239, 
	239, 239, 239, 95, 239, 239, 239, 239, 
	0, 0, 0, 95, 0, 0, 0, 0, 
	95, 100, 5, 5, 7, 0, 0, 247, 
	71, 247, 247, 247, 95, 0, 0, 103, 
	9, 9, 11, 0, 0, 0, 0, 181, 
	45, 45, 47, 0, 0, 292, 190, 292, 
	292, 0, 0, 292, 95, 203, 203, 203, 
	203, 95, 314, 227, 314, 314, 51, 51, 
	314, 95, 302, 223, 302, 302, 49, 49, 
	302, 95, 0, 0, 0, 0, 95, 100, 
	5, 5, 7, 0, 0, 255, 73, 255, 
	255, 255, 95, 0, 0, 103, 9, 9, 
	11, 0, 0, 0, 0, 0, 95, 0, 
	0, 95, 100, 5, 5, 7, 0, 0, 
	263, 75, 263, 263, 263, 95, 0, 0, 
	103, 9, 9, 11, 0, 0, 0, 0, 
	0, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 181, 
	45, 45, 47, 0, 0, 53, 0, 0, 
	95, 63, 63, 95, 187, 51, 51, 95, 
	184, 49, 49, 95, 0, 0, 0, 95, 
	0, 95, 0, 95, 61, 61, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 59, 59, 59, 59, 59, 59, 95, 
	0, 95, 0, 95, 0, 95, 55, 55, 
	55, 55, 55, 55, 95, 287, 97, 3, 
	3, 3, 287, 3, 287, 3, 0, 3, 
	287, 0, 0, 0, 95, 219, 219, 219, 
	219, 95, 0, 95, 0, 0, 95, 100, 
	5, 5, 7, 0, 0, 283, 79, 283, 
	283, 283, 95, 215, 215, 215, 215, 95, 
	0, 0, 103, 9, 9, 11, 0, 0, 
	0, 0, 0, 95, 0, 0, 95, 100, 
	5, 5, 7, 0, 0, 275, 77, 275, 
	275, 275, 95, 0, 0, 103, 9, 9, 
	11, 0, 0, 0, 0, 287, 97, 3, 
	3, 3, 287, 3, 287, 3, 0, 3, 
	287, 0, 0, 0, 95, 0, 0, 0, 
	0, 95, 100, 5, 5, 7, 0, 0, 
	251, 71, 251, 251, 251, 95, 0, 0, 
	103, 9, 9, 11, 0, 0, 0, 0, 
	181, 45, 45, 47, 0, 0, 297, 190, 
	297, 297, 0, 0, 297, 95, 211, 211, 
	211, 211, 95, 320, 227, 320, 320, 51, 
	51, 320, 95, 308, 223, 308, 308, 49, 
	49, 308, 95, 0, 0, 0, 0, 95, 
	100, 5, 5, 7, 0, 0, 259, 73, 
	259, 259, 259, 95, 0, 0, 103, 9, 
	9, 11, 0, 0, 0, 0, 106, 13, 
	13, 15, 0, 0, 235, 235, 235, 65, 
	235, 95, 199, 199, 199, 199, 95, 0, 
	0, 109, 17, 17, 19, 0, 0, 0, 
	0, 243, 243, 243, 69, 243, 95, 243, 
	243, 243, 69, 243, 0, 0, 0, 95, 
	0, 95, 0, 0, 95, 100, 5, 5, 
	7, 0, 0, 267, 75, 267, 267, 267, 
	95, 0, 0, 103, 9, 9, 11, 0, 
	0, 0, 0, 0, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 181, 45, 45, 47, 0, 0, 
	53, 0, 0, 95, 63, 63, 95, 0, 
	95, 0, 0, 67, 67, 67, 67, 67, 
	95, 187, 51, 51, 95, 184, 49, 49, 
	95, 0, 0, 0, 95, 0, 95, 0, 
	95, 61, 61, 95, 0, 0, 0, 0, 
	0, 0, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 37, 95, 39, 0, 95, 87, 
	87, 87, 87, 87, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 33, 95, 35, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	118, 118, 118, 118, 118, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 142, 142, 142, 142, 142, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 148, 148, 148, 
	148, 148, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 154, 154, 
	154, 154, 154, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	160, 160, 160, 160, 160, 95, 0, 0, 
	95, 0, 95, 0, 95, 41, 95, 0, 
	0, 0, 0, 0, 0, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 37, 95, 39, 
	0, 95, 43, 43, 95, 85, 85, 85, 
	85, 85, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 33, 95, 35, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 115, 115, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 139, 139, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 145, 145, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 151, 151, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 157, 157, 95, 0, 95, 0, 
	95, 0, 95, 0, 0, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 25, 0, 0, 25, 95, 0, 95, 
	27, 27, 0, 95, 121, 121, 95, 29, 
	112, 112, 95, 0, 95, 31, 0, 95, 
	0, 95, 0, 95, 0, 95, 21, 95, 
	0, 95, 0, 95, 23, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 25, 0, 0, 25, 95, 
	0, 95, 27, 27, 0, 95, 127, 127, 
	95, 29, 112, 112, 95, 0, 95, 31, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	21, 95, 0, 95, 0, 95, 23, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 25, 0, 
	0, 25, 95, 0, 95, 27, 27, 0, 
	95, 163, 163, 95, 29, 112, 112, 95, 
	0, 95, 31, 0, 95, 0, 95, 0, 
	95, 0, 95, 21, 95, 0, 95, 0, 
	95, 23, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 25, 0, 0, 25, 95, 0, 95, 
	27, 27, 0, 95, 133, 133, 95, 29, 
	112, 112, 95, 0, 95, 31, 0, 95, 
	0, 95, 0, 95, 0, 95, 21, 95, 
	0, 95, 0, 95, 23, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 169, 169, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	175, 175, 95, 0, 95, 0, 95, 0, 
	0, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 25, 0, 0, 
	25, 95, 0, 95, 27, 27, 0, 95, 
	124, 124, 124, 124, 124, 95, 29, 112, 
	112, 95, 0, 95, 31, 0, 95, 0, 
	95, 0, 95, 0, 95, 21, 95, 0, 
	95, 0, 95, 23, 95, 0, 95, 0, 
	95, 0, 95, 0, 95, 0, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 25, 0, 0, 25, 95, 0, 
	95, 27, 27, 0, 95, 130, 130, 130, 
	130, 130, 95, 29, 112, 112, 95, 0, 
	95, 31, 0, 95, 0, 95, 0, 95, 
	0, 95, 21, 95, 0, 95, 0, 95, 
	23, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	25, 0, 0, 25, 95, 0, 95, 27, 
	27, 0, 95, 166, 166, 166, 166, 166, 
	95, 29, 112, 112, 95, 0, 95, 31, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	21, 95, 0, 95, 0, 95, 23, 95, 
	0, 95, 0, 95, 0, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 25, 0, 
	0, 25, 95, 0, 95, 27, 27, 0, 
	95, 136, 136, 136, 136, 136, 95, 29, 
	112, 112, 95, 0, 95, 31, 0, 95, 
	0, 95, 0, 95, 0, 95, 21, 95, 
	0, 95, 0, 95, 23, 95, 0, 95, 
	0, 95, 0, 95, 0, 95, 0, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 172, 172, 172, 172, 172, 95, 0, 
	95, 0, 95, 0, 95, 0, 95, 0, 
	95, 0, 95, 178, 178, 178, 178, 178, 
	95, 91, 91, 91, 95, 93, 95, 0, 
	93, 0, 0, 0, 0, 95, 196, 196, 
	196, 95, 83, 0, 83, 83, 83, 0, 
	83, 0, 0, 0, 95, 0, 0, 0, 
	0, 95, 89, 89, 89, 89, 95, 0, 
	0, 0, 0, 0, 67, 0, 67, 67, 
	67, 67, 95, 0
};

static const short _hext_eof_actions[] = {
	0, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	0, 89, 0
};

static const int hext_start = 560;
static const int hext_first_final = 560;
static const int hext_error = 0;

static const int hext_en_main = 560;


#line 65 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1095 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1100 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ TK_START; }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ TK_START; }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ TK_START; }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ TK_START; }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ TK_START; }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ TK_START; }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 182 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 47:
#line 188 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 48:
#line 190 "hext-machine.rl"
	{ TK_START; }
	break;
	case 49:
#line 191 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 50:
#line 198 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 51:
#line 201 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 52:
#line 204 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 53:
#line 207 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 54:
#line 210 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 55:
#line 218 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 56:
#line 223 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 57:
#line 227 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 58:
#line 231 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 59:
#line 239 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 60:
#line 243 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 61:
#line 247 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 62:
#line 250 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 63:
#line 251 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 64:
#line 269 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 65:
#line 272 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 66:
#line 275 "hext-machine.rl"
	{ TK_START; }
	break;
	case 67:
#line 276 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 68:
#line 279 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 69:
#line 282 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 70:
#line 290 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 71:
#line 297 "hext-machine.rl"
	{ TK_START; }
	break;
	case 72:
#line 298 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 73:
#line 303 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1487 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 70:
#line 290 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 73:
#line 303 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1511 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 120 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

