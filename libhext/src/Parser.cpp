// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
// Copyright 2015-2017 Thomas Trapp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/CasePipe.h"
#include "hext/ChildCountMatch.h"
#include "hext/CollapseWsPipe.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexReplacePipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 66 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 61, 1, 
	62, 1, 63, 1, 64, 1, 65, 1, 
	75, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 2, 
	3, 72, 2, 4, 5, 2, 6, 7, 
	2, 8, 9, 2, 10, 11, 2, 16, 
	17, 2, 19, 35, 2, 19, 80, 2, 
	24, 35, 2, 24, 80, 2, 25, 35, 
	2, 25, 80, 2, 26, 35, 2, 26, 
	80, 2, 27, 35, 2, 27, 80, 2, 
	28, 35, 2, 28, 80, 2, 29, 35, 
	2, 29, 80, 2, 30, 35, 2, 30, 
	80, 2, 31, 35, 2, 31, 80, 2, 
	32, 35, 2, 32, 80, 2, 33, 35, 
	2, 33, 80, 2, 36, 37, 2, 38, 
	39, 2, 40, 41, 2, 42, 44, 2, 
	43, 44, 2, 44, 45, 2, 75, 77, 
	2, 76, 77, 3, 0, 69, 74, 3, 
	1, 67, 74, 3, 1, 68, 74, 3, 
	1, 70, 74, 3, 1, 71, 74, 3, 
	1, 73, 74, 3, 42, 44, 45, 3, 
	43, 44, 45, 3, 58, 66, 74, 3, 
	58, 69, 74, 3, 60, 66, 74, 3, 
	60, 69, 74, 3, 61, 68, 74, 3, 
	61, 71, 74, 3, 62, 68, 74, 3, 
	62, 71, 74, 3, 63, 68, 74, 3, 
	63, 71, 74, 3, 64, 68, 74, 3, 
	64, 71, 74, 3, 65, 68, 74, 3, 
	65, 71, 74, 4, 3, 72, 73, 74, 
	4, 44, 45, 67, 74, 4, 44, 45, 
	70, 74, 5, 42, 44, 45, 67, 74, 
	5, 42, 44, 45, 70, 74, 5, 43, 
	44, 45, 67, 74, 5, 43, 44, 45, 
	70, 74
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 102, 104, 106, 
	111, 112, 114, 116, 117, 129, 142, 155, 
	168, 181, 194, 207, 209, 211, 213, 214, 
	215, 216, 218, 220, 221, 234, 247, 260, 
	273, 286, 299, 312, 325, 338, 351, 364, 
	377, 390, 403, 416, 429, 432, 434, 436, 
	439, 440, 443, 446, 447, 449, 451, 452, 
	454, 456, 457, 470, 483, 496, 509, 522, 
	535, 548, 550, 552, 554, 555, 556, 557, 
	559, 561, 562, 575, 588, 601, 614, 627, 
	640, 653, 656, 658, 660, 666, 670, 675, 
	677, 679, 680, 681, 682, 684, 686, 687, 
	693, 699, 700, 702, 704, 705, 707, 709, 
	710, 724, 738, 751, 764, 777, 790, 803, 
	816, 829, 842, 855, 868, 881, 894, 908, 
	910, 912, 914, 915, 916, 917, 919, 921, 
	922, 926, 928, 930, 936, 937, 939, 941, 
	942, 944, 946, 948, 954, 955, 957, 959, 
	960, 963, 965, 967, 975, 980, 988, 996, 
	997, 999, 1001, 1002, 1004, 1006, 1007, 1008, 
	1010, 1012, 1014, 1020, 1021, 1023, 1025, 1026, 
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 
	1035, 1040, 1041, 1042, 1043, 1048, 1067, 1072, 
	1073, 1075, 1077, 1079, 1085, 1090, 1091, 1093, 
	1095, 1096, 1097, 1099, 1101, 1103, 1109, 1110, 
	1112, 1114, 1115, 1132, 1134, 1136, 1142, 1147, 
	1148, 1150, 1152, 1153, 1166, 1180, 1194, 1208, 
	1222, 1236, 1250, 1252, 1254, 1256, 1257, 1258, 
	1259, 1261, 1263, 1264, 1278, 1292, 1306, 1320, 
	1334, 1348, 1362, 1376, 1390, 1404, 1418, 1432, 
	1446, 1460, 1474, 1488, 1491, 1493, 1495, 1498, 
	1499, 1502, 1505, 1506, 1508, 1510, 1511, 1513, 
	1515, 1516, 1530, 1544, 1558, 1572, 1586, 1600, 
	1614, 1616, 1618, 1620, 1621, 1622, 1623, 1625, 
	1627, 1628, 1642, 1656, 1670, 1684, 1698, 1712, 
	1726, 1729, 1731, 1733, 1739, 1743, 1748, 1750, 
	1752, 1753, 1754, 1755, 1757, 1759, 1760, 1766, 
	1772, 1773, 1775, 1777, 1778, 1780, 1782, 1783, 
	1798, 1813, 1827, 1841, 1855, 1869, 1883, 1897, 
	1911, 1925, 1939, 1953, 1967, 1981, 1996, 1998, 
	2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 
	2014, 2016, 2018, 2024, 2025, 2027, 2029, 2030, 
	2032, 2034, 2036, 2042, 2043, 2045, 2047, 2048, 
	2051, 2053, 2055, 2063, 2068, 2076, 2084, 2085, 
	2087, 2089, 2090, 2092, 2094, 2095, 2096, 2098, 
	2100, 2102, 2108, 2109, 2111, 2113, 2114, 2121, 
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2138, 
	2141, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 
	2154, 2155, 2156, 2157, 2158, 2160, 2163, 2164, 
	2165, 2166, 2167, 2173, 2174, 2175, 2176, 2177, 
	2178, 2180, 2181, 2182, 2183, 2184, 2190, 2191, 
	2192, 2193, 2194, 2195, 2196, 2202, 2203, 2204, 
	2205, 2206, 2208, 2209, 2210, 2211, 2212, 2218, 
	2219, 2220, 2221, 2222, 2223, 2224, 2230, 2232, 
	2233, 2234, 2235, 2242, 2243, 2244, 2245, 2246, 
	2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 
	2255, 2256, 2257, 2259, 2262, 2264, 2270, 2271, 
	2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 
	2280, 2281, 2283, 2286, 2287, 2288, 2289, 2290, 
	2292, 2293, 2294, 2295, 2296, 2297, 2299, 2300, 
	2301, 2302, 2303, 2305, 2306, 2307, 2308, 2309, 
	2310, 2311, 2313, 2314, 2315, 2316, 2317, 2319, 
	2320, 2321, 2322, 2323, 2325, 2326, 2327, 2328, 
	2329, 2330, 2331, 2333, 2334, 2335, 2336, 2339, 
	2340, 2341, 2342, 2343, 2344, 2349, 2351, 2355, 
	2357, 2360, 2362, 2365, 2366, 2367, 2368, 2369, 
	2370, 2371, 2372, 2373, 2374, 2375, 2376, 2378, 
	2379, 2380, 2381, 2382, 2383, 2388, 2390, 2394, 
	2396, 2399, 2401, 2404, 2405, 2406, 2407, 2408, 
	2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 
	2417, 2418, 2423, 2425, 2429, 2431, 2434, 2436, 
	2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 
	2447, 2448, 2449, 2450, 2451, 2452, 2453, 2458, 
	2460, 2464, 2466, 2469, 2471, 2474, 2475, 2476, 
	2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 
	2485, 2487, 2488, 2489, 2490, 2491, 2493, 2494, 
	2495, 2496, 2497, 2498, 2499, 2501, 2502, 2503, 
	2506, 2507, 2508, 2509, 2510, 2511, 2516, 2518, 
	2522, 2528, 2531, 2533, 2536, 2537, 2538, 2539, 
	2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 
	2549, 2550, 2551, 2552, 2553, 2554, 2559, 2561, 
	2565, 2571, 2574, 2576, 2579, 2580, 2581, 2582, 
	2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 
	2591, 2592, 2593, 2598, 2600, 2604, 2610, 2613, 
	2615, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 
	2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 
	2637, 2639, 2643, 2649, 2652, 2654, 2657, 2658, 
	2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 
	2667, 2668, 2670, 2671, 2672, 2673, 2674, 2680, 
	2681, 2682, 2683, 2684, 2685, 2686, 2692, 2697, 
	2698, 2707, 2712, 2726, 2731
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 58, 
	61, 94, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 95, 
	97, 99, 102, 112, 114, 116, 45, 46, 
	48, 57, 65, 90, 98, 122, 34, 92, 
	34, 92, 32, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 112, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 110, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 100, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 40, 47, 62, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 34, 
	39, 34, 92, 34, 92, 41, 58, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	95, 111, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 108, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 108, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	97, 9, 13, 45, 57, 65, 90, 98, 
	122, 32, 47, 62, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 115, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 119, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 115, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 58, 62, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 105, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	108, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 116, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 114, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 34, 39, 47, 
	34, 92, 34, 92, 41, 99, 105, 58, 
	41, 99, 105, 41, 99, 105, 92, 39, 
	92, 39, 92, 92, 47, 92, 47, 92, 
	92, 32, 47, 62, 95, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 101, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 110, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 100, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	40, 47, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 34, 39, 34, 92, 
	34, 92, 41, 58, 92, 39, 92, 39, 
	92, 92, 32, 47, 62, 95, 101, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 112, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	108, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 97, 9, 13, 
	45, 57, 65, 90, 98, 122, 32, 47, 
	62, 95, 99, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 34, 39, 47, 
	34, 92, 34, 92, 32, 44, 99, 105, 
	9, 13, 32, 44, 9, 13, 32, 34, 
	39, 9, 13, 34, 92, 34, 92, 41, 
	58, 92, 39, 92, 39, 92, 92, 32, 
	44, 99, 105, 9, 13, 32, 44, 99, 
	105, 9, 13, 92, 39, 92, 39, 92, 
	92, 47, 92, 47, 92, 92, 32, 47, 
	62, 95, 111, 114, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	108, 117, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 111, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 119, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	58, 62, 95, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 114, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 58, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	105, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 109, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 40, 
	47, 58, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 34, 39, 34, 92, 
	34, 92, 41, 58, 92, 39, 92, 39, 
	92, 92, 34, 39, 61, 126, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	34, 39, 47, 34, 92, 34, 92, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	47, 62, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 116, 114, 105, 112, 45, 116, 
	97, 103, 115, 36, 42, 58, 61, 94, 
	101, 120, 116, 36, 42, 58, 61, 94, 
	32, 33, 36, 42, 45, 47, 58, 61, 
	62, 94, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 47, 62, 9, 13, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 32, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	61, 34, 39, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 34, 39, 95, 97, 99, 
	102, 112, 114, 116, 45, 46, 48, 57, 
	65, 90, 98, 122, 34, 92, 34, 92, 
	32, 47, 62, 63, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 112, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 112, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 110, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 100, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 40, 47, 62, 
	63, 95, 9, 13, 45, 57, 65, 90, 
	97, 122, 34, 39, 34, 92, 34, 92, 
	41, 58, 92, 39, 92, 39, 92, 92, 
	32, 47, 62, 63, 95, 111, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 108, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 108, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 97, 
	9, 13, 45, 57, 65, 90, 98, 122, 
	32, 47, 62, 63, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 115, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 119, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 115, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	58, 62, 63, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 105, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 108, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 116, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 40, 47, 62, 63, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	34, 39, 47, 34, 92, 34, 92, 41, 
	99, 105, 58, 41, 99, 105, 41, 99, 
	105, 92, 39, 92, 39, 92, 92, 47, 
	92, 47, 92, 92, 32, 47, 62, 63, 
	95, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 110, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 100, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	34, 92, 34, 92, 41, 58, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 108, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 97, 9, 13, 45, 57, 
	65, 90, 98, 122, 32, 47, 62, 63, 
	95, 99, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	47, 34, 92, 34, 92, 32, 44, 99, 
	105, 9, 13, 32, 44, 9, 13, 32, 
	34, 39, 9, 13, 34, 92, 34, 92, 
	41, 58, 92, 39, 92, 39, 92, 92, 
	32, 44, 99, 105, 9, 13, 32, 44, 
	99, 105, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 92, 32, 
	47, 62, 63, 95, 111, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 108, 117, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 111, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	119, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 101, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 114, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 58, 
	62, 63, 95, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	112, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 112, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 101, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 114, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 58, 62, 63, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 105, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 109, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 40, 47, 
	58, 62, 63, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 34, 39, 34, 92, 
	34, 92, 41, 58, 92, 39, 92, 39, 
	92, 92, 34, 39, 61, 126, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	34, 39, 47, 34, 92, 34, 92, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	47, 62, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 111, 116, 
	116, 40, 58, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 41, 58, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 41, 58, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 9, 2, 2, 3, 
	1, 2, 2, 1, 4, 5, 5, 5, 
	5, 5, 5, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 3, 2, 2, 3, 
	1, 3, 3, 1, 2, 2, 1, 2, 
	2, 1, 5, 5, 5, 5, 5, 5, 
	5, 2, 2, 2, 1, 1, 1, 2, 
	2, 1, 5, 5, 5, 5, 5, 5, 
	5, 3, 2, 2, 4, 2, 3, 2, 
	2, 1, 1, 1, 2, 2, 1, 4, 
	4, 1, 2, 2, 1, 2, 2, 1, 
	6, 6, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 6, 2, 
	2, 2, 1, 1, 1, 2, 2, 1, 
	4, 2, 2, 4, 1, 2, 2, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	3, 2, 2, 6, 3, 6, 6, 1, 
	2, 2, 1, 2, 2, 1, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 5, 11, 3, 1, 
	2, 2, 2, 4, 3, 1, 2, 2, 
	1, 1, 2, 2, 2, 4, 1, 2, 
	2, 1, 9, 2, 2, 4, 3, 1, 
	2, 2, 1, 5, 6, 6, 6, 6, 
	6, 6, 2, 2, 2, 1, 1, 1, 
	2, 2, 1, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 3, 2, 2, 3, 1, 
	3, 3, 1, 2, 2, 1, 2, 2, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	2, 2, 2, 1, 1, 1, 2, 2, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	3, 2, 2, 4, 2, 3, 2, 2, 
	1, 1, 1, 2, 2, 1, 4, 4, 
	1, 2, 2, 1, 2, 2, 1, 7, 
	7, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 7, 2, 2, 
	2, 1, 1, 1, 2, 2, 1, 4, 
	2, 2, 4, 1, 2, 2, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 3, 
	2, 2, 6, 3, 6, 6, 1, 2, 
	2, 1, 2, 2, 1, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 2, 1, 
	1, 1, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 3, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	3, 1, 6, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 4, 0, 0, 1, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 4, 0, 0, 1, 1, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 2, 0, 
	3, 2, 4, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 125, 128, 131, 
	136, 138, 141, 144, 146, 155, 165, 175, 
	185, 195, 205, 215, 218, 221, 224, 226, 
	228, 230, 233, 236, 238, 248, 258, 268, 
	278, 288, 298, 308, 318, 328, 338, 348, 
	358, 368, 378, 388, 398, 402, 405, 408, 
	412, 414, 418, 422, 424, 427, 430, 432, 
	435, 438, 440, 450, 460, 470, 480, 490, 
	500, 510, 513, 516, 519, 521, 523, 525, 
	528, 531, 533, 543, 553, 563, 573, 583, 
	593, 603, 607, 610, 613, 619, 623, 628, 
	631, 634, 636, 638, 640, 643, 646, 648, 
	654, 660, 662, 665, 668, 670, 673, 676, 
	678, 689, 700, 710, 720, 730, 740, 750, 
	760, 770, 780, 790, 800, 810, 820, 831, 
	834, 837, 840, 842, 844, 846, 849, 852, 
	854, 859, 862, 865, 871, 873, 876, 879, 
	881, 884, 887, 890, 896, 898, 901, 904, 
	906, 910, 913, 916, 924, 929, 937, 945, 
	947, 950, 953, 955, 958, 961, 963, 965, 
	968, 971, 974, 980, 982, 985, 988, 990, 
	992, 994, 996, 998, 1000, 1002, 1004, 1006, 
	1008, 1014, 1016, 1018, 1020, 1026, 1042, 1047, 
	1049, 1052, 1055, 1058, 1064, 1069, 1071, 1074, 
	1077, 1079, 1081, 1084, 1087, 1090, 1096, 1098, 
	1101, 1104, 1106, 1120, 1123, 1126, 1132, 1137, 
	1139, 1142, 1145, 1147, 1157, 1168, 1179, 1190, 
	1201, 1212, 1223, 1226, 1229, 1232, 1234, 1236, 
	1238, 1241, 1244, 1246, 1257, 1268, 1279, 1290, 
	1301, 1312, 1323, 1334, 1345, 1356, 1367, 1378, 
	1389, 1400, 1411, 1422, 1426, 1429, 1432, 1436, 
	1438, 1442, 1446, 1448, 1451, 1454, 1456, 1459, 
	1462, 1464, 1475, 1486, 1497, 1508, 1519, 1530, 
	1541, 1544, 1547, 1550, 1552, 1554, 1556, 1559, 
	1562, 1564, 1575, 1586, 1597, 1608, 1619, 1630, 
	1641, 1645, 1648, 1651, 1657, 1661, 1666, 1669, 
	1672, 1674, 1676, 1678, 1681, 1684, 1686, 1692, 
	1698, 1700, 1703, 1706, 1708, 1711, 1714, 1716, 
	1728, 1740, 1751, 1762, 1773, 1784, 1795, 1806, 
	1817, 1828, 1839, 1850, 1861, 1872, 1884, 1887, 
	1890, 1893, 1895, 1897, 1899, 1902, 1905, 1907, 
	1912, 1915, 1918, 1924, 1926, 1929, 1932, 1934, 
	1937, 1940, 1943, 1949, 1951, 1954, 1957, 1959, 
	1963, 1966, 1969, 1977, 1982, 1990, 1998, 2000, 
	2003, 2006, 2008, 2011, 2014, 2016, 2018, 2021, 
	2024, 2027, 2033, 2035, 2038, 2041, 2043, 2051, 
	2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 
	2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 
	2086, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 
	2106, 2108, 2110, 2112, 2114, 2116, 2119, 2121, 
	2123, 2125, 2127, 2133, 2135, 2137, 2139, 2141, 
	2143, 2146, 2148, 2150, 2152, 2154, 2160, 2162, 
	2164, 2166, 2168, 2170, 2172, 2178, 2180, 2182, 
	2184, 2186, 2189, 2191, 2193, 2195, 2197, 2203, 
	2205, 2207, 2209, 2211, 2213, 2215, 2221, 2224, 
	2226, 2228, 2230, 2238, 2240, 2242, 2244, 2246, 
	2248, 2250, 2252, 2254, 2256, 2258, 2260, 2262, 
	2264, 2266, 2268, 2270, 2273, 2276, 2282, 2284, 
	2286, 2288, 2290, 2292, 2294, 2296, 2298, 2300, 
	2302, 2304, 2306, 2309, 2311, 2313, 2315, 2317, 
	2320, 2322, 2324, 2326, 2328, 2330, 2333, 2335, 
	2337, 2339, 2341, 2344, 2346, 2348, 2350, 2352, 
	2354, 2356, 2359, 2361, 2363, 2365, 2367, 2370, 
	2372, 2374, 2376, 2378, 2381, 2383, 2385, 2387, 
	2389, 2391, 2393, 2396, 2398, 2400, 2402, 2406, 
	2408, 2410, 2412, 2414, 2416, 2421, 2423, 2427, 
	2430, 2434, 2436, 2439, 2441, 2443, 2445, 2447, 
	2449, 2451, 2453, 2455, 2457, 2459, 2461, 2464, 
	2466, 2468, 2470, 2472, 2474, 2479, 2481, 2485, 
	2488, 2492, 2494, 2497, 2499, 2501, 2503, 2505, 
	2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 
	2523, 2525, 2530, 2532, 2536, 2539, 2543, 2545, 
	2548, 2550, 2552, 2554, 2556, 2558, 2560, 2562, 
	2564, 2566, 2568, 2570, 2572, 2574, 2576, 2581, 
	2583, 2587, 2590, 2594, 2596, 2599, 2601, 2603, 
	2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 
	2621, 2624, 2626, 2628, 2630, 2632, 2635, 2637, 
	2639, 2641, 2643, 2645, 2647, 2650, 2652, 2654, 
	2658, 2660, 2662, 2664, 2666, 2668, 2673, 2675, 
	2679, 2685, 2689, 2691, 2694, 2696, 2698, 2700, 
	2702, 2704, 2706, 2708, 2710, 2712, 2714, 2716, 
	2719, 2721, 2723, 2725, 2727, 2729, 2734, 2736, 
	2740, 2746, 2750, 2752, 2755, 2757, 2759, 2761, 
	2763, 2765, 2767, 2769, 2771, 2773, 2775, 2777, 
	2779, 2781, 2783, 2788, 2790, 2794, 2800, 2804, 
	2806, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 
	2823, 2825, 2827, 2829, 2831, 2833, 2835, 2837, 
	2842, 2844, 2848, 2854, 2858, 2860, 2863, 2865, 
	2867, 2869, 2871, 2873, 2875, 2877, 2879, 2881, 
	2883, 2885, 2888, 2890, 2892, 2894, 2896, 2902, 
	2904, 2906, 2908, 2910, 2912, 2914, 2920, 2924, 
	2926, 2933, 2937, 2948, 2953
};

static const short _hext_indicies[] = {
	1, 0, 3, 4, 5, 6, 6, 2, 
	7, 8, 9, 10, 7, 2, 11, 12, 
	1, 13, 11, 14, 14, 2, 15, 2, 
	16, 17, 18, 2, 19, 2, 20, 2, 
	21, 2, 22, 2, 23, 2, 24, 2, 
	25, 2, 26, 2, 27, 2, 28, 29, 
	30, 31, 32, 2, 33, 2, 34, 35, 
	2, 37, 38, 36, 40, 41, 39, 42, 
	43, 44, 45, 42, 2, 46, 47, 48, 
	46, 2, 41, 39, 50, 51, 49, 53, 
	54, 52, 54, 52, 55, 2, 56, 57, 
	2, 59, 60, 58, 62, 63, 61, 64, 
	65, 66, 67, 64, 2, 63, 61, 69, 
	70, 68, 72, 73, 71, 73, 71, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	76, 76, 76, 76, 2, 84, 85, 83, 
	87, 88, 86, 89, 90, 91, 89, 2, 
	88, 86, 93, 94, 92, 96, 97, 95, 
	97, 95, 98, 100, 101, 99, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 102, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 103, 98, 99, 99, 99, 2, 98, 
	100, 101, 99, 104, 98, 99, 99, 99, 
	2, 98, 100, 101, 99, 105, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 106, 
	98, 99, 99, 99, 2, 98, 107, 100, 
	101, 99, 98, 99, 99, 99, 2, 108, 
	109, 2, 111, 112, 110, 114, 115, 113, 
	116, 2, 117, 2, 115, 113, 119, 120, 
	118, 122, 123, 121, 123, 121, 98, 100, 
	101, 99, 124, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 125, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 126, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	127, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 128, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 129, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 130, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	131, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 132, 98, 99, 99, 99, 2, 
	98, 100, 133, 101, 99, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 134, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	135, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 136, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 137, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 138, 98, 
	99, 99, 99, 2, 98, 139, 100, 101, 
	99, 98, 99, 99, 99, 2, 140, 141, 
	142, 2, 144, 145, 143, 147, 148, 146, 
	149, 150, 151, 2, 152, 2, 153, 154, 
	155, 2, 156, 157, 158, 2, 148, 146, 
	160, 161, 159, 163, 164, 162, 164, 162, 
	166, 167, 165, 169, 170, 168, 170, 168, 
	98, 100, 101, 99, 171, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 172, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	173, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 174, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 175, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 176, 98, 
	99, 99, 99, 2, 98, 177, 100, 101, 
	99, 98, 99, 99, 99, 2, 178, 179, 
	2, 181, 182, 180, 184, 185, 183, 186, 
	2, 187, 2, 185, 183, 189, 190, 188, 
	192, 193, 191, 193, 191, 98, 100, 101, 
	99, 194, 98, 99, 99, 99, 2, 98, 
	100, 101, 99, 195, 98, 99, 99, 99, 
	2, 98, 100, 101, 99, 196, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 197, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 198, 98, 99, 99, 99, 2, 98, 
	100, 101, 99, 199, 98, 99, 99, 99, 
	2, 98, 200, 100, 101, 99, 98, 99, 
	99, 99, 2, 201, 202, 203, 2, 205, 
	206, 204, 208, 209, 207, 210, 211, 212, 
	213, 210, 2, 214, 215, 214, 2, 215, 
	216, 217, 215, 2, 219, 220, 218, 222, 
	223, 221, 224, 2, 225, 2, 223, 221, 
	227, 228, 226, 230, 231, 229, 231, 229, 
	232, 233, 234, 235, 232, 2, 236, 237, 
	238, 239, 236, 2, 209, 207, 241, 242, 
	240, 244, 245, 243, 245, 243, 247, 248, 
	246, 250, 251, 249, 251, 249, 98, 100, 
	101, 99, 252, 253, 98, 99, 99, 99, 
	2, 98, 100, 101, 99, 254, 255, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	256, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 257, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 258, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 259, 98, 
	99, 99, 99, 2, 98, 100, 260, 101, 
	99, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 261, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 262, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 263, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	264, 98, 99, 99, 99, 2, 98, 100, 
	265, 101, 99, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 266, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 267, 98, 
	99, 99, 99, 2, 98, 268, 100, 269, 
	101, 99, 98, 99, 99, 99, 2, 270, 
	271, 2, 273, 274, 272, 276, 277, 275, 
	278, 2, 279, 2, 277, 275, 281, 282, 
	280, 284, 285, 283, 285, 283, 286, 287, 
	288, 289, 2, 291, 292, 290, 294, 295, 
	293, 296, 297, 298, 299, 296, 2, 295, 
	293, 301, 302, 300, 304, 305, 303, 305, 
	303, 306, 307, 2, 309, 310, 308, 312, 
	313, 311, 314, 315, 316, 317, 314, 2, 
	313, 311, 319, 320, 318, 322, 323, 321, 
	323, 321, 324, 325, 326, 2, 328, 329, 
	327, 331, 332, 330, 333, 334, 335, 336, 
	337, 338, 333, 2, 339, 340, 341, 339, 
	2, 342, 343, 344, 345, 346, 347, 342, 
	2, 348, 349, 350, 351, 352, 353, 348, 
	2, 332, 330, 355, 356, 354, 358, 359, 
	357, 359, 357, 361, 362, 360, 364, 365, 
	363, 365, 363, 366, 2, 367, 368, 2, 
	370, 371, 369, 373, 374, 372, 375, 376, 
	377, 378, 375, 2, 374, 372, 380, 381, 
	379, 383, 384, 382, 384, 382, 385, 2, 
	386, 2, 387, 2, 388, 2, 389, 2, 
	390, 2, 391, 2, 392, 2, 393, 2, 
	394, 395, 396, 397, 398, 2, 399, 2, 
	400, 2, 401, 2, 402, 403, 404, 405, 
	406, 2, 407, 408, 409, 410, 411, 412, 
	413, 414, 415, 416, 411, 407, 411, 411, 
	411, 2, 417, 418, 419, 417, 2, 420, 
	2, 421, 422, 2, 424, 425, 423, 427, 
	428, 426, 429, 430, 431, 432, 429, 2, 
	433, 434, 435, 433, 2, 428, 426, 437, 
	438, 436, 440, 441, 439, 441, 439, 442, 
	2, 443, 444, 2, 446, 447, 445, 449, 
	450, 448, 451, 452, 453, 454, 451, 2, 
	450, 448, 456, 457, 455, 459, 460, 458, 
	460, 458, 461, 462, 463, 464, 465, 466, 
	467, 468, 469, 463, 463, 463, 463, 2, 
	471, 472, 470, 474, 475, 473, 476, 477, 
	478, 479, 476, 2, 480, 481, 482, 480, 
	2, 475, 473, 484, 485, 483, 487, 488, 
	486, 488, 486, 489, 491, 492, 493, 490, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 494, 489, 490, 490, 490, 2, 
	489, 491, 492, 493, 490, 495, 489, 490, 
	490, 490, 2, 489, 491, 492, 493, 490, 
	496, 489, 490, 490, 490, 2, 489, 491, 
	492, 493, 490, 497, 489, 490, 490, 490, 
	2, 489, 491, 492, 493, 490, 498, 489, 
	490, 490, 490, 2, 489, 499, 491, 492, 
	493, 490, 489, 490, 490, 490, 2, 500, 
	501, 2, 503, 504, 502, 506, 507, 505, 
	508, 2, 509, 2, 507, 505, 511, 512, 
	510, 514, 515, 513, 515, 513, 489, 491, 
	492, 493, 490, 516, 489, 490, 490, 490, 
	2, 489, 491, 492, 493, 490, 517, 489, 
	490, 490, 490, 2, 489, 491, 492, 493, 
	490, 518, 489, 490, 490, 490, 2, 489, 
	491, 492, 493, 490, 519, 489, 490, 490, 
	490, 2, 489, 491, 492, 493, 490, 520, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 521, 489, 490, 490, 490, 2, 
	489, 491, 492, 493, 490, 522, 489, 490, 
	490, 490, 2, 489, 491, 492, 493, 490, 
	523, 489, 490, 490, 490, 2, 489, 491, 
	492, 493, 490, 524, 489, 490, 490, 490, 
	2, 489, 491, 525, 492, 493, 490, 489, 
	490, 490, 490, 2, 489, 491, 492, 493, 
	490, 526, 489, 490, 490, 490, 2, 489, 
	491, 492, 493, 490, 527, 489, 490, 490, 
	490, 2, 489, 491, 492, 493, 490, 528, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 529, 489, 490, 490, 490, 2, 
	489, 491, 492, 493, 490, 530, 489, 490, 
	490, 490, 2, 489, 531, 491, 492, 493, 
	490, 489, 490, 490, 490, 2, 532, 533, 
	534, 2, 536, 537, 535, 539, 540, 538, 
	541, 542, 543, 2, 544, 2, 545, 546, 
	547, 2, 548, 549, 550, 2, 540, 538, 
	552, 553, 551, 555, 556, 554, 556, 554, 
	558, 559, 557, 561, 562, 560, 562, 560, 
	489, 491, 492, 493, 490, 563, 489, 490, 
	490, 490, 2, 489, 491, 492, 493, 490, 
	564, 489, 490, 490, 490, 2, 489, 491, 
	492, 493, 490, 565, 489, 490, 490, 490, 
	2, 489, 491, 492, 493, 490, 566, 489, 
	490, 490, 490, 2, 489, 491, 492, 493, 
	490, 567, 489, 490, 490, 490, 2, 489, 
	491, 492, 493, 490, 568, 489, 490, 490, 
	490, 2, 489, 569, 491, 492, 493, 490, 
	489, 490, 490, 490, 2, 570, 571, 2, 
	573, 574, 572, 576, 577, 575, 578, 2, 
	579, 2, 577, 575, 581, 582, 580, 584, 
	585, 583, 585, 583, 489, 491, 492, 493, 
	490, 586, 489, 490, 490, 490, 2, 489, 
	491, 492, 493, 490, 587, 489, 490, 490, 
	490, 2, 489, 491, 492, 493, 490, 588, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 589, 489, 490, 490, 490, 2, 
	489, 491, 492, 493, 490, 590, 489, 490, 
	490, 490, 2, 489, 491, 492, 493, 490, 
	591, 489, 490, 490, 490, 2, 489, 592, 
	491, 492, 493, 490, 489, 490, 490, 490, 
	2, 593, 594, 595, 2, 597, 598, 596, 
	600, 601, 599, 602, 603, 604, 605, 602, 
	2, 606, 607, 606, 2, 607, 608, 609, 
	607, 2, 611, 612, 610, 614, 615, 613, 
	616, 2, 617, 2, 615, 613, 619, 620, 
	618, 622, 623, 621, 623, 621, 624, 625, 
	626, 627, 624, 2, 628, 629, 630, 631, 
	628, 2, 601, 599, 633, 634, 632, 636, 
	637, 635, 637, 635, 639, 640, 638, 642, 
	643, 641, 643, 641, 489, 491, 492, 493, 
	490, 644, 645, 489, 490, 490, 490, 2, 
	489, 491, 492, 493, 490, 646, 647, 489, 
	490, 490, 490, 2, 489, 491, 492, 493, 
	490, 648, 489, 490, 490, 490, 2, 489, 
	491, 492, 493, 490, 649, 489, 490, 490, 
	490, 2, 489, 491, 492, 493, 490, 650, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 651, 489, 490, 490, 490, 2, 
	489, 491, 652, 492, 493, 490, 489, 490, 
	490, 490, 2, 489, 491, 492, 493, 490, 
	653, 489, 490, 490, 490, 2, 489, 491, 
	492, 493, 490, 654, 489, 490, 490, 490, 
	2, 489, 491, 492, 493, 490, 655, 489, 
	490, 490, 490, 2, 489, 491, 492, 493, 
	490, 656, 489, 490, 490, 490, 2, 489, 
	491, 657, 492, 493, 490, 489, 490, 490, 
	490, 2, 489, 491, 492, 493, 490, 658, 
	489, 490, 490, 490, 2, 489, 491, 492, 
	493, 490, 659, 489, 490, 490, 490, 2, 
	489, 660, 491, 661, 492, 493, 490, 489, 
	490, 490, 490, 2, 662, 663, 2, 665, 
	666, 664, 668, 669, 667, 670, 2, 671, 
	2, 669, 667, 673, 674, 672, 676, 677, 
	675, 677, 675, 678, 679, 680, 681, 2, 
	683, 684, 682, 686, 687, 685, 688, 689, 
	690, 691, 688, 2, 687, 685, 693, 694, 
	692, 696, 697, 695, 697, 695, 698, 699, 
	2, 701, 702, 700, 704, 705, 703, 706, 
	707, 708, 709, 706, 2, 705, 703, 711, 
	712, 710, 714, 715, 713, 715, 713, 716, 
	717, 718, 2, 720, 721, 719, 723, 724, 
	722, 725, 726, 727, 728, 729, 730, 725, 
	2, 731, 732, 733, 731, 2, 734, 735, 
	736, 737, 738, 739, 734, 2, 740, 741, 
	742, 743, 744, 745, 740, 2, 724, 722, 
	747, 748, 746, 750, 751, 749, 751, 749, 
	753, 754, 752, 756, 757, 755, 757, 755, 
	758, 2, 759, 760, 2, 762, 763, 761, 
	765, 766, 764, 767, 768, 769, 770, 767, 
	2, 766, 764, 772, 773, 771, 775, 776, 
	774, 776, 774, 777, 778, 779, 780, 781, 
	782, 783, 2, 784, 2, 785, 2, 786, 
	2, 787, 2, 788, 2, 789, 2, 790, 
	2, 791, 2, 792, 2, 793, 2, 794, 
	2, 795, 2, 796, 2, 797, 2, 798, 
	2, 799, 2, 800, 801, 2, 802, 803, 
	804, 805, 802, 2, 806, 2, 807, 2, 
	808, 2, 809, 2, 810, 2, 811, 2, 
	812, 2, 813, 2, 814, 2, 815, 2, 
	816, 2, 817, 2, 818, 819, 2, 820, 
	2, 821, 2, 822, 2, 823, 2, 824, 
	825, 826, 827, 824, 2, 828, 2, 829, 
	2, 830, 2, 831, 2, 832, 2, 833, 
	834, 2, 835, 2, 836, 2, 837, 2, 
	838, 2, 839, 840, 841, 842, 839, 2, 
	843, 2, 844, 2, 845, 2, 846, 2, 
	847, 2, 848, 2, 849, 850, 851, 852, 
	849, 2, 853, 2, 854, 2, 855, 2, 
	856, 2, 857, 858, 2, 859, 2, 860, 
	2, 861, 2, 862, 2, 863, 864, 865, 
	866, 863, 2, 867, 2, 868, 2, 869, 
	2, 870, 2, 871, 2, 872, 2, 873, 
	874, 875, 876, 873, 2, 877, 878, 2, 
	879, 2, 880, 2, 881, 2, 882, 883, 
	884, 885, 886, 887, 888, 2, 889, 2, 
	890, 2, 891, 2, 892, 2, 893, 2, 
	894, 2, 895, 2, 896, 2, 897, 2, 
	898, 2, 899, 2, 900, 2, 901, 2, 
	902, 2, 903, 2, 904, 2, 905, 906, 
	2, 907, 908, 2, 909, 910, 911, 912, 
	909, 2, 913, 2, 914, 2, 915, 2, 
	916, 2, 917, 2, 918, 2, 919, 2, 
	920, 2, 921, 2, 922, 2, 923, 2, 
	924, 2, 925, 926, 2, 927, 2, 928, 
	2, 929, 2, 930, 2, 931, 932, 2, 
	933, 2, 934, 2, 935, 2, 936, 2, 
	937, 2, 938, 939, 2, 940, 2, 941, 
	2, 942, 2, 943, 2, 944, 945, 2, 
	946, 2, 947, 2, 948, 2, 949, 2, 
	950, 2, 951, 2, 952, 953, 2, 954, 
	2, 955, 2, 956, 2, 957, 2, 958, 
	959, 2, 960, 2, 961, 2, 962, 2, 
	963, 2, 964, 965, 2, 966, 2, 967, 
	2, 968, 2, 969, 2, 970, 2, 971, 
	2, 972, 973, 2, 974, 2, 975, 2, 
	976, 2, 977, 978, 979, 2, 980, 2, 
	981, 2, 982, 2, 983, 2, 984, 2, 
	985, 987, 988, 986, 2, 989, 2, 990, 
	991, 989, 2, 992, 993, 2, 994, 995, 
	995, 2, 996, 2, 997, 996, 2, 998, 
	2, 999, 2, 1000, 2, 1001, 2, 1002, 
	2, 1003, 2, 1004, 2, 1005, 2, 1006, 
	2, 1007, 2, 1008, 2, 1009, 1010, 2, 
	1011, 2, 1012, 2, 1013, 2, 1014, 2, 
	1015, 2, 1016, 1018, 1019, 1017, 2, 1020, 
	2, 1021, 1022, 1020, 2, 1023, 1024, 2, 
	1025, 1026, 1026, 2, 1027, 2, 1028, 1027, 
	2, 1029, 2, 1030, 2, 1031, 2, 1032, 
	2, 1033, 2, 1034, 2, 1035, 2, 1036, 
	2, 1037, 2, 1038, 2, 1039, 2, 1040, 
	2, 1041, 2, 1042, 2, 1043, 1045, 1046, 
	1044, 2, 1047, 2, 1048, 1049, 1047, 2, 
	1050, 1051, 2, 1052, 1053, 1053, 2, 1054, 
	2, 1055, 1054, 2, 1056, 2, 1057, 2, 
	1058, 2, 1059, 2, 1060, 2, 1061, 2, 
	1062, 2, 1063, 2, 1064, 2, 1065, 2, 
	1066, 2, 1067, 2, 1068, 2, 1069, 2, 
	1070, 1072, 1073, 1071, 2, 1074, 2, 1075, 
	1076, 1074, 2, 1077, 1078, 2, 1079, 1080, 
	1080, 2, 1081, 2, 1082, 1081, 2, 1083, 
	2, 1084, 2, 1085, 2, 1086, 2, 1087, 
	2, 1088, 2, 1089, 2, 1090, 2, 1091, 
	2, 1092, 2, 1093, 2, 1094, 1095, 2, 
	1096, 2, 1097, 2, 1098, 2, 1099, 2, 
	1100, 1101, 2, 1102, 2, 1103, 2, 1104, 
	2, 1105, 2, 1106, 2, 1107, 2, 1108, 
	1109, 2, 1110, 2, 1111, 2, 1112, 1113, 
	1114, 2, 1115, 2, 1116, 2, 1117, 2, 
	1118, 2, 1119, 2, 1120, 1122, 1123, 1121, 
	2, 1124, 2, 1125, 1126, 1124, 2, 1127, 
	1128, 1129, 1130, 1127, 2, 1131, 1132, 1132, 
	2, 1133, 2, 1134, 1133, 2, 1135, 2, 
	1136, 2, 1137, 2, 1138, 2, 1139, 2, 
	1140, 2, 1141, 2, 1142, 2, 1143, 2, 
	1144, 2, 1145, 2, 1146, 1147, 2, 1148, 
	2, 1149, 2, 1150, 2, 1151, 2, 1152, 
	2, 1153, 1155, 1156, 1154, 2, 1157, 2, 
	1158, 1159, 1157, 2, 1160, 1161, 1162, 1163, 
	1160, 2, 1164, 1165, 1165, 2, 1166, 2, 
	1167, 1166, 2, 1168, 2, 1169, 2, 1170, 
	2, 1171, 2, 1172, 2, 1173, 2, 1174, 
	2, 1175, 2, 1176, 2, 1177, 2, 1178, 
	2, 1179, 2, 1180, 2, 1181, 2, 1182, 
	1184, 1185, 1183, 2, 1186, 2, 1187, 1188, 
	1186, 2, 1189, 1190, 1191, 1192, 1189, 2, 
	1193, 1194, 1194, 2, 1195, 2, 1196, 1195, 
	2, 1197, 2, 1198, 2, 1199, 2, 1200, 
	2, 1201, 2, 1202, 2, 1203, 2, 1204, 
	2, 1205, 2, 1206, 2, 1207, 2, 1208, 
	2, 1209, 2, 1210, 2, 1211, 1213, 1214, 
	1212, 2, 1215, 2, 1216, 1217, 1215, 2, 
	1218, 1219, 1220, 1221, 1218, 2, 1222, 1223, 
	1223, 2, 1224, 2, 1225, 1224, 2, 1226, 
	2, 1227, 2, 1228, 2, 1229, 2, 1230, 
	2, 1231, 2, 1232, 2, 1233, 2, 1234, 
	2, 1235, 2, 1236, 2, 1237, 1238, 2, 
	1239, 2, 1240, 2, 1241, 2, 1242, 2, 
	1243, 1244, 1245, 1246, 1243, 2, 1247, 2, 
	1248, 2, 1249, 2, 1250, 2, 1251, 2, 
	1252, 2, 1253, 1254, 1255, 1256, 1253, 2, 
	1257, 1258, 1258, 2, 1259, 2, 1260, 1259, 
	1260, 1260, 1260, 1260, 2, 1261, 1262, 1262, 
	2, 7, 1263, 8, 9, 10, 1263, 7, 
	1263, 1263, 1263, 2, 1, 0, 1264, 1, 
	2, 1265, 1266, 1267, 1265, 2, 0
};

static const short _hext_trans_targs[] = {
	1, 763, 0, 3, 758, 761, 762, 4, 
	5, 398, 763, 4, 5, 6, 213, 764, 
	7, 199, 209, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 27, 36, 160, 
	190, 18, 19, 24, 20, 21, 23, 20, 
	21, 23, 4, 22, 5, 763, 4, 5, 
	763, 25, 21, 26, 25, 21, 26, 28, 
	29, 33, 30, 31, 32, 30, 31, 32, 
	4, 22, 5, 763, 34, 31, 35, 34, 
	31, 35, 37, 41, 44, 45, 60, 70, 
	90, 106, 136, 38, 39, 40, 38, 39, 
	40, 4, 5, 763, 42, 39, 43, 42, 
	39, 43, 4, 44, 5, 763, 46, 47, 
	48, 49, 50, 51, 52, 57, 53, 54, 
	56, 53, 54, 56, 55, 36, 58, 54, 
	59, 58, 54, 59, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 36, 71, 72, 
	73, 74, 75, 76, 77, 84, 87, 78, 
	79, 83, 78, 79, 83, 80, 81, 82, 
	36, 80, 81, 82, 80, 81, 82, 85, 
	79, 86, 85, 79, 86, 88, 79, 89, 
	88, 79, 89, 91, 92, 93, 94, 95, 
	96, 97, 98, 103, 99, 100, 102, 99, 
	100, 102, 101, 36, 104, 100, 105, 104, 
	100, 105, 107, 108, 109, 110, 111, 112, 
	113, 114, 130, 133, 115, 116, 129, 115, 
	116, 129, 117, 118, 127, 128, 117, 118, 
	119, 124, 120, 121, 123, 120, 121, 123, 
	122, 36, 125, 121, 126, 125, 121, 126, 
	117, 118, 127, 128, 117, 118, 127, 128, 
	131, 116, 132, 131, 116, 132, 134, 116, 
	135, 134, 116, 135, 137, 148, 138, 143, 
	139, 140, 141, 142, 36, 144, 145, 146, 
	147, 36, 149, 150, 151, 36, 152, 157, 
	153, 154, 156, 153, 154, 156, 155, 36, 
	158, 154, 159, 158, 154, 159, 161, 165, 
	168, 176, 162, 163, 164, 162, 163, 164, 
	4, 22, 5, 763, 166, 163, 167, 166, 
	163, 167, 169, 173, 170, 171, 172, 170, 
	171, 172, 4, 22, 5, 763, 174, 171, 
	175, 174, 171, 175, 177, 184, 187, 178, 
	179, 183, 178, 179, 183, 4, 180, 5, 
	763, 181, 182, 4, 5, 763, 4, 180, 
	5, 763, 181, 182, 4, 180, 5, 763, 
	181, 182, 185, 179, 186, 185, 179, 186, 
	188, 179, 189, 188, 179, 189, 191, 192, 
	196, 193, 194, 195, 193, 194, 195, 4, 
	22, 5, 763, 197, 194, 198, 197, 194, 
	198, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 17, 27, 36, 160, 190, 210, 
	211, 212, 17, 27, 36, 160, 190, 4, 
	214, 215, 225, 213, 5, 234, 359, 763, 
	389, 4, 5, 763, 216, 217, 222, 218, 
	219, 221, 218, 219, 221, 4, 220, 5, 
	763, 4, 5, 763, 223, 219, 224, 223, 
	219, 224, 226, 227, 231, 228, 229, 230, 
	228, 229, 230, 4, 220, 5, 763, 232, 
	229, 233, 232, 229, 233, 235, 240, 243, 
	244, 259, 269, 289, 305, 335, 236, 237, 
	239, 236, 237, 239, 4, 5, 763, 238, 
	4, 5, 763, 241, 237, 242, 241, 237, 
	242, 4, 243, 5, 763, 238, 245, 246, 
	247, 248, 249, 250, 251, 256, 252, 253, 
	255, 252, 253, 255, 254, 234, 257, 253, 
	258, 257, 253, 258, 260, 261, 262, 263, 
	264, 265, 266, 267, 268, 234, 270, 271, 
	272, 273, 274, 275, 276, 283, 286, 277, 
	278, 282, 277, 278, 282, 279, 280, 281, 
	234, 279, 280, 281, 279, 280, 281, 284, 
	278, 285, 284, 278, 285, 287, 278, 288, 
	287, 278, 288, 290, 291, 292, 293, 294, 
	295, 296, 297, 302, 298, 299, 301, 298, 
	299, 301, 300, 234, 303, 299, 304, 303, 
	299, 304, 306, 307, 308, 309, 310, 311, 
	312, 313, 329, 332, 314, 315, 328, 314, 
	315, 328, 316, 317, 326, 327, 316, 317, 
	318, 323, 319, 320, 322, 319, 320, 322, 
	321, 234, 324, 320, 325, 324, 320, 325, 
	316, 317, 326, 327, 316, 317, 326, 327, 
	330, 315, 331, 330, 315, 331, 333, 315, 
	334, 333, 315, 334, 336, 347, 337, 342, 
	338, 339, 340, 341, 234, 343, 344, 345, 
	346, 234, 348, 349, 350, 234, 351, 356, 
	352, 353, 355, 352, 353, 355, 354, 234, 
	357, 353, 358, 357, 353, 358, 360, 364, 
	367, 375, 361, 362, 363, 361, 362, 363, 
	4, 220, 5, 763, 365, 362, 366, 365, 
	362, 366, 368, 372, 369, 370, 371, 369, 
	370, 371, 4, 220, 5, 763, 373, 370, 
	374, 373, 370, 374, 376, 383, 386, 377, 
	378, 382, 377, 378, 382, 4, 379, 5, 
	763, 380, 381, 4, 5, 763, 4, 379, 
	5, 763, 380, 381, 4, 379, 5, 763, 
	380, 381, 384, 378, 385, 384, 378, 385, 
	387, 378, 388, 387, 378, 388, 390, 391, 
	395, 392, 393, 394, 392, 393, 394, 4, 
	220, 5, 763, 396, 393, 397, 396, 393, 
	397, 399, 417, 430, 435, 453, 470, 741, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 409, 410, 411, 412, 413, 414, 415, 
	416, 415, 4, 5, 398, 763, 418, 419, 
	420, 421, 422, 423, 424, 425, 426, 427, 
	428, 429, 416, 429, 431, 432, 433, 434, 
	4, 5, 398, 763, 436, 437, 438, 439, 
	440, 441, 446, 442, 443, 444, 445, 4, 
	5, 398, 763, 447, 448, 449, 450, 451, 
	452, 4, 5, 398, 763, 454, 455, 456, 
	457, 458, 463, 459, 460, 461, 462, 4, 
	5, 398, 763, 464, 465, 466, 467, 468, 
	469, 4, 5, 398, 763, 471, 653, 472, 
	473, 474, 475, 494, 507, 512, 530, 547, 
	636, 476, 477, 478, 479, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	491, 492, 491, 493, 474, 4, 5, 398, 
	763, 495, 496, 497, 498, 499, 500, 501, 
	502, 503, 504, 505, 506, 492, 506, 508, 
	509, 510, 511, 493, 474, 513, 514, 515, 
	516, 517, 518, 523, 519, 520, 521, 522, 
	493, 474, 524, 525, 526, 527, 528, 529, 
	493, 474, 531, 532, 533, 534, 535, 540, 
	536, 537, 538, 539, 493, 474, 541, 542, 
	543, 544, 545, 546, 493, 474, 548, 549, 
	550, 551, 570, 615, 552, 553, 554, 555, 
	556, 557, 558, 563, 567, 558, 559, 560, 
	493, 474, 559, 561, 562, 559, 564, 565, 
	566, 559, 568, 569, 559, 571, 572, 573, 
	574, 575, 594, 576, 577, 578, 579, 580, 
	581, 582, 587, 591, 582, 583, 584, 493, 
	474, 583, 585, 586, 583, 588, 589, 590, 
	583, 592, 593, 583, 595, 596, 597, 598, 
	599, 600, 601, 602, 603, 608, 612, 603, 
	604, 605, 493, 474, 604, 606, 607, 604, 
	609, 610, 611, 604, 613, 614, 604, 616, 
	617, 618, 619, 620, 621, 622, 623, 624, 
	629, 633, 624, 625, 626, 493, 474, 625, 
	627, 628, 625, 630, 631, 632, 625, 634, 
	635, 625, 637, 638, 639, 640, 641, 646, 
	642, 643, 644, 645, 493, 474, 647, 648, 
	649, 650, 651, 652, 493, 474, 654, 655, 
	656, 675, 720, 657, 658, 659, 660, 661, 
	662, 663, 668, 672, 663, 664, 665, 4, 
	5, 398, 763, 664, 666, 667, 664, 669, 
	670, 671, 664, 673, 674, 664, 676, 677, 
	678, 679, 680, 699, 681, 682, 683, 684, 
	685, 686, 687, 692, 696, 687, 688, 689, 
	4, 5, 398, 763, 688, 690, 691, 688, 
	693, 694, 695, 688, 697, 698, 688, 700, 
	701, 702, 703, 704, 705, 706, 707, 708, 
	713, 717, 708, 709, 710, 4, 5, 398, 
	763, 709, 711, 712, 709, 714, 715, 716, 
	709, 718, 719, 709, 721, 722, 723, 724, 
	725, 726, 727, 728, 729, 734, 738, 729, 
	730, 731, 4, 5, 398, 763, 730, 732, 
	733, 730, 735, 736, 737, 730, 739, 740, 
	730, 742, 743, 744, 745, 746, 751, 747, 
	748, 749, 750, 4, 5, 398, 763, 752, 
	753, 754, 755, 756, 757, 4, 5, 398, 
	763, 759, 760, 763, 760, 3, 762, 762, 
	2, 763, 1, 2
};

static const short _hext_trans_actions[] = {
	0, 0, 117, 221, 0, 103, 221, 105, 
	105, 105, 105, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 65, 65, 65, 65, 
	65, 0, 0, 0, 13, 128, 13, 0, 
	15, 0, 307, 101, 307, 307, 235, 235, 
	235, 17, 131, 17, 0, 19, 0, 0, 
	0, 0, 13, 128, 13, 0, 15, 0, 
	299, 99, 299, 299, 17, 131, 17, 0, 
	19, 0, 0, 0, 89, 89, 89, 89, 
	89, 89, 89, 13, 128, 13, 0, 15, 
	0, 259, 259, 259, 17, 131, 17, 0, 
	19, 0, 267, 0, 267, 267, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 128, 
	13, 0, 15, 0, 0, 81, 17, 131, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 73, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 53, 
	209, 53, 0, 55, 0, 61, 0, 0, 
	83, 215, 59, 59, 212, 57, 57, 49, 
	206, 49, 0, 51, 0, 45, 203, 45, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 128, 13, 0, 
	15, 0, 0, 79, 17, 131, 17, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 53, 209, 53, 0, 
	55, 0, 61, 61, 0, 0, 0, 0, 
	0, 0, 5, 122, 5, 0, 7, 0, 
	0, 85, 9, 125, 9, 0, 11, 0, 
	215, 215, 59, 59, 212, 212, 57, 57, 
	49, 206, 49, 0, 51, 0, 45, 203, 
	45, 0, 47, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 77, 0, 0, 0, 69, 0, 0, 
	13, 128, 13, 0, 15, 0, 0, 71, 
	17, 131, 17, 0, 19, 0, 0, 0, 
	0, 0, 13, 128, 13, 0, 15, 0, 
	275, 93, 275, 275, 17, 131, 17, 0, 
	19, 0, 0, 0, 5, 122, 5, 0, 
	7, 0, 283, 95, 283, 283, 9, 125, 
	9, 0, 11, 0, 0, 0, 0, 53, 
	209, 53, 0, 55, 0, 320, 218, 320, 
	320, 0, 0, 231, 231, 231, 342, 255, 
	342, 342, 59, 59, 330, 251, 330, 330, 
	57, 57, 49, 206, 49, 0, 51, 0, 
	45, 203, 45, 0, 47, 0, 0, 0, 
	0, 13, 128, 13, 0, 15, 0, 291, 
	97, 291, 291, 17, 131, 17, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 67, 67, 67, 67, 67, 0, 
	0, 0, 63, 63, 63, 63, 63, 315, 
	119, 3, 3, 0, 315, 3, 3, 315, 
	3, 247, 247, 247, 0, 0, 0, 13, 
	128, 13, 0, 15, 0, 311, 101, 311, 
	311, 243, 243, 243, 17, 131, 17, 0, 
	19, 0, 0, 0, 0, 13, 128, 13, 
	0, 15, 0, 303, 99, 303, 303, 17, 
	131, 17, 0, 19, 0, 0, 0, 89, 
	89, 89, 89, 89, 89, 89, 13, 128, 
	13, 0, 15, 0, 263, 263, 263, 87, 
	227, 227, 227, 17, 131, 17, 0, 19, 
	0, 271, 0, 271, 271, 91, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 128, 
	13, 0, 15, 0, 0, 81, 17, 131, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 73, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 53, 
	209, 53, 0, 55, 0, 61, 0, 0, 
	83, 215, 59, 59, 212, 57, 57, 49, 
	206, 49, 0, 51, 0, 45, 203, 45, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 128, 13, 0, 
	15, 0, 0, 79, 17, 131, 17, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 53, 209, 53, 0, 
	55, 0, 61, 61, 0, 0, 0, 0, 
	0, 0, 5, 122, 5, 0, 7, 0, 
	0, 85, 9, 125, 9, 0, 11, 0, 
	215, 215, 59, 59, 212, 212, 57, 57, 
	49, 206, 49, 0, 51, 0, 45, 203, 
	45, 0, 47, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 77, 0, 0, 0, 69, 0, 0, 
	13, 128, 13, 0, 15, 0, 0, 71, 
	17, 131, 17, 0, 19, 0, 0, 0, 
	0, 0, 13, 128, 13, 0, 15, 0, 
	279, 93, 279, 279, 17, 131, 17, 0, 
	19, 0, 0, 0, 5, 122, 5, 0, 
	7, 0, 287, 95, 287, 287, 9, 125, 
	9, 0, 11, 0, 0, 0, 0, 53, 
	209, 53, 0, 55, 0, 325, 218, 325, 
	325, 0, 0, 239, 239, 239, 348, 255, 
	348, 348, 59, 59, 336, 251, 336, 336, 
	57, 57, 49, 206, 49, 0, 51, 0, 
	45, 203, 45, 0, 47, 0, 0, 0, 
	0, 13, 128, 13, 0, 15, 0, 295, 
	97, 295, 295, 17, 131, 17, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	39, 0, 109, 109, 109, 109, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 33, 35, 0, 0, 0, 0, 0, 
	140, 140, 140, 140, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 164, 
	164, 164, 164, 0, 0, 0, 0, 0, 
	0, 170, 170, 170, 170, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 176, 
	176, 176, 176, 0, 0, 0, 0, 0, 
	0, 182, 182, 182, 182, 0, 0, 0, 
	0, 41, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 39, 0, 43, 43, 107, 107, 107, 
	107, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 33, 35, 0, 0, 
	0, 0, 0, 137, 137, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	161, 161, 0, 0, 0, 0, 0, 0, 
	167, 167, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 173, 173, 0, 0, 
	0, 0, 0, 0, 179, 179, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 25, 0, 0, 0, 27, 27, 
	143, 143, 29, 134, 0, 31, 0, 0, 
	0, 21, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	25, 25, 0, 0, 0, 27, 27, 149, 
	149, 29, 134, 0, 31, 0, 0, 0, 
	21, 0, 0, 23, 0, 0, 0, 0, 
	0, 0, 0, 25, 25, 0, 0, 0, 
	27, 27, 185, 185, 29, 134, 0, 31, 
	0, 0, 0, 21, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 25, 25, 
	0, 0, 0, 27, 27, 155, 155, 29, 
	134, 0, 31, 0, 0, 0, 21, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 191, 191, 0, 0, 
	0, 0, 0, 0, 197, 197, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	25, 25, 0, 0, 0, 27, 27, 146, 
	146, 146, 146, 29, 134, 0, 31, 0, 
	0, 0, 21, 0, 0, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 25, 0, 0, 0, 27, 27, 
	152, 152, 152, 152, 29, 134, 0, 31, 
	0, 0, 0, 21, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 25, 25, 
	0, 0, 0, 27, 27, 188, 188, 188, 
	188, 29, 134, 0, 31, 0, 0, 0, 
	21, 0, 0, 23, 0, 0, 0, 0, 
	0, 0, 0, 25, 25, 0, 0, 0, 
	27, 27, 158, 158, 158, 158, 29, 134, 
	0, 31, 0, 0, 0, 21, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 194, 194, 194, 194, 0, 
	0, 0, 0, 0, 0, 200, 200, 200, 
	200, 113, 113, 115, 0, 224, 224, 0, 
	0, 111, 111, 111
};

static const short _hext_eof_actions[] = {
	0, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 117, 117, 117, 117, 117, 
	117, 117, 117, 0, 111
};

static const int hext_start = 763;
static const int hext_first_final = 763;
static const int hext_error = 0;

static const int hext_en_main = 763;


#line 66 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Convenience lambda to store the start of a token. Used within the hext
  // machine definition.
  auto tk_start = [this, &tok_begin, &tok_end](){
    tok_begin = this->p;
    tok_end = nullptr;
  };

  // Convenience lambda to complete a token. Used within the hext
  // machine definition.
  auto tk_stop = [this, &tok, &tok_begin, &tok_end](){
    assert(tok_begin);
    assert(this->p);
    tok_end = this->p;
    tok = std::string(
      tok_begin,
      static_cast<std::string::size_type>(std::distance(tok_begin, tok_end))
    );
  };

#ifndef _MSC_VER
  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
#endif
  
#line 1727 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1732 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _hext_indicies[_trans];
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 25 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 29 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 34 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 3:
#line 35 "hext-machine.rl"
	{ tk_stop(); pv.attr_name = tok; }
	break;
	case 4:
#line 41 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 5:
#line 41 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 6:
#line 46 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 7:
#line 46 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 8:
#line 52 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 9:
#line 52 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 10:
#line 57 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 11:
#line 57 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 12:
#line 65 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 68 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 72 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 15:
#line 73 "hext-machine.rl"
	{ tk_stop(); pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 76 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 78 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 18:
#line 79 "hext-machine.rl"
	{ tk_stop(); pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 88 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 93 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 21:
#line 94 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 100 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 23:
#line 101 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 106 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 110 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 114 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 118 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 122 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 126 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 130 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 134 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 137 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 140 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 144 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 147 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 157 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 37:
#line 157 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 38:
#line 159 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 39:
#line 159 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 40:
#line 161 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 41:
#line 161 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 42:
#line 166 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 43:
#line 169 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 44:
#line 171 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 45:
#line 181 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 46:
#line 187 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 47:
#line 189 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 48:
#line 191 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 49:
#line 199 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 50:
#line 201 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 51:
#line 203 "hext-machine.rl"
	{ pv.add_pipe<CollapseWsPipe>(); }
	break;
	case 52:
#line 205 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(); }
	break;
	case 53:
#line 207 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(CasePipe::ToUpper); }
	break;
	case 54:
#line 209 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 55:
#line 211 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 56:
#line 213 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 57:
#line 216 "hext-machine.rl"
	{ pv.add_pipe<RegexReplacePipe>(*pv.regex, pv.literal_value); }
	break;
	case 58:
#line 222 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 59:
#line 224 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 60:
#line 225 "hext-machine.rl"
	{ tk_stop(); pv.cap_var = tok; }
	break;
	case 61:
#line 232 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 62:
#line 235 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 63:
#line 238 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 64:
#line 241 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 65:
#line 244 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 66:
#line 252 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 67:
#line 257 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 68:
#line 261 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 69:
#line 265 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 70:
#line 273 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 71:
#line 277 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 72:
#line 281 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 73:
#line 284 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 74:
#line 285 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 75:
#line 303 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 76:
#line 306 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 77:
#line 309 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 78:
#line 310 "hext-machine.rl"
	{ tk_stop(); set_open_tag_or_throw(tok); }
	break;
	case 79:
#line 313 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 80:
#line 316 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 81:
#line 324 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 82:
#line 331 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 83:
#line 332 "hext-machine.rl"
	{ tk_stop();
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 84:
#line 337 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 2164 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 81:
#line 324 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 84:
#line 337 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 2188 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 136 "Parser.cpp.rl"

#ifndef _MSC_VER
#pragma GCC diagnostic pop
#endif

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return std::move(*this->top_rule_);
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  std::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

