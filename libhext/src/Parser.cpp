// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/RegexTest.h"
#include "hext/TextNodeMatch.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 64 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 6, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 23, 1, 
	24, 1, 25, 1, 26, 1, 27, 1, 
	28, 1, 29, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 35, 1, 38, 1, 
	39, 1, 40, 1, 41, 1, 42, 1, 
	43, 1, 44, 1, 45, 1, 46, 1, 
	47, 1, 48, 1, 58, 1, 61, 1, 
	62, 1, 63, 1, 64, 1, 65, 1, 
	66, 1, 67, 2, 4, 5, 2, 7, 
	24, 2, 7, 63, 2, 12, 24, 2, 
	12, 63, 2, 13, 24, 2, 13, 63, 
	2, 14, 24, 2, 14, 63, 2, 15, 
	24, 2, 15, 63, 2, 16, 24, 2, 
	16, 63, 2, 17, 24, 2, 17, 63, 
	2, 18, 24, 2, 18, 63, 2, 19, 
	24, 2, 19, 63, 2, 20, 24, 2, 
	20, 63, 2, 21, 24, 2, 21, 63, 
	2, 22, 24, 2, 22, 63, 2, 25, 
	26, 2, 27, 29, 2, 28, 29, 2, 
	29, 30, 2, 39, 55, 2, 40, 41, 
	2, 42, 43, 2, 49, 57, 2, 52, 
	57, 2, 58, 60, 2, 59, 60, 3, 
	27, 29, 30, 3, 28, 29, 30, 3, 
	36, 52, 57, 3, 37, 50, 57, 3, 
	37, 51, 57, 3, 37, 53, 57, 3, 
	37, 54, 57, 3, 37, 56, 57, 3, 
	44, 51, 57, 3, 44, 54, 57, 3, 
	45, 51, 57, 3, 45, 54, 57, 3, 
	46, 51, 57, 3, 46, 54, 57, 3, 
	47, 51, 57, 3, 47, 54, 57, 3, 
	48, 51, 57, 3, 48, 54, 57, 4, 
	29, 30, 50, 57, 4, 29, 30, 53, 
	57, 4, 39, 55, 56, 57, 5, 27, 
	29, 30, 50, 57, 5, 27, 29, 30, 
	53, 57, 5, 28, 29, 30, 50, 57, 
	5, 28, 29, 30, 53, 57
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 41, 42, 44, 46, 48, 54, 59, 
	60, 62, 64, 65, 66, 68, 70, 72, 
	78, 79, 81, 83, 84, 89, 91, 93, 
	99, 100, 102, 104, 105, 107, 109, 117, 
	122, 130, 138, 139, 141, 143, 145, 151, 
	152, 154, 156, 157, 160, 163, 165, 167, 
	170, 173, 176, 181, 182, 183, 185, 187, 
	189, 195, 196, 198, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 209, 210, 214, 
	215, 216, 217, 221, 239, 244, 245, 247, 
	249, 251, 257, 262, 263, 265, 267, 268, 
	269, 271, 273, 275, 281, 282, 284, 286, 
	287, 292, 294, 296, 302, 303, 305, 307, 
	308, 310, 312, 320, 325, 333, 341, 342, 
	344, 346, 348, 354, 355, 357, 359, 360, 
	363, 366, 368, 370, 373, 376, 379, 385, 
	390, 391, 392, 394, 396, 398, 404, 405, 
	407, 409, 410, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 435, 438, 444, 445, 446, 
	447, 448, 449, 450, 451, 452, 453, 454, 
	455, 457, 460, 461, 462, 463, 464, 470, 
	471, 472, 473, 474, 475, 477, 478, 479, 
	480, 481, 487, 488, 489, 490, 491, 492, 
	493, 499, 500, 501, 502, 503, 505, 506, 
	507, 508, 509, 515, 516, 517, 518, 519, 
	520, 521, 527, 529, 530, 531, 532, 540, 
	541, 542, 543, 544, 545, 546, 547, 548, 
	549, 550, 551, 552, 553, 554, 555, 557, 
	560, 562, 568, 569, 570, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 581, 584, 
	585, 586, 587, 588, 590, 591, 592, 593, 
	594, 595, 597, 598, 599, 600, 601, 603, 
	604, 605, 606, 607, 608, 609, 611, 612, 
	613, 614, 615, 617, 618, 619, 620, 621, 
	623, 624, 625, 626, 627, 628, 629, 631, 
	632, 633, 634, 637, 638, 639, 640, 641, 
	642, 647, 649, 653, 655, 658, 660, 663, 
	664, 665, 666, 667, 668, 669, 670, 671, 
	672, 673, 674, 676, 677, 678, 679, 680, 
	681, 686, 688, 692, 694, 697, 699, 702, 
	703, 704, 705, 706, 707, 708, 709, 710, 
	711, 712, 713, 714, 715, 716, 721, 723, 
	727, 729, 732, 734, 737, 738, 739, 740, 
	741, 742, 743, 744, 745, 746, 747, 748, 
	749, 750, 751, 756, 758, 762, 764, 767, 
	769, 772, 773, 774, 775, 776, 777, 778, 
	779, 780, 781, 782, 783, 785, 786, 787, 
	788, 789, 791, 792, 793, 794, 795, 796, 
	797, 799, 800, 801, 802, 804, 805, 806, 
	809, 810, 811, 812, 813, 814, 819, 821, 
	825, 831, 834, 836, 839, 840, 841, 842, 
	843, 844, 845, 846, 847, 848, 849, 850, 
	852, 853, 854, 855, 856, 857, 862, 864, 
	868, 874, 877, 879, 882, 883, 884, 885, 
	886, 887, 888, 889, 890, 891, 892, 893, 
	894, 895, 896, 901, 903, 907, 913, 916, 
	918, 921, 922, 923, 924, 925, 926, 927, 
	928, 929, 930, 931, 932, 933, 934, 935, 
	940, 942, 946, 952, 955, 957, 960, 961, 
	962, 963, 964, 965, 966, 967, 968, 969, 
	970, 971, 973, 974, 975, 976, 977, 983, 
	984, 985, 986, 987, 988, 989, 995, 996, 
	997, 998, 1004, 1009, 1010, 1019, 1024, 1038, 
	1043
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 61, 
	94, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 34, 39, 47, 61, 
	123, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 47, 123, 125, 
	47, 123, 125, 47, 92, 47, 92, 99, 
	105, 125, 99, 105, 125, 99, 105, 125, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 116, 114, 105, 112, 45, 116, 97, 
	103, 115, 36, 42, 61, 94, 101, 120, 
	116, 36, 42, 61, 94, 32, 33, 36, 
	42, 45, 47, 61, 62, 94, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	47, 62, 9, 13, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 32, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 34, 
	39, 47, 61, 123, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 47, 92, 47, 92, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 47, 62, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	47, 123, 125, 47, 123, 125, 47, 92, 
	47, 92, 99, 105, 125, 99, 105, 125, 
	99, 105, 125, 32, 47, 62, 63, 9, 
	13, 32, 47, 62, 9, 13, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 111, 
	116, 116, 40, 58, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	41, 58, 32, 47, 58, 62, 9, 13, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	109, 112, 116, 121, 41, 58, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 97, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 41, 
	58, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 101, 
	120, 116, 41, 58, 104, 45, 99, 108, 
	111, 104, 105, 108, 100, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 32, 47, 58, 62, 9, 13, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 97, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 110, 
	108, 121, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 101, 120, 116, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	4, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 5, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 3, 3, 2, 2, 3, 
	3, 3, 3, 1, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 4, 10, 3, 1, 2, 2, 
	2, 4, 3, 1, 2, 2, 1, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	5, 2, 2, 4, 1, 2, 2, 1, 
	2, 2, 6, 3, 6, 6, 1, 2, 
	2, 2, 4, 1, 2, 2, 1, 3, 
	3, 2, 2, 3, 3, 3, 4, 3, 
	1, 1, 2, 2, 2, 4, 1, 2, 
	2, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 2, 1, 1, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	2, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	2, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 2, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 2, 1, 1, 3, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 4, 1, 1, 3, 1, 6, 3, 
	3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 1, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 2, 0, 3, 2, 4, 1, 
	1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 51, 53, 56, 59, 62, 68, 73, 
	75, 78, 81, 83, 85, 88, 91, 94, 
	100, 102, 105, 108, 110, 116, 119, 122, 
	128, 130, 133, 136, 138, 141, 144, 152, 
	157, 165, 173, 175, 178, 181, 184, 190, 
	192, 195, 198, 200, 204, 208, 211, 214, 
	218, 222, 226, 231, 233, 235, 238, 241, 
	244, 250, 252, 255, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 283, 
	285, 287, 289, 294, 309, 314, 316, 319, 
	322, 325, 331, 336, 338, 341, 344, 346, 
	348, 351, 354, 357, 363, 365, 368, 371, 
	373, 379, 382, 385, 391, 393, 396, 399, 
	401, 404, 407, 415, 420, 428, 436, 438, 
	441, 444, 447, 453, 455, 458, 461, 463, 
	467, 471, 474, 477, 481, 485, 489, 495, 
	500, 502, 504, 507, 510, 513, 519, 521, 
	524, 527, 529, 538, 540, 542, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	564, 566, 568, 570, 573, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 606, 608, 610, 612, 614, 620, 
	622, 624, 626, 628, 630, 633, 635, 637, 
	639, 641, 647, 649, 651, 653, 655, 657, 
	659, 665, 667, 669, 671, 673, 676, 678, 
	680, 682, 684, 690, 692, 694, 696, 698, 
	700, 702, 708, 711, 713, 715, 717, 726, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	761, 764, 770, 772, 774, 776, 778, 780, 
	782, 784, 786, 788, 790, 792, 794, 797, 
	799, 801, 803, 805, 808, 810, 812, 814, 
	816, 818, 821, 823, 825, 827, 829, 832, 
	834, 836, 838, 840, 842, 844, 847, 849, 
	851, 853, 855, 858, 860, 862, 864, 866, 
	869, 871, 873, 875, 877, 879, 881, 884, 
	886, 888, 890, 894, 896, 898, 900, 902, 
	904, 909, 911, 915, 918, 922, 924, 927, 
	929, 931, 933, 935, 937, 939, 941, 943, 
	945, 947, 949, 952, 954, 956, 958, 960, 
	962, 967, 969, 973, 976, 980, 982, 985, 
	987, 989, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1018, 1020, 
	1024, 1027, 1031, 1033, 1036, 1038, 1040, 1042, 
	1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 
	1060, 1062, 1064, 1069, 1071, 1075, 1078, 1082, 
	1084, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1109, 1112, 1114, 1116, 
	1118, 1120, 1123, 1125, 1127, 1129, 1131, 1133, 
	1135, 1138, 1140, 1142, 1144, 1147, 1149, 1151, 
	1155, 1157, 1159, 1161, 1163, 1165, 1170, 1172, 
	1176, 1182, 1186, 1188, 1191, 1193, 1195, 1197, 
	1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 
	1216, 1218, 1220, 1222, 1224, 1226, 1231, 1233, 
	1237, 1243, 1247, 1249, 1252, 1254, 1256, 1258, 
	1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 
	1276, 1278, 1280, 1285, 1287, 1291, 1297, 1301, 
	1303, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 
	1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 
	1339, 1341, 1345, 1351, 1355, 1357, 1360, 1362, 
	1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 
	1380, 1382, 1385, 1387, 1389, 1391, 1393, 1399, 
	1401, 1403, 1405, 1407, 1409, 1411, 1417, 1419, 
	1421, 1423, 1429, 1433, 1435, 1442, 1446, 1457, 
	1462
};

static const short _hext_trans_targs[] = {
	527, 1, 3, 522, 525, 526, 526, 0, 
	4, 5, 154, 527, 4, 0, 4, 5, 
	527, 6, 4, 91, 91, 0, 528, 0, 
	7, 77, 87, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 68, 0, 18, 0, 19, 24, 0, 
	21, 23, 20, 21, 23, 20, 4, 22, 
	5, 527, 4, 0, 4, 5, 527, 4, 
	0, 23, 20, 21, 26, 25, 21, 26, 
	25, 26, 25, 28, 0, 29, 33, 0, 
	31, 32, 30, 31, 32, 30, 4, 22, 
	5, 527, 4, 0, 32, 30, 31, 35, 
	34, 31, 35, 34, 35, 34, 37, 41, 
	44, 51, 59, 0, 39, 40, 38, 39, 
	40, 38, 4, 22, 5, 527, 4, 0, 
	40, 38, 39, 43, 42, 39, 43, 42, 
	43, 42, 46, 50, 45, 46, 50, 45, 
	4, 47, 5, 527, 48, 49, 4, 0, 
	4, 5, 527, 4, 0, 4, 47, 5, 
	527, 48, 49, 4, 0, 4, 47, 5, 
	527, 48, 49, 4, 0, 50, 45, 52, 
	56, 0, 54, 55, 53, 54, 55, 53, 
	4, 22, 5, 527, 4, 0, 55, 53, 
	54, 58, 57, 54, 58, 57, 58, 57, 
	0, 0, 0, 60, 61, 0, 66, 60, 
	63, 67, 62, 63, 67, 62, 64, 65, 
	66, 0, 64, 65, 66, 0, 64, 65, 
	66, 0, 4, 5, 527, 4, 0, 67, 
	62, 69, 0, 70, 74, 0, 72, 73, 
	71, 72, 73, 71, 4, 22, 5, 527, 
	4, 0, 73, 71, 72, 76, 75, 72, 
	76, 75, 76, 75, 78, 0, 79, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	84, 0, 85, 0, 86, 0, 17, 27, 
	36, 68, 0, 88, 0, 89, 0, 90, 
	0, 17, 27, 36, 68, 0, 4, 92, 
	93, 103, 91, 5, 112, 527, 145, 91, 
	4, 91, 91, 91, 0, 4, 5, 527, 
	4, 0, 94, 0, 95, 100, 0, 97, 
	99, 96, 97, 99, 96, 4, 98, 5, 
	527, 4, 0, 4, 5, 527, 4, 0, 
	99, 96, 97, 102, 101, 97, 102, 101, 
	102, 101, 104, 0, 105, 109, 0, 107, 
	108, 106, 107, 108, 106, 4, 98, 5, 
	527, 4, 0, 108, 106, 107, 111, 110, 
	107, 111, 110, 111, 110, 113, 117, 120, 
	127, 135, 0, 115, 116, 114, 115, 116, 
	114, 4, 98, 5, 527, 4, 0, 116, 
	114, 115, 119, 118, 115, 119, 118, 119, 
	118, 122, 126, 121, 122, 126, 121, 4, 
	123, 5, 527, 124, 125, 4, 0, 4, 
	5, 527, 4, 0, 4, 123, 5, 527, 
	124, 125, 4, 0, 4, 123, 5, 527, 
	124, 125, 4, 0, 126, 121, 128, 132, 
	0, 130, 131, 129, 130, 131, 129, 4, 
	98, 5, 527, 4, 0, 131, 129, 130, 
	134, 133, 130, 134, 133, 134, 133, 0, 
	0, 0, 136, 137, 0, 142, 136, 139, 
	144, 138, 139, 144, 138, 140, 141, 142, 
	0, 140, 141, 142, 0, 140, 141, 142, 
	0, 4, 5, 527, 143, 4, 0, 4, 
	5, 527, 4, 0, 144, 138, 146, 0, 
	147, 151, 0, 149, 150, 148, 149, 150, 
	148, 4, 98, 5, 527, 4, 0, 150, 
	148, 149, 153, 152, 149, 153, 152, 153, 
	152, 155, 173, 186, 191, 209, 226, 501, 
	518, 0, 156, 0, 157, 0, 158, 0, 
	159, 0, 160, 0, 161, 0, 162, 0, 
	163, 0, 164, 0, 165, 0, 166, 0, 
	167, 0, 168, 0, 169, 0, 170, 0, 
	171, 0, 172, 171, 0, 4, 5, 154, 
	527, 4, 0, 174, 0, 175, 0, 176, 
	0, 177, 0, 178, 0, 179, 0, 180, 
	0, 181, 0, 182, 0, 183, 0, 184, 
	0, 185, 0, 172, 185, 0, 187, 0, 
	188, 0, 189, 0, 190, 0, 4, 5, 
	154, 527, 4, 0, 192, 0, 193, 0, 
	194, 0, 195, 0, 196, 0, 197, 202, 
	0, 198, 0, 199, 0, 200, 0, 201, 
	0, 4, 5, 154, 527, 4, 0, 203, 
	0, 204, 0, 205, 0, 206, 0, 207, 
	0, 208, 0, 4, 5, 154, 527, 4, 
	0, 210, 0, 211, 0, 212, 0, 213, 
	0, 214, 219, 0, 215, 0, 216, 0, 
	217, 0, 218, 0, 4, 5, 154, 527, 
	4, 0, 220, 0, 221, 0, 222, 0, 
	223, 0, 224, 0, 225, 0, 4, 5, 
	154, 527, 4, 0, 227, 413, 0, 228, 
	0, 229, 0, 230, 0, 231, 250, 263, 
	268, 286, 303, 392, 409, 0, 232, 0, 
	233, 0, 234, 0, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 247, 0, 248, 247, 
	0, 249, 230, 0, 4, 5, 154, 527, 
	4, 0, 251, 0, 252, 0, 253, 0, 
	254, 0, 255, 0, 256, 0, 257, 0, 
	258, 0, 259, 0, 260, 0, 261, 0, 
	262, 0, 248, 262, 0, 264, 0, 265, 
	0, 266, 0, 267, 0, 249, 230, 0, 
	269, 0, 270, 0, 271, 0, 272, 0, 
	273, 0, 274, 279, 0, 275, 0, 276, 
	0, 277, 0, 278, 0, 249, 230, 0, 
	280, 0, 281, 0, 282, 0, 283, 0, 
	284, 0, 285, 0, 249, 230, 0, 287, 
	0, 288, 0, 289, 0, 290, 0, 291, 
	296, 0, 292, 0, 293, 0, 294, 0, 
	295, 0, 249, 230, 0, 297, 0, 298, 
	0, 299, 0, 300, 0, 301, 0, 302, 
	0, 249, 230, 0, 304, 0, 305, 0, 
	306, 0, 307, 326, 371, 0, 308, 0, 
	309, 0, 310, 0, 311, 0, 312, 0, 
	313, 319, 323, 314, 0, 314, 0, 315, 
	316, 314, 0, 249, 230, 0, 315, 317, 
	317, 0, 318, 0, 315, 318, 0, 320, 
	0, 321, 0, 322, 0, 315, 0, 324, 
	0, 325, 0, 315, 0, 327, 0, 328, 
	0, 329, 0, 330, 0, 331, 350, 0, 
	332, 0, 333, 0, 334, 0, 335, 0, 
	336, 0, 337, 343, 347, 338, 0, 338, 
	0, 339, 340, 338, 0, 249, 230, 0, 
	339, 341, 341, 0, 342, 0, 339, 342, 
	0, 344, 0, 345, 0, 346, 0, 339, 
	0, 348, 0, 349, 0, 339, 0, 351, 
	0, 352, 0, 353, 0, 354, 0, 355, 
	0, 356, 0, 357, 0, 358, 364, 368, 
	359, 0, 359, 0, 360, 361, 359, 0, 
	249, 230, 0, 360, 362, 362, 0, 363, 
	0, 360, 363, 0, 365, 0, 366, 0, 
	367, 0, 360, 0, 369, 0, 370, 0, 
	360, 0, 372, 0, 373, 0, 374, 0, 
	375, 0, 376, 0, 377, 0, 378, 0, 
	379, 385, 389, 380, 0, 380, 0, 381, 
	382, 380, 0, 249, 230, 0, 381, 383, 
	383, 0, 384, 0, 381, 384, 0, 386, 
	0, 387, 0, 388, 0, 381, 0, 390, 
	0, 391, 0, 381, 0, 393, 0, 394, 
	0, 395, 0, 396, 0, 397, 402, 0, 
	398, 0, 399, 0, 400, 0, 401, 0, 
	249, 230, 0, 403, 0, 404, 0, 405, 
	0, 406, 0, 407, 0, 408, 0, 249, 
	230, 0, 410, 0, 411, 0, 412, 0, 
	249, 230, 0, 414, 0, 415, 0, 416, 
	435, 480, 0, 417, 0, 418, 0, 419, 
	0, 420, 0, 421, 0, 422, 428, 432, 
	423, 0, 423, 0, 424, 425, 423, 0, 
	4, 5, 154, 527, 4, 0, 424, 426, 
	426, 0, 427, 0, 424, 427, 0, 429, 
	0, 430, 0, 431, 0, 424, 0, 433, 
	0, 434, 0, 424, 0, 436, 0, 437, 
	0, 438, 0, 439, 0, 440, 459, 0, 
	441, 0, 442, 0, 443, 0, 444, 0, 
	445, 0, 446, 452, 456, 447, 0, 447, 
	0, 448, 449, 447, 0, 4, 5, 154, 
	527, 4, 0, 448, 450, 450, 0, 451, 
	0, 448, 451, 0, 453, 0, 454, 0, 
	455, 0, 448, 0, 457, 0, 458, 0, 
	448, 0, 460, 0, 461, 0, 462, 0, 
	463, 0, 464, 0, 465, 0, 466, 0, 
	467, 473, 477, 468, 0, 468, 0, 469, 
	470, 468, 0, 4, 5, 154, 527, 4, 
	0, 469, 471, 471, 0, 472, 0, 469, 
	472, 0, 474, 0, 475, 0, 476, 0, 
	469, 0, 478, 0, 479, 0, 469, 0, 
	481, 0, 482, 0, 483, 0, 484, 0, 
	485, 0, 486, 0, 487, 0, 488, 494, 
	498, 489, 0, 489, 0, 490, 491, 489, 
	0, 4, 5, 154, 527, 4, 0, 490, 
	492, 492, 0, 493, 0, 490, 493, 0, 
	495, 0, 496, 0, 497, 0, 490, 0, 
	499, 0, 500, 0, 490, 0, 502, 0, 
	503, 0, 504, 0, 505, 0, 506, 511, 
	0, 507, 0, 508, 0, 509, 0, 510, 
	0, 4, 5, 154, 527, 4, 0, 512, 
	0, 513, 0, 514, 0, 515, 0, 516, 
	0, 517, 0, 4, 5, 154, 527, 4, 
	0, 519, 0, 520, 0, 521, 0, 4, 
	5, 154, 527, 4, 0, 523, 524, 524, 
	0, 527, 0, 524, 527, 524, 524, 524, 
	524, 0, 3, 526, 526, 0, 4, 526, 
	5, 154, 527, 526, 4, 526, 526, 526, 
	0, 527, 1, 2, 527, 0, 527, 1, 
	2, 527, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 185, 0, 67, 185, 185, 81, 
	69, 69, 69, 69, 69, 81, 0, 0, 
	0, 0, 0, 45, 45, 81, 0, 81, 
	0, 0, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 37, 37, 
	37, 37, 81, 0, 81, 0, 0, 81, 
	173, 49, 49, 51, 0, 0, 255, 65, 
	255, 255, 255, 81, 207, 207, 207, 207, 
	81, 0, 0, 176, 53, 53, 55, 0, 
	0, 0, 0, 0, 81, 0, 0, 81, 
	173, 49, 49, 51, 0, 0, 247, 63, 
	247, 247, 247, 81, 0, 0, 176, 53, 
	53, 55, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 81, 173, 49, 49, 51, 
	0, 0, 223, 57, 223, 223, 223, 81, 
	0, 0, 176, 53, 53, 55, 0, 0, 
	0, 0, 158, 25, 25, 27, 0, 0, 
	263, 167, 263, 263, 0, 0, 263, 81, 
	203, 203, 203, 203, 81, 290, 195, 290, 
	290, 31, 31, 290, 81, 278, 191, 278, 
	278, 29, 29, 278, 81, 0, 0, 0, 
	0, 81, 173, 49, 49, 51, 0, 0, 
	231, 59, 231, 231, 231, 81, 0, 0, 
	176, 53, 53, 55, 0, 0, 0, 0, 
	81, 81, 81, 41, 43, 81, 43, 0, 
	158, 25, 25, 27, 0, 0, 0, 0, 
	33, 81, 31, 31, 164, 81, 29, 29, 
	161, 81, 179, 179, 179, 179, 81, 0, 
	0, 0, 81, 0, 0, 81, 173, 49, 
	49, 51, 0, 0, 239, 61, 239, 239, 
	239, 81, 0, 0, 176, 53, 53, 55, 
	0, 0, 0, 0, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 39, 39, 
	39, 39, 81, 0, 81, 0, 81, 0, 
	81, 35, 35, 35, 35, 81, 273, 170, 
	47, 47, 0, 273, 47, 273, 47, 0, 
	273, 0, 0, 0, 81, 219, 219, 219, 
	219, 81, 0, 81, 0, 0, 81, 173, 
	49, 49, 51, 0, 0, 259, 65, 259, 
	259, 259, 81, 215, 215, 215, 215, 81, 
	0, 0, 176, 53, 53, 55, 0, 0, 
	0, 0, 0, 81, 0, 0, 81, 173, 
	49, 49, 51, 0, 0, 251, 63, 251, 
	251, 251, 81, 0, 0, 176, 53, 53, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 81, 173, 49, 49, 51, 0, 
	0, 227, 57, 227, 227, 227, 81, 0, 
	0, 176, 53, 53, 55, 0, 0, 0, 
	0, 158, 25, 25, 27, 0, 0, 268, 
	167, 268, 268, 0, 0, 268, 81, 211, 
	211, 211, 211, 81, 296, 195, 296, 296, 
	31, 31, 296, 81, 284, 191, 284, 284, 
	29, 29, 284, 81, 0, 0, 0, 0, 
	81, 173, 49, 49, 51, 0, 0, 235, 
	59, 235, 235, 235, 81, 0, 0, 176, 
	53, 53, 55, 0, 0, 0, 0, 81, 
	81, 81, 41, 43, 81, 43, 0, 158, 
	25, 25, 27, 0, 0, 0, 0, 33, 
	81, 31, 31, 164, 81, 29, 29, 161, 
	81, 182, 182, 182, 0, 182, 81, 199, 
	199, 199, 199, 81, 0, 0, 0, 81, 
	0, 0, 81, 173, 49, 49, 51, 0, 
	0, 243, 61, 243, 243, 243, 81, 0, 
	0, 176, 53, 53, 55, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	17, 81, 19, 0, 81, 73, 73, 73, 
	73, 73, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 13, 81, 15, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 89, 89, 
	89, 89, 89, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 113, 113, 113, 113, 113, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 119, 119, 119, 119, 119, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 125, 125, 125, 125, 
	125, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 131, 131, 
	131, 131, 131, 81, 0, 0, 81, 0, 
	81, 0, 81, 21, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 17, 81, 19, 0, 
	81, 23, 23, 81, 71, 71, 71, 71, 
	71, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	13, 81, 15, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 86, 86, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 110, 110, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 116, 116, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 122, 122, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 128, 128, 81, 0, 81, 0, 81, 
	0, 81, 0, 0, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	5, 0, 0, 5, 81, 0, 81, 7, 
	7, 0, 81, 92, 92, 81, 9, 83, 
	83, 81, 0, 81, 11, 0, 81, 0, 
	81, 0, 81, 0, 81, 1, 81, 0, 
	81, 0, 81, 3, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 5, 0, 0, 5, 81, 0, 
	81, 7, 7, 0, 81, 98, 98, 81, 
	9, 83, 83, 81, 0, 81, 11, 0, 
	81, 0, 81, 0, 81, 0, 81, 1, 
	81, 0, 81, 0, 81, 3, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 5, 0, 0, 
	5, 81, 0, 81, 7, 7, 0, 81, 
	134, 134, 81, 9, 83, 83, 81, 0, 
	81, 11, 0, 81, 0, 81, 0, 81, 
	0, 81, 1, 81, 0, 81, 0, 81, 
	3, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	5, 0, 0, 5, 81, 0, 81, 7, 
	7, 0, 81, 104, 104, 81, 9, 83, 
	83, 81, 0, 81, 11, 0, 81, 0, 
	81, 0, 81, 0, 81, 1, 81, 0, 
	81, 0, 81, 3, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	140, 140, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 146, 
	146, 81, 0, 81, 0, 81, 0, 81, 
	152, 152, 81, 0, 81, 0, 81, 0, 
	0, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 5, 0, 0, 
	5, 81, 0, 81, 7, 7, 0, 81, 
	95, 95, 95, 95, 95, 81, 9, 83, 
	83, 81, 0, 81, 11, 0, 81, 0, 
	81, 0, 81, 0, 81, 1, 81, 0, 
	81, 0, 81, 3, 81, 0, 81, 0, 
	81, 0, 81, 0, 81, 0, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 5, 0, 0, 5, 81, 0, 
	81, 7, 7, 0, 81, 101, 101, 101, 
	101, 101, 81, 9, 83, 83, 81, 0, 
	81, 11, 0, 81, 0, 81, 0, 81, 
	0, 81, 1, 81, 0, 81, 0, 81, 
	3, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	5, 0, 0, 5, 81, 0, 81, 7, 
	7, 0, 81, 137, 137, 137, 137, 137, 
	81, 9, 83, 83, 81, 0, 81, 11, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	1, 81, 0, 81, 0, 81, 3, 81, 
	0, 81, 0, 81, 0, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 5, 0, 
	0, 5, 81, 0, 81, 7, 7, 0, 
	81, 107, 107, 107, 107, 107, 81, 9, 
	83, 83, 81, 0, 81, 11, 0, 81, 
	0, 81, 0, 81, 0, 81, 1, 81, 
	0, 81, 0, 81, 3, 81, 0, 81, 
	0, 81, 0, 81, 0, 81, 0, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 143, 143, 143, 143, 143, 81, 0, 
	81, 0, 81, 0, 81, 0, 81, 0, 
	81, 0, 81, 149, 149, 149, 149, 149, 
	81, 0, 81, 0, 81, 0, 81, 155, 
	155, 155, 155, 155, 81, 77, 77, 77, 
	81, 79, 81, 0, 79, 0, 0, 0, 
	0, 81, 188, 188, 188, 81, 69, 0, 
	69, 69, 69, 0, 69, 0, 0, 0, 
	81, 0, 0, 0, 0, 81, 75, 75, 
	75, 75, 81, 0
};

static const short _hext_eof_actions[] = {
	0, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 0, 
	75
};

static const int hext_start = 527;
static const int hext_first_final = 527;
static const int hext_error = 0;

static const int hext_en_main = 527;


#line 64 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: p_begin_(begin),
  p(begin),
  pe(end),
  eof(end),
  cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1022 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1027 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 1:
#line 14 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 2:
#line 18 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 19 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 4:
#line 22 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 5:
#line 24 "hext-machine.rl"
	{ TK_START; }
	break;
	case 6:
#line 25 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 7:
#line 34 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 8:
#line 39 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 40 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 10:
#line 46 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 47 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 12:
#line 52 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 13:
#line 56 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 14:
#line 60 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 15:
#line 64 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 16:
#line 68 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 17:
#line 72 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 18:
#line 76 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 19:
#line 80 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 20:
#line 83 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 21:
#line 86 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 22:
#line 89 "hext-machine.rl"
	{ pv.set_trait<TextNodeMatch>(); }
	break;
	case 23:
#line 93 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 24:
#line 96 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->take_match(std::move(pv.trait));
     }
	break;
	case 25:
#line 106 "hext-machine.rl"
	{ TK_START; }
	break;
	case 26:
#line 106 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 27:
#line 110 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 28:
#line 113 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 29:
#line 115 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 30:
#line 125 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 31:
#line 131 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 32:
#line 133 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 33:
#line 135 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 34:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 35:
#line 144 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 36:
#line 155 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 37:
#line 159 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 38:
#line 164 "hext-machine.rl"
	{ TK_START; }
	break;
	case 39:
#line 165 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 40:
#line 171 "hext-machine.rl"
	{ TK_START; }
	break;
	case 41:
#line 171 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 42:
#line 176 "hext-machine.rl"
	{ TK_START; }
	break;
	case 43:
#line 176 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 44:
#line 183 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 45:
#line 186 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 46:
#line 189 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 47:
#line 192 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 48:
#line 195 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 49:
#line 203 "hext-machine.rl"
	{ if( pv.regex )
           cur_rule().append_capture<FunctionCapture>(pv.builtin, pv.cap_var, *pv.regex);
         else
           cur_rule().append_capture<FunctionCapture>(pv.builtin, pv.cap_var); }
	break;
	case 50:
#line 210 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 51:
#line 214 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 52:
#line 218 "hext-machine.rl"
	{ if( pv.regex )
           cur_rule()
             .append_capture<AttributeCapture>(pv.attr_name, pv.cap_var, *pv.regex);
         else
           cur_rule().append_capture<AttributeCapture>(pv.attr_name, pv.cap_var);
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 53:
#line 229 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 54:
#line 233 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 55:
#line 237 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 56:
#line 240 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 57:
#line 241 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 58:
#line 259 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 59:
#line 262 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 60:
#line 265 "hext-machine.rl"
	{ TK_START; }
	break;
	case 61:
#line 266 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 62:
#line 269 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 63:
#line 272 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 64:
#line 280 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 65:
#line 287 "hext-machine.rl"
	{ TK_START; }
	break;
	case 66:
#line 288 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 67:
#line 293 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1395 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 64:
#line 280 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 67:
#line 293 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1419 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 117 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    // Top rules are implicitly any descendant.
    this->top_rule_->set_any_descendant(true);
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

