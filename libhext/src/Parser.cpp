// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/ChildCountMatch.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine definition. Accesses local variables of Parser::parse().
#define TK_STOP      \
  assert(tok_begin); \
  assert(p);         \
  tok_end = p;       \
  tok = std::string( \
    tok_begin,       \
    static_cast<std::string::size_type>(std::distance(tok_begin, tok_end)) \
  );

/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 67 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	67, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 2, 
	3, 64, 2, 4, 5, 2, 6, 7, 
	2, 8, 9, 2, 10, 11, 2, 16, 
	17, 2, 19, 35, 2, 19, 72, 2, 
	24, 35, 2, 24, 72, 2, 25, 35, 
	2, 25, 72, 2, 26, 35, 2, 26, 
	72, 2, 27, 35, 2, 27, 72, 2, 
	28, 35, 2, 28, 72, 2, 29, 35, 
	2, 29, 72, 2, 30, 35, 2, 30, 
	72, 2, 31, 35, 2, 31, 72, 2, 
	32, 35, 2, 32, 72, 2, 33, 35, 
	2, 33, 72, 2, 36, 37, 2, 38, 
	40, 2, 39, 40, 2, 40, 41, 2, 
	67, 69, 2, 68, 69, 3, 0, 61, 
	66, 3, 1, 59, 66, 3, 1, 60, 
	66, 3, 1, 62, 66, 3, 1, 63, 
	66, 3, 1, 65, 66, 3, 38, 40, 
	41, 3, 39, 40, 41, 3, 50, 58, 
	66, 3, 50, 61, 66, 3, 52, 58, 
	66, 3, 52, 61, 66, 3, 53, 60, 
	66, 3, 53, 63, 66, 3, 54, 60, 
	66, 3, 54, 63, 66, 3, 55, 60, 
	66, 3, 55, 63, 66, 3, 56, 60, 
	66, 3, 56, 63, 66, 3, 57, 60, 
	66, 3, 57, 63, 66, 4, 3, 64, 
	65, 66, 4, 40, 41, 59, 66, 4, 
	40, 41, 62, 66, 5, 38, 40, 41, 
	59, 66, 5, 38, 40, 41, 62, 66, 
	5, 39, 40, 41, 59, 66, 5, 39, 
	40, 41, 62, 66
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 43, 44, 46, 48, 50, 56, 61, 
	62, 64, 66, 67, 68, 70, 72, 74, 
	80, 81, 83, 85, 86, 87, 98, 100, 
	102, 107, 108, 110, 112, 113, 125, 129, 
	131, 133, 139, 140, 142, 144, 145, 147, 
	149, 157, 162, 170, 178, 179, 181, 183, 
	185, 191, 192, 194, 196, 197, 198, 200, 
	202, 204, 210, 211, 213, 215, 216, 220, 
	221, 222, 223, 224, 225, 226, 228, 230, 
	232, 233, 235, 236, 238, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 250, 252, 
	254, 255, 257, 258, 260, 262, 263, 264, 
	265, 266, 267, 268, 269, 271, 273, 276, 
	278, 281, 284, 285, 286, 287, 288, 291, 
	293, 295, 297, 298, 300, 301, 303, 305, 
	306, 307, 308, 309, 310, 311, 312, 313, 
	314, 315, 321, 322, 323, 324, 330, 349, 
	354, 355, 357, 359, 361, 367, 372, 373, 
	375, 377, 378, 379, 381, 383, 385, 391, 
	392, 394, 396, 397, 416, 420, 422, 424, 
	430, 431, 433, 435, 436, 438, 440, 448, 
	453, 461, 469, 470, 472, 474, 476, 482, 
	483, 485, 487, 488, 490, 492, 498, 503, 
	504, 506, 508, 509, 522, 523, 525, 527, 
	529, 535, 536, 538, 540, 541, 545, 546, 
	547, 548, 549, 550, 551, 553, 555, 557, 
	558, 560, 561, 572, 573, 575, 577, 578, 
	579, 580, 581, 582, 583, 584, 585, 587, 
	589, 591, 592, 594, 595, 597, 599, 600, 
	601, 602, 603, 604, 605, 606, 608, 610, 
	613, 615, 618, 621, 622, 623, 624, 625, 
	628, 630, 632, 634, 635, 637, 638, 640, 
	642, 643, 650, 651, 652, 653, 654, 655, 
	656, 657, 658, 659, 660, 661, 662, 663, 
	664, 665, 667, 670, 676, 677, 678, 679, 
	680, 681, 682, 683, 684, 685, 686, 687, 
	689, 692, 693, 694, 695, 696, 702, 703, 
	704, 705, 706, 707, 709, 710, 711, 712, 
	713, 719, 720, 721, 722, 723, 724, 725, 
	731, 732, 733, 734, 735, 737, 738, 739, 
	740, 741, 747, 748, 749, 750, 751, 752, 
	753, 759, 761, 762, 763, 764, 771, 772, 
	773, 774, 775, 776, 777, 778, 779, 780, 
	781, 782, 783, 784, 785, 786, 788, 791, 
	793, 799, 800, 801, 802, 803, 804, 805, 
	806, 807, 808, 809, 810, 812, 815, 816, 
	817, 818, 819, 821, 822, 823, 824, 825, 
	826, 828, 829, 830, 831, 832, 834, 835, 
	836, 837, 838, 839, 840, 842, 843, 844, 
	845, 846, 848, 849, 850, 851, 852, 854, 
	855, 856, 857, 858, 859, 860, 862, 863, 
	864, 865, 868, 869, 870, 871, 872, 873, 
	878, 880, 884, 886, 889, 891, 894, 895, 
	896, 897, 898, 899, 900, 901, 902, 903, 
	904, 905, 907, 908, 909, 910, 911, 912, 
	917, 919, 923, 925, 928, 930, 933, 934, 
	935, 936, 937, 938, 939, 940, 941, 942, 
	943, 944, 945, 946, 947, 952, 954, 958, 
	960, 963, 965, 968, 969, 970, 971, 972, 
	973, 974, 975, 976, 977, 978, 979, 980, 
	981, 982, 987, 989, 993, 995, 998, 1000, 
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 
	1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 
	1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 
	1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 
	1040, 1045, 1047, 1051, 1057, 1060, 1062, 1065, 
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 
	1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 
	1083, 1088, 1090, 1094, 1100, 1103, 1105, 1108, 
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 
	1117, 1118, 1119, 1120, 1121, 1122, 1127, 1129, 
	1133, 1139, 1142, 1144, 1147, 1148, 1149, 1150, 
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 
	1159, 1160, 1161, 1166, 1168, 1172, 1178, 1181, 
	1183, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 
	1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 
	1202, 1203, 1209, 1210, 1211, 1212, 1213, 1214, 
	1215, 1221, 1226, 1227, 1236, 1241, 1255, 1260, 
	1265
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 45, 
	61, 94, 124, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 62, 34, 
	39, 95, 45, 46, 48, 57, 65, 90, 
	97, 122, 34, 92, 34, 92, 32, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 32, 47, 62, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 34, 39, 47, 
	61, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 61, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	97, 112, 114, 116, 112, 112, 101, 110, 
	100, 40, 34, 39, 34, 92, 34, 92, 
	41, 45, 124, 92, 39, 92, 39, 92, 
	92, 114, 101, 112, 101, 110, 100, 40, 
	34, 39, 34, 92, 34, 92, 41, 45, 
	124, 92, 39, 92, 39, 92, 92, 101, 
	103, 101, 120, 40, 47, 47, 92, 47, 
	92, 41, 99, 105, 45, 124, 41, 99, 
	105, 41, 99, 105, 92, 114, 105, 109, 
	40, 45, 124, 34, 39, 34, 92, 34, 
	92, 41, 45, 124, 92, 39, 92, 39, 
	92, 92, 116, 114, 105, 112, 45, 116, 
	97, 103, 115, 36, 42, 45, 61, 94, 
	124, 101, 120, 116, 36, 42, 45, 61, 
	94, 124, 32, 33, 36, 42, 45, 47, 
	61, 62, 94, 95, 124, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	9, 13, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 33, 36, 
	42, 45, 47, 61, 62, 94, 95, 124, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	34, 39, 47, 61, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 47, 92, 47, 92, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 47, 62, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 33, 47, 
	62, 99, 105, 9, 13, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	34, 92, 34, 92, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	63, 95, 9, 13, 45, 57, 65, 90, 
	97, 122, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 97, 112, 114, 
	116, 112, 112, 101, 110, 100, 40, 34, 
	39, 34, 92, 34, 92, 41, 45, 124, 
	62, 34, 39, 95, 45, 46, 48, 57, 
	65, 90, 97, 122, 92, 39, 92, 39, 
	92, 92, 114, 101, 112, 101, 110, 100, 
	40, 34, 39, 34, 92, 34, 92, 41, 
	45, 124, 92, 39, 92, 39, 92, 92, 
	101, 103, 101, 120, 40, 47, 47, 92, 
	47, 92, 41, 99, 105, 45, 124, 41, 
	99, 105, 41, 99, 105, 92, 114, 105, 
	109, 40, 45, 124, 34, 39, 34, 92, 
	34, 92, 41, 45, 124, 92, 39, 92, 
	39, 92, 92, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 111, 
	116, 116, 40, 58, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 114, 105, 98, 
	117, 116, 101, 45, 99, 111, 117, 110, 
	116, 40, 48, 57, 41, 48, 57, 41, 
	58, 32, 47, 58, 62, 9, 13, 104, 
	105, 108, 100, 45, 99, 111, 117, 110, 
	116, 40, 48, 57, 41, 48, 57, 109, 
	112, 116, 121, 41, 58, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	41, 58, 102, 45, 116, 121, 112, 101, 
	41, 58, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 41, 58, 102, 45, 
	116, 121, 112, 101, 41, 58, 116, 104, 
	45, 99, 108, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 41, 58, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 41, 58, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 110, 108, 121, 45, 99, 111, 
	104, 105, 108, 100, 41, 58, 102, 45, 
	116, 121, 112, 101, 41, 58, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	97, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 32, 47, 58, 62, 9, 
	13, 102, 45, 116, 121, 112, 101, 32, 
	47, 58, 62, 9, 13, 42, 65, 90, 
	97, 122, 62, 45, 62, 95, 48, 57, 
	65, 90, 97, 122, 42, 65, 90, 97, 
	122, 32, 45, 47, 58, 62, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 32, 34, 35, 39, 60, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	6, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 3, 2, 2, 
	3, 1, 2, 2, 1, 4, 4, 2, 
	2, 4, 1, 2, 2, 1, 2, 2, 
	6, 3, 6, 6, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 4, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 2, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 2, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 3, 2, 
	3, 3, 1, 1, 1, 1, 3, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 6, 1, 1, 1, 6, 11, 3, 
	1, 2, 2, 2, 4, 3, 1, 2, 
	2, 1, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 11, 4, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 2, 2, 4, 3, 1, 
	2, 2, 1, 5, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 4, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	2, 1, 3, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 1, 2, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 3, 3, 1, 1, 1, 1, 3, 
	2, 2, 2, 1, 2, 1, 2, 2, 
	1, 7, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 2, 1, 1, 1, 7, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 2, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 3, 
	0, 2, 2, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 3, 
	0, 2, 2, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 3, 1, 6, 3, 3, 
	6
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 4, 0, 0, 
	1, 0, 0, 0, 0, 4, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 1, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 4, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 4, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 2, 0, 3, 2, 4, 1, 1, 
	5
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 53, 55, 58, 61, 64, 70, 75, 
	77, 80, 83, 85, 87, 90, 93, 96, 
	102, 104, 107, 110, 112, 114, 122, 125, 
	128, 133, 135, 138, 141, 143, 152, 157, 
	160, 163, 169, 171, 174, 177, 179, 182, 
	185, 193, 198, 206, 214, 216, 219, 222, 
	225, 231, 233, 236, 239, 241, 243, 246, 
	249, 252, 258, 260, 263, 266, 268, 273, 
	275, 277, 279, 281, 283, 285, 288, 291, 
	294, 296, 299, 301, 304, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 326, 329, 
	332, 334, 337, 339, 342, 345, 347, 349, 
	351, 353, 355, 357, 359, 362, 365, 369, 
	372, 376, 380, 382, 384, 386, 388, 392, 
	395, 398, 401, 403, 406, 408, 411, 414, 
	416, 418, 420, 422, 424, 426, 428, 430, 
	432, 434, 441, 443, 445, 447, 454, 470, 
	475, 477, 480, 483, 486, 492, 497, 499, 
	502, 505, 507, 509, 512, 515, 518, 524, 
	526, 529, 532, 534, 550, 555, 558, 561, 
	567, 569, 572, 575, 577, 580, 583, 591, 
	596, 604, 612, 614, 617, 620, 623, 629, 
	631, 634, 637, 639, 642, 645, 651, 656, 
	658, 661, 664, 666, 676, 678, 681, 684, 
	687, 693, 695, 698, 701, 703, 708, 710, 
	712, 714, 716, 718, 720, 723, 726, 729, 
	731, 734, 736, 744, 746, 749, 752, 754, 
	756, 758, 760, 762, 764, 766, 768, 771, 
	774, 777, 779, 782, 784, 787, 790, 792, 
	794, 796, 798, 800, 802, 804, 807, 810, 
	814, 817, 821, 825, 827, 829, 831, 833, 
	837, 840, 843, 846, 848, 851, 853, 856, 
	859, 861, 869, 871, 873, 875, 877, 879, 
	881, 883, 885, 887, 889, 891, 893, 895, 
	897, 899, 901, 904, 910, 912, 914, 916, 
	918, 920, 922, 924, 926, 928, 930, 932, 
	934, 937, 939, 941, 943, 945, 951, 953, 
	955, 957, 959, 961, 964, 966, 968, 970, 
	972, 978, 980, 982, 984, 986, 988, 990, 
	996, 998, 1000, 1002, 1004, 1007, 1009, 1011, 
	1013, 1015, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1039, 1042, 1044, 1046, 1048, 1056, 1058, 
	1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 
	1076, 1078, 1080, 1082, 1084, 1086, 1088, 1091, 
	1094, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 
	1114, 1116, 1118, 1120, 1122, 1124, 1127, 1129, 
	1131, 1133, 1135, 1138, 1140, 1142, 1144, 1146, 
	1148, 1151, 1153, 1155, 1157, 1159, 1162, 1164, 
	1166, 1168, 1170, 1172, 1174, 1177, 1179, 1181, 
	1183, 1185, 1188, 1190, 1192, 1194, 1196, 1199, 
	1201, 1203, 1205, 1207, 1209, 1211, 1214, 1216, 
	1218, 1220, 1224, 1226, 1228, 1230, 1232, 1234, 
	1239, 1241, 1245, 1248, 1252, 1254, 1257, 1259, 
	1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 
	1277, 1279, 1282, 1284, 1286, 1288, 1290, 1292, 
	1297, 1299, 1303, 1306, 1310, 1312, 1315, 1317, 
	1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 
	1335, 1337, 1339, 1341, 1343, 1348, 1350, 1354, 
	1357, 1361, 1363, 1366, 1368, 1370, 1372, 1374, 
	1376, 1378, 1380, 1382, 1384, 1386, 1388, 1390, 
	1392, 1394, 1399, 1401, 1405, 1408, 1412, 1414, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1433, 1435, 1437, 1439, 1442, 1444, 1446, 1448, 
	1450, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1468, 1470, 1472, 1476, 1478, 1480, 1482, 1484, 
	1486, 1491, 1493, 1497, 1503, 1507, 1509, 1512, 
	1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 
	1530, 1532, 1534, 1537, 1539, 1541, 1543, 1545, 
	1547, 1552, 1554, 1558, 1564, 1568, 1570, 1573, 
	1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 
	1591, 1593, 1595, 1597, 1599, 1601, 1606, 1608, 
	1612, 1618, 1622, 1624, 1627, 1629, 1631, 1633, 
	1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 
	1651, 1653, 1655, 1660, 1662, 1666, 1672, 1676, 
	1678, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 
	1695, 1697, 1699, 1701, 1703, 1706, 1708, 1710, 
	1712, 1714, 1720, 1722, 1724, 1726, 1728, 1730, 
	1732, 1738, 1742, 1744, 1751, 1755, 1766, 1771, 
	1776
};

static const short _hext_trans_targs[] = {
	638, 1, 3, 633, 636, 637, 637, 0, 
	4, 5, 273, 638, 4, 0, 4, 5, 
	638, 6, 4, 150, 150, 0, 639, 0, 
	7, 136, 146, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 46, 69, 78, 0, 18, 0, 19, 
	24, 0, 21, 23, 20, 21, 23, 20, 
	4, 22, 5, 638, 4, 0, 4, 5, 
	638, 4, 0, 23, 20, 21, 26, 25, 
	21, 26, 25, 26, 25, 28, 0, 29, 
	33, 0, 31, 32, 30, 31, 32, 30, 
	4, 22, 5, 638, 4, 0, 32, 30, 
	31, 35, 34, 31, 35, 34, 35, 34, 
	37, 0, 38, 42, 45, 45, 45, 45, 
	45, 0, 40, 41, 39, 40, 41, 39, 
	4, 5, 638, 4, 0, 41, 39, 40, 
	44, 43, 40, 44, 43, 44, 43, 4, 
	5, 638, 45, 4, 45, 45, 45, 0, 
	47, 51, 54, 61, 0, 49, 50, 48, 
	49, 50, 48, 4, 22, 5, 638, 4, 
	0, 50, 48, 49, 53, 52, 49, 53, 
	52, 53, 52, 56, 60, 55, 56, 60, 
	55, 4, 57, 5, 638, 58, 59, 4, 
	0, 4, 5, 638, 4, 0, 4, 57, 
	5, 638, 58, 59, 4, 0, 4, 57, 
	5, 638, 58, 59, 4, 0, 60, 55, 
	62, 66, 0, 64, 65, 63, 64, 65, 
	63, 4, 22, 5, 638, 4, 0, 65, 
	63, 64, 68, 67, 64, 68, 67, 68, 
	67, 70, 0, 71, 75, 0, 73, 74, 
	72, 73, 74, 72, 4, 22, 5, 638, 
	4, 0, 74, 72, 73, 77, 76, 73, 
	77, 76, 77, 76, 79, 94, 110, 123, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 91, 0, 
	88, 90, 87, 88, 90, 87, 89, 0, 
	36, 78, 0, 90, 87, 88, 93, 92, 
	88, 93, 92, 93, 92, 95, 0, 96, 
	0, 97, 0, 98, 0, 99, 0, 100, 
	0, 101, 0, 102, 107, 0, 104, 106, 
	103, 104, 106, 103, 105, 0, 36, 78, 
	0, 106, 103, 104, 109, 108, 104, 109, 
	108, 109, 108, 111, 0, 112, 0, 113, 
	0, 114, 0, 115, 0, 116, 0, 118, 
	122, 117, 118, 122, 117, 119, 120, 121, 
	0, 36, 78, 0, 119, 120, 121, 0, 
	119, 120, 121, 0, 122, 117, 124, 0, 
	125, 0, 126, 0, 127, 36, 78, 0, 
	128, 133, 0, 130, 132, 129, 130, 132, 
	129, 131, 0, 36, 78, 0, 132, 129, 
	130, 135, 134, 130, 135, 134, 135, 134, 
	137, 0, 138, 0, 139, 0, 140, 0, 
	141, 0, 142, 0, 143, 0, 144, 0, 
	145, 0, 17, 27, 36, 46, 69, 78, 
	0, 147, 0, 148, 0, 149, 0, 17, 
	27, 36, 46, 69, 78, 0, 4, 151, 
	152, 162, 171, 5, 172, 638, 204, 150, 
	213, 4, 150, 150, 150, 0, 4, 5, 
	638, 4, 0, 153, 0, 154, 159, 0, 
	156, 158, 155, 156, 158, 155, 4, 157, 
	5, 638, 4, 0, 4, 5, 638, 4, 
	0, 158, 155, 156, 161, 160, 156, 161, 
	160, 161, 160, 163, 0, 164, 168, 0, 
	166, 167, 165, 166, 167, 165, 4, 157, 
	5, 638, 4, 0, 167, 165, 166, 170, 
	169, 166, 170, 169, 170, 169, 4, 151, 
	152, 162, 171, 5, 172, 640, 204, 150, 
	213, 4, 150, 150, 150, 0, 173, 177, 
	180, 187, 0, 175, 176, 174, 175, 176, 
	174, 4, 157, 5, 638, 4, 0, 176, 
	174, 175, 179, 178, 175, 179, 178, 179, 
	178, 182, 186, 181, 182, 186, 181, 4, 
	183, 5, 638, 184, 185, 4, 0, 4, 
	5, 638, 4, 0, 4, 183, 5, 638, 
	184, 185, 4, 0, 4, 183, 5, 638, 
	184, 185, 4, 0, 186, 181, 188, 192, 
	0, 190, 191, 189, 190, 191, 189, 4, 
	157, 5, 638, 4, 0, 191, 189, 190, 
	194, 193, 190, 194, 193, 194, 193, 197, 
	199, 196, 197, 199, 196, 4, 5, 638, 
	198, 4, 0, 4, 5, 638, 4, 0, 
	199, 196, 197, 202, 201, 197, 202, 201, 
	202, 201, 4, 5, 638, 198, 203, 4, 
	203, 203, 203, 0, 205, 0, 206, 210, 
	0, 208, 209, 207, 208, 209, 207, 4, 
	157, 5, 638, 4, 0, 209, 207, 208, 
	212, 211, 208, 212, 211, 212, 211, 214, 
	231, 247, 260, 0, 215, 0, 216, 0, 
	217, 0, 218, 0, 219, 0, 220, 0, 
	221, 228, 0, 223, 227, 222, 223, 227, 
	222, 224, 0, 225, 213, 0, 226, 0, 
	195, 200, 203, 203, 203, 203, 203, 0, 
	227, 222, 223, 230, 229, 223, 230, 229, 
	230, 229, 232, 0, 233, 0, 234, 0, 
	235, 0, 236, 0, 237, 0, 238, 0, 
	239, 244, 0, 241, 243, 240, 241, 243, 
	240, 242, 0, 225, 213, 0, 243, 240, 
	241, 246, 245, 241, 246, 245, 246, 245, 
	248, 0, 249, 0, 250, 0, 251, 0, 
	252, 0, 253, 0, 255, 259, 254, 255, 
	259, 254, 256, 257, 258, 0, 225, 213, 
	0, 256, 257, 258, 0, 256, 257, 258, 
	0, 259, 254, 261, 0, 262, 0, 263, 
	0, 264, 225, 213, 0, 265, 270, 0, 
	267, 269, 266, 267, 269, 266, 268, 0, 
	225, 213, 0, 269, 266, 267, 272, 271, 
	267, 272, 271, 272, 271, 274, 292, 305, 
	310, 328, 345, 616, 0, 275, 0, 276, 
	0, 277, 0, 278, 0, 279, 0, 280, 
	0, 281, 0, 282, 0, 283, 0, 284, 
	0, 285, 0, 286, 0, 287, 0, 288, 
	0, 289, 0, 290, 0, 291, 290, 0, 
	4, 5, 273, 638, 4, 0, 293, 0, 
	294, 0, 295, 0, 296, 0, 297, 0, 
	298, 0, 299, 0, 300, 0, 301, 0, 
	302, 0, 303, 0, 304, 0, 291, 304, 
	0, 306, 0, 307, 0, 308, 0, 309, 
	0, 4, 5, 273, 638, 4, 0, 311, 
	0, 312, 0, 313, 0, 314, 0, 315, 
	0, 316, 321, 0, 317, 0, 318, 0, 
	319, 0, 320, 0, 4, 5, 273, 638, 
	4, 0, 322, 0, 323, 0, 324, 0, 
	325, 0, 326, 0, 327, 0, 4, 5, 
	273, 638, 4, 0, 329, 0, 330, 0, 
	331, 0, 332, 0, 333, 338, 0, 334, 
	0, 335, 0, 336, 0, 337, 0, 4, 
	5, 273, 638, 4, 0, 339, 0, 340, 
	0, 341, 0, 342, 0, 343, 0, 344, 
	0, 4, 5, 273, 638, 4, 0, 346, 
	528, 0, 347, 0, 348, 0, 349, 0, 
	350, 369, 382, 387, 405, 422, 511, 0, 
	351, 0, 352, 0, 353, 0, 354, 0, 
	355, 0, 356, 0, 357, 0, 358, 0, 
	359, 0, 360, 0, 361, 0, 362, 0, 
	363, 0, 364, 0, 365, 0, 366, 0, 
	367, 366, 0, 368, 349, 0, 4, 5, 
	273, 638, 4, 0, 370, 0, 371, 0, 
	372, 0, 373, 0, 374, 0, 375, 0, 
	376, 0, 377, 0, 378, 0, 379, 0, 
	380, 0, 381, 0, 367, 381, 0, 383, 
	0, 384, 0, 385, 0, 386, 0, 368, 
	349, 0, 388, 0, 389, 0, 390, 0, 
	391, 0, 392, 0, 393, 398, 0, 394, 
	0, 395, 0, 396, 0, 397, 0, 368, 
	349, 0, 399, 0, 400, 0, 401, 0, 
	402, 0, 403, 0, 404, 0, 368, 349, 
	0, 406, 0, 407, 0, 408, 0, 409, 
	0, 410, 415, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 368, 349, 0, 416, 
	0, 417, 0, 418, 0, 419, 0, 420, 
	0, 421, 0, 368, 349, 0, 423, 0, 
	424, 0, 425, 0, 426, 445, 490, 0, 
	427, 0, 428, 0, 429, 0, 430, 0, 
	431, 0, 432, 438, 442, 433, 0, 433, 
	0, 434, 435, 433, 0, 368, 349, 0, 
	434, 436, 436, 0, 437, 0, 434, 437, 
	0, 439, 0, 440, 0, 441, 0, 434, 
	0, 443, 0, 444, 0, 434, 0, 446, 
	0, 447, 0, 448, 0, 449, 0, 450, 
	469, 0, 451, 0, 452, 0, 453, 0, 
	454, 0, 455, 0, 456, 462, 466, 457, 
	0, 457, 0, 458, 459, 457, 0, 368, 
	349, 0, 458, 460, 460, 0, 461, 0, 
	458, 461, 0, 463, 0, 464, 0, 465, 
	0, 458, 0, 467, 0, 468, 0, 458, 
	0, 470, 0, 471, 0, 472, 0, 473, 
	0, 474, 0, 475, 0, 476, 0, 477, 
	483, 487, 478, 0, 478, 0, 479, 480, 
	478, 0, 368, 349, 0, 479, 481, 481, 
	0, 482, 0, 479, 482, 0, 484, 0, 
	485, 0, 486, 0, 479, 0, 488, 0, 
	489, 0, 479, 0, 491, 0, 492, 0, 
	493, 0, 494, 0, 495, 0, 496, 0, 
	497, 0, 498, 504, 508, 499, 0, 499, 
	0, 500, 501, 499, 0, 368, 349, 0, 
	500, 502, 502, 0, 503, 0, 500, 503, 
	0, 505, 0, 506, 0, 507, 0, 500, 
	0, 509, 0, 510, 0, 500, 0, 512, 
	0, 513, 0, 514, 0, 515, 0, 516, 
	521, 0, 517, 0, 518, 0, 519, 0, 
	520, 0, 368, 349, 0, 522, 0, 523, 
	0, 524, 0, 525, 0, 526, 0, 527, 
	0, 368, 349, 0, 529, 0, 530, 0, 
	531, 550, 595, 0, 532, 0, 533, 0, 
	534, 0, 535, 0, 536, 0, 537, 543, 
	547, 538, 0, 538, 0, 539, 540, 538, 
	0, 4, 5, 273, 638, 4, 0, 539, 
	541, 541, 0, 542, 0, 539, 542, 0, 
	544, 0, 545, 0, 546, 0, 539, 0, 
	548, 0, 549, 0, 539, 0, 551, 0, 
	552, 0, 553, 0, 554, 0, 555, 574, 
	0, 556, 0, 557, 0, 558, 0, 559, 
	0, 560, 0, 561, 567, 571, 562, 0, 
	562, 0, 563, 564, 562, 0, 4, 5, 
	273, 638, 4, 0, 563, 565, 565, 0, 
	566, 0, 563, 566, 0, 568, 0, 569, 
	0, 570, 0, 563, 0, 572, 0, 573, 
	0, 563, 0, 575, 0, 576, 0, 577, 
	0, 578, 0, 579, 0, 580, 0, 581, 
	0, 582, 588, 592, 583, 0, 583, 0, 
	584, 585, 583, 0, 4, 5, 273, 638, 
	4, 0, 584, 586, 586, 0, 587, 0, 
	584, 587, 0, 589, 0, 590, 0, 591, 
	0, 584, 0, 593, 0, 594, 0, 584, 
	0, 596, 0, 597, 0, 598, 0, 599, 
	0, 600, 0, 601, 0, 602, 0, 603, 
	609, 613, 604, 0, 604, 0, 605, 606, 
	604, 0, 4, 5, 273, 638, 4, 0, 
	605, 607, 607, 0, 608, 0, 605, 608, 
	0, 610, 0, 611, 0, 612, 0, 605, 
	0, 614, 0, 615, 0, 605, 0, 617, 
	0, 618, 0, 619, 0, 620, 0, 621, 
	626, 0, 622, 0, 623, 0, 624, 0, 
	625, 0, 4, 5, 273, 638, 4, 0, 
	627, 0, 628, 0, 629, 0, 630, 0, 
	631, 0, 632, 0, 4, 5, 273, 638, 
	4, 0, 634, 635, 635, 0, 638, 0, 
	635, 638, 635, 635, 635, 635, 0, 3, 
	637, 637, 0, 4, 637, 5, 273, 638, 
	637, 4, 637, 637, 637, 0, 638, 1, 
	2, 638, 0, 638, 1, 2, 638, 0, 
	638, 195, 1, 200, 2, 203, 638, 203, 
	203, 203, 203, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 199, 0, 87, 199, 199, 101, 
	89, 89, 89, 89, 89, 101, 0, 0, 
	0, 0, 0, 1, 1, 101, 0, 101, 
	0, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 57, 57, 
	57, 57, 57, 57, 101, 0, 101, 0, 
	0, 101, 106, 5, 5, 7, 0, 0, 
	285, 85, 285, 285, 285, 101, 213, 213, 
	213, 213, 101, 0, 0, 109, 9, 9, 
	11, 0, 0, 0, 0, 0, 101, 0, 
	0, 101, 106, 5, 5, 7, 0, 0, 
	277, 83, 277, 277, 277, 101, 0, 0, 
	109, 9, 9, 11, 0, 0, 0, 0, 
	0, 101, 0, 0, 73, 73, 73, 73, 
	73, 101, 112, 13, 13, 15, 0, 0, 
	237, 237, 237, 237, 101, 0, 0, 115, 
	17, 17, 19, 0, 0, 0, 0, 245, 
	245, 245, 0, 245, 0, 0, 0, 101, 
	0, 0, 0, 0, 101, 106, 5, 5, 
	7, 0, 0, 253, 77, 253, 253, 253, 
	101, 0, 0, 109, 9, 9, 11, 0, 
	0, 0, 0, 187, 45, 45, 47, 0, 
	0, 298, 196, 298, 298, 0, 0, 298, 
	101, 209, 209, 209, 209, 101, 320, 233, 
	320, 320, 51, 51, 320, 101, 308, 229, 
	308, 308, 49, 49, 308, 101, 0, 0, 
	0, 0, 101, 106, 5, 5, 7, 0, 
	0, 261, 79, 261, 261, 261, 101, 0, 
	0, 109, 9, 9, 11, 0, 0, 0, 
	0, 0, 101, 0, 0, 101, 106, 5, 
	5, 7, 0, 0, 269, 81, 269, 269, 
	269, 101, 0, 0, 109, 9, 9, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 0, 101, 
	112, 13, 13, 15, 0, 0, 0, 101, 
	67, 67, 101, 0, 0, 115, 17, 17, 
	19, 0, 0, 0, 0, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 0, 101, 112, 13, 
	13, 15, 0, 0, 0, 101, 65, 65, 
	101, 0, 0, 115, 17, 17, 19, 0, 
	0, 0, 0, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 187, 
	45, 45, 47, 0, 0, 53, 0, 0, 
	101, 69, 69, 101, 193, 51, 51, 101, 
	190, 49, 49, 101, 0, 0, 0, 101, 
	0, 101, 0, 101, 0, 61, 61, 101, 
	0, 0, 101, 112, 13, 13, 15, 0, 
	0, 0, 101, 63, 63, 101, 0, 0, 
	115, 17, 17, 19, 0, 0, 0, 0, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 59, 59, 59, 59, 59, 59, 
	101, 0, 101, 0, 101, 0, 101, 55, 
	55, 55, 55, 55, 55, 101, 293, 103, 
	3, 3, 3, 293, 3, 293, 3, 0, 
	3, 293, 0, 0, 0, 101, 225, 225, 
	225, 225, 101, 0, 101, 0, 0, 101, 
	106, 5, 5, 7, 0, 0, 289, 85, 
	289, 289, 289, 101, 221, 221, 221, 221, 
	101, 0, 0, 109, 9, 9, 11, 0, 
	0, 0, 0, 0, 101, 0, 0, 101, 
	106, 5, 5, 7, 0, 0, 281, 83, 
	281, 281, 281, 101, 0, 0, 109, 9, 
	9, 11, 0, 0, 0, 0, 293, 103, 
	3, 3, 3, 293, 3, 293, 3, 0, 
	3, 293, 0, 0, 0, 101, 0, 0, 
	0, 0, 101, 106, 5, 5, 7, 0, 
	0, 257, 77, 257, 257, 257, 101, 0, 
	0, 109, 9, 9, 11, 0, 0, 0, 
	0, 187, 45, 45, 47, 0, 0, 303, 
	196, 303, 303, 0, 0, 303, 101, 217, 
	217, 217, 217, 101, 326, 233, 326, 326, 
	51, 51, 326, 101, 314, 229, 314, 314, 
	49, 49, 314, 101, 0, 0, 0, 0, 
	101, 106, 5, 5, 7, 0, 0, 265, 
	79, 265, 265, 265, 101, 0, 0, 109, 
	9, 9, 11, 0, 0, 0, 0, 112, 
	13, 13, 15, 0, 0, 241, 241, 241, 
	71, 241, 101, 205, 205, 205, 205, 101, 
	0, 0, 115, 17, 17, 19, 0, 0, 
	0, 0, 249, 249, 249, 75, 0, 249, 
	0, 0, 0, 101, 0, 101, 0, 0, 
	101, 106, 5, 5, 7, 0, 0, 273, 
	81, 273, 273, 273, 101, 0, 0, 109, 
	9, 9, 11, 0, 0, 0, 0, 0, 
	0, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 0, 101, 112, 13, 13, 15, 0, 
	0, 0, 101, 67, 67, 101, 0, 101, 
	0, 0, 73, 73, 73, 73, 73, 101, 
	0, 0, 115, 17, 17, 19, 0, 0, 
	0, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 0, 101, 112, 13, 13, 15, 0, 
	0, 0, 101, 65, 65, 101, 0, 0, 
	115, 17, 17, 19, 0, 0, 0, 0, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 187, 45, 45, 47, 
	0, 0, 53, 0, 0, 101, 69, 69, 
	101, 193, 51, 51, 101, 190, 49, 49, 
	101, 0, 0, 0, 101, 0, 101, 0, 
	101, 0, 61, 61, 101, 0, 0, 101, 
	112, 13, 13, 15, 0, 0, 0, 101, 
	63, 63, 101, 0, 0, 115, 17, 17, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 37, 101, 39, 0, 101, 
	93, 93, 93, 93, 93, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 33, 101, 35, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 124, 124, 124, 124, 124, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 148, 148, 148, 148, 
	148, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 154, 154, 
	154, 154, 154, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 160, 
	160, 160, 160, 160, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 166, 166, 166, 166, 166, 101, 0, 
	0, 101, 0, 101, 0, 101, 41, 101, 
	0, 0, 0, 0, 0, 0, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 37, 101, 
	39, 0, 101, 43, 43, 101, 91, 91, 
	91, 91, 91, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 33, 101, 35, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 121, 
	121, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 145, 
	145, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 151, 151, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 157, 157, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 163, 163, 101, 0, 101, 
	0, 101, 0, 101, 0, 0, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 25, 0, 0, 25, 101, 0, 
	101, 27, 27, 0, 101, 127, 127, 101, 
	29, 118, 118, 101, 0, 101, 31, 0, 
	101, 0, 101, 0, 101, 0, 101, 21, 
	101, 0, 101, 0, 101, 23, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 25, 0, 0, 25, 
	101, 0, 101, 27, 27, 0, 101, 133, 
	133, 101, 29, 118, 118, 101, 0, 101, 
	31, 0, 101, 0, 101, 0, 101, 0, 
	101, 21, 101, 0, 101, 0, 101, 23, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 25, 
	0, 0, 25, 101, 0, 101, 27, 27, 
	0, 101, 169, 169, 101, 29, 118, 118, 
	101, 0, 101, 31, 0, 101, 0, 101, 
	0, 101, 0, 101, 21, 101, 0, 101, 
	0, 101, 23, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 25, 0, 0, 25, 101, 0, 
	101, 27, 27, 0, 101, 139, 139, 101, 
	29, 118, 118, 101, 0, 101, 31, 0, 
	101, 0, 101, 0, 101, 0, 101, 21, 
	101, 0, 101, 0, 101, 23, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 175, 175, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 181, 181, 101, 0, 101, 0, 101, 
	0, 0, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 25, 0, 
	0, 25, 101, 0, 101, 27, 27, 0, 
	101, 130, 130, 130, 130, 130, 101, 29, 
	118, 118, 101, 0, 101, 31, 0, 101, 
	0, 101, 0, 101, 0, 101, 21, 101, 
	0, 101, 0, 101, 23, 101, 0, 101, 
	0, 101, 0, 101, 0, 101, 0, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 25, 0, 0, 25, 101, 
	0, 101, 27, 27, 0, 101, 136, 136, 
	136, 136, 136, 101, 29, 118, 118, 101, 
	0, 101, 31, 0, 101, 0, 101, 0, 
	101, 0, 101, 21, 101, 0, 101, 0, 
	101, 23, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 25, 0, 0, 25, 101, 0, 101, 
	27, 27, 0, 101, 172, 172, 172, 172, 
	172, 101, 29, 118, 118, 101, 0, 101, 
	31, 0, 101, 0, 101, 0, 101, 0, 
	101, 21, 101, 0, 101, 0, 101, 23, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 25, 
	0, 0, 25, 101, 0, 101, 27, 27, 
	0, 101, 142, 142, 142, 142, 142, 101, 
	29, 118, 118, 101, 0, 101, 31, 0, 
	101, 0, 101, 0, 101, 0, 101, 21, 
	101, 0, 101, 0, 101, 23, 101, 0, 
	101, 0, 101, 0, 101, 0, 101, 0, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 178, 178, 178, 178, 178, 101, 
	0, 101, 0, 101, 0, 101, 0, 101, 
	0, 101, 0, 101, 184, 184, 184, 184, 
	184, 101, 97, 97, 97, 101, 99, 101, 
	0, 99, 0, 0, 0, 0, 101, 202, 
	202, 202, 101, 89, 0, 89, 89, 89, 
	0, 89, 0, 0, 0, 101, 0, 0, 
	0, 0, 101, 95, 95, 95, 95, 101, 
	0, 0, 0, 0, 0, 73, 0, 73, 
	73, 73, 73, 101, 0
};

static const short _hext_eof_actions[] = {
	0, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 0, 95, 
	0
};

static const int hext_start = 638;
static const int hext_first_final = 638;
static const int hext_error = 0;

static const int hext_en_main = 638;


#line 67 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  // tok_begin, tok_end, tok will be accessed by the macros TK_START and
  // TK_STOP.
  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1210 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1215 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 11 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 15 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 20 "hext-machine.rl"
	{ TK_START; }
	break;
	case 3:
#line 21 "hext-machine.rl"
	{ TK_STOP; pv.attr_name = tok; }
	break;
	case 4:
#line 27 "hext-machine.rl"
	{ TK_START; }
	break;
	case 5:
#line 27 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 6:
#line 32 "hext-machine.rl"
	{ TK_START; }
	break;
	case 7:
#line 32 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 8:
#line 38 "hext-machine.rl"
	{ TK_START; }
	break;
	case 9:
#line 38 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 10:
#line 43 "hext-machine.rl"
	{ TK_START; }
	break;
	case 11:
#line 43 "hext-machine.rl"
	{ TK_STOP; pv.literal_value = tok; }
	break;
	case 12:
#line 51 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 54 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 58 "hext-machine.rl"
	{ TK_START; }
	break;
	case 15:
#line 59 "hext-machine.rl"
	{ TK_STOP; pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 62 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 64 "hext-machine.rl"
	{ TK_START; }
	break;
	case 18:
#line 65 "hext-machine.rl"
	{ TK_STOP; pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 74 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 79 "hext-machine.rl"
	{ TK_START; }
	break;
	case 21:
#line 80 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 86 "hext-machine.rl"
	{ TK_START; }
	break;
	case 23:
#line 87 "hext-machine.rl"
	{ TK_STOP; pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 92 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 96 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 100 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 104 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 108 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 112 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 116 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 120 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 123 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 126 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 130 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 133 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 143 "hext-machine.rl"
	{ TK_START; }
	break;
	case 37:
#line 143 "hext-machine.rl"
	{ TK_STOP; }
	break;
	case 38:
#line 147 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 150 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 152 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 162 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 168 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 170 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 172 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 180 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 184 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 188 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 48:
#line 192 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 49:
#line 194 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 50:
#line 200 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 51:
#line 202 "hext-machine.rl"
	{ TK_START; }
	break;
	case 52:
#line 203 "hext-machine.rl"
	{ TK_STOP; pv.cap_var = tok; }
	break;
	case 53:
#line 210 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 54:
#line 213 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 55:
#line 216 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 56:
#line 219 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 57:
#line 222 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 58:
#line 230 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 59:
#line 235 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 60:
#line 239 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 61:
#line 243 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 62:
#line 251 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 63:
#line 255 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 64:
#line 259 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 65:
#line 262 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 66:
#line 263 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 67:
#line 281 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 68:
#line 284 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 69:
#line 287 "hext-machine.rl"
	{ TK_START; }
	break;
	case 70:
#line 288 "hext-machine.rl"
	{ TK_STOP; set_open_tag_or_throw(tok); }
	break;
	case 71:
#line 291 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 72:
#line 294 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 73:
#line 302 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 74:
#line 309 "hext-machine.rl"
	{ TK_START; }
	break;
	case 75:
#line 310 "hext-machine.rl"
	{ TK_STOP;
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 76:
#line 315 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1614 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 73:
#line 302 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 76:
#line 315 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 1638 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 122 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

