// This file was generated from Parser.cpp.rl.

#line 1 "Parser.cpp.rl"
// Copyright 2015 Thomas Trapp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "Parser.h"

#include "hext/AppendPipe.h"
#include "hext/AttributeCapture.h"
#include "hext/AttributeCountMatch.h"
#include "hext/AttributeMatch.h"
#include "hext/BeginsWithTest.h"
#include "hext/Builtins.h"
#include "hext/Capture.h"
#include "hext/CasePipe.h"
#include "hext/ChildCountMatch.h"
#include "hext/CollapseWsPipe.h"
#include "hext/ContainsTest.h"
#include "hext/ContainsWordsTest.h"
#include "hext/EndsWithTest.h"
#include "hext/EqualsTest.h"
#include "hext/FunctionCapture.h"
#include "hext/FunctionValueMatch.h"
#include "hext/Match.h"
#include "hext/NegateMatch.h"
#include "hext/NegateTest.h"
#include "hext/NthChildMatch.h"
#include "hext/OnlyChildMatch.h"
#include "hext/PrependPipe.h"
#include "hext/RegexPipe.h"
#include "hext/RegexReplacePipe.h"
#include "hext/RegexTest.h"
#include "hext/TrimPipe.h"
#include "hext/ValueTest.h"

#include "PatternValues.h"
#include "StringUtil.h"

#include <vector>
#include <sstream>
#include <utility>
#include <algorithm>

#include <gumbo.h>


namespace hext {


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 66 "Parser.cpp.tmp"
static const char _hext_actions[] = {
	0, 1, 2, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	18, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 49, 1, 
	50, 1, 51, 1, 52, 1, 53, 1, 
	54, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 61, 1, 
	71, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 2, 
	3, 68, 2, 4, 5, 2, 6, 7, 
	2, 8, 9, 2, 10, 11, 2, 16, 
	17, 2, 19, 35, 2, 19, 76, 2, 
	24, 35, 2, 24, 76, 2, 25, 35, 
	2, 25, 76, 2, 26, 35, 2, 26, 
	76, 2, 27, 35, 2, 27, 76, 2, 
	28, 35, 2, 28, 76, 2, 29, 35, 
	2, 29, 76, 2, 30, 35, 2, 30, 
	76, 2, 31, 35, 2, 31, 76, 2, 
	32, 35, 2, 32, 76, 2, 33, 35, 
	2, 33, 76, 2, 36, 37, 2, 38, 
	40, 2, 39, 40, 2, 40, 41, 2, 
	71, 73, 2, 72, 73, 3, 0, 65, 
	70, 3, 1, 63, 70, 3, 1, 64, 
	70, 3, 1, 66, 70, 3, 1, 67, 
	70, 3, 1, 69, 70, 3, 38, 40, 
	41, 3, 39, 40, 41, 3, 54, 62, 
	70, 3, 54, 65, 70, 3, 56, 62, 
	70, 3, 56, 65, 70, 3, 57, 64, 
	70, 3, 57, 67, 70, 3, 58, 64, 
	70, 3, 58, 67, 70, 3, 59, 64, 
	70, 3, 59, 67, 70, 3, 60, 64, 
	70, 3, 60, 67, 70, 3, 61, 64, 
	70, 3, 61, 67, 70, 4, 3, 68, 
	69, 70, 4, 40, 41, 63, 70, 4, 
	40, 41, 66, 70, 5, 38, 40, 41, 
	63, 70, 5, 38, 40, 41, 66, 70, 
	5, 39, 40, 41, 63, 70, 5, 39, 
	40, 41, 66, 70
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 102, 104, 106, 
	111, 112, 114, 116, 117, 129, 142, 155, 
	168, 181, 194, 207, 209, 211, 213, 214, 
	215, 216, 218, 220, 221, 234, 247, 260, 
	273, 286, 299, 312, 325, 338, 351, 364, 
	377, 390, 403, 416, 429, 430, 432, 434, 
	437, 438, 441, 444, 445, 458, 471, 484, 
	497, 510, 523, 536, 538, 540, 542, 543, 
	544, 545, 547, 549, 550, 563, 576, 589, 
	602, 615, 628, 641, 642, 644, 646, 652, 
	656, 661, 663, 665, 666, 667, 668, 670, 
	672, 673, 679, 685, 686, 700, 714, 727, 
	740, 753, 766, 779, 792, 805, 818, 831, 
	844, 857, 870, 884, 886, 888, 890, 891, 
	892, 893, 895, 897, 898, 902, 904, 906, 
	912, 913, 915, 917, 918, 920, 922, 924, 
	930, 931, 933, 935, 936, 937, 939, 941, 
	949, 954, 962, 970, 971, 972, 974, 976, 
	978, 984, 985, 987, 989, 990, 991, 992, 
	993, 994, 995, 996, 997, 998, 999, 1004, 
	1005, 1006, 1007, 1012, 1031, 1036, 1037, 1039, 
	1041, 1043, 1049, 1054, 1055, 1057, 1059, 1060, 
	1061, 1063, 1065, 1067, 1073, 1074, 1076, 1078, 
	1079, 1096, 1098, 1100, 1106, 1111, 1112, 1114, 
	1116, 1117, 1130, 1144, 1158, 1172, 1186, 1200, 
	1214, 1216, 1218, 1220, 1221, 1222, 1223, 1225, 
	1227, 1228, 1242, 1256, 1270, 1284, 1298, 1312, 
	1326, 1340, 1354, 1368, 1382, 1396, 1410, 1424, 
	1438, 1452, 1453, 1455, 1457, 1460, 1461, 1464, 
	1467, 1468, 1482, 1496, 1510, 1524, 1538, 1552, 
	1566, 1568, 1570, 1572, 1573, 1574, 1575, 1577, 
	1579, 1580, 1594, 1608, 1622, 1636, 1650, 1664, 
	1678, 1679, 1681, 1683, 1689, 1693, 1698, 1700, 
	1702, 1703, 1704, 1705, 1707, 1709, 1710, 1716, 
	1722, 1723, 1738, 1753, 1767, 1781, 1795, 1809, 
	1823, 1837, 1851, 1865, 1879, 1893, 1907, 1921, 
	1936, 1938, 1940, 1942, 1943, 1944, 1945, 1947, 
	1949, 1950, 1954, 1956, 1958, 1964, 1965, 1967, 
	1969, 1970, 1972, 1974, 1976, 1982, 1983, 1985, 
	1987, 1988, 1989, 1991, 1993, 2001, 2006, 2014, 
	2022, 2023, 2024, 2026, 2028, 2030, 2036, 2037, 
	2039, 2041, 2042, 2049, 2050, 2051, 2052, 2053, 
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 
	2062, 2063, 2064, 2066, 2069, 2075, 2076, 2077, 
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 
	2086, 2088, 2091, 2092, 2093, 2094, 2095, 2101, 
	2102, 2103, 2104, 2105, 2106, 2108, 2109, 2110, 
	2111, 2112, 2118, 2119, 2120, 2121, 2122, 2123, 
	2124, 2130, 2131, 2132, 2133, 2134, 2136, 2137, 
	2138, 2139, 2140, 2146, 2147, 2148, 2149, 2150, 
	2151, 2152, 2158, 2160, 2161, 2162, 2163, 2170, 
	2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2187, 
	2190, 2192, 2198, 2199, 2200, 2201, 2202, 2203, 
	2204, 2205, 2206, 2207, 2208, 2209, 2211, 2214, 
	2215, 2216, 2217, 2218, 2220, 2221, 2222, 2223, 
	2224, 2225, 2227, 2228, 2229, 2230, 2231, 2233, 
	2234, 2235, 2236, 2237, 2238, 2239, 2241, 2242, 
	2243, 2244, 2245, 2247, 2248, 2249, 2250, 2251, 
	2253, 2254, 2255, 2256, 2257, 2258, 2259, 2261, 
	2262, 2263, 2264, 2267, 2268, 2269, 2270, 2271, 
	2272, 2277, 2279, 2283, 2285, 2288, 2290, 2293, 
	2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 
	2302, 2303, 2304, 2306, 2307, 2308, 2309, 2310, 
	2311, 2316, 2318, 2322, 2324, 2327, 2329, 2332, 
	2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 
	2341, 2342, 2343, 2344, 2345, 2346, 2351, 2353, 
	2357, 2359, 2362, 2364, 2367, 2368, 2369, 2370, 
	2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 
	2379, 2380, 2381, 2386, 2388, 2392, 2394, 2397, 
	2399, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 
	2409, 2410, 2411, 2412, 2413, 2415, 2416, 2417, 
	2418, 2419, 2421, 2422, 2423, 2424, 2425, 2426, 
	2427, 2429, 2430, 2431, 2434, 2435, 2436, 2437, 
	2438, 2439, 2444, 2446, 2450, 2456, 2459, 2461, 
	2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 
	2472, 2473, 2474, 2475, 2477, 2478, 2479, 2480, 
	2481, 2482, 2487, 2489, 2493, 2499, 2502, 2504, 
	2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 
	2515, 2516, 2517, 2518, 2519, 2520, 2521, 2526, 
	2528, 2532, 2538, 2541, 2543, 2546, 2547, 2548, 
	2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 
	2557, 2558, 2559, 2560, 2565, 2567, 2571, 2577, 
	2580, 2582, 2585, 2586, 2587, 2588, 2589, 2590, 
	2591, 2592, 2593, 2594, 2595, 2596, 2598, 2599, 
	2600, 2601, 2602, 2608, 2609, 2610, 2611, 2612, 
	2613, 2614, 2620, 2625, 2626, 2635, 2640, 2654, 
	2659
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 58, 
	61, 94, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 95, 
	97, 99, 102, 112, 114, 116, 45, 46, 
	48, 57, 65, 90, 98, 122, 34, 92, 
	34, 92, 32, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 112, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 110, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 100, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 40, 47, 62, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 34, 
	39, 34, 92, 34, 92, 41, 58, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	95, 111, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 108, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 108, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	97, 9, 13, 45, 57, 65, 90, 98, 
	122, 32, 47, 62, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 115, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 119, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 115, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 58, 62, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 105, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	108, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 116, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 114, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 47, 47, 92, 
	47, 92, 41, 99, 105, 58, 41, 99, 
	105, 41, 99, 105, 92, 32, 47, 62, 
	95, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 101, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 112, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 110, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 95, 100, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 40, 47, 62, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	34, 39, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 32, 47, 
	62, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 108, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 97, 9, 13, 45, 57, 65, 90, 
	98, 122, 32, 47, 62, 95, 99, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 40, 47, 62, 
	95, 9, 13, 45, 57, 65, 90, 97, 
	122, 47, 47, 92, 47, 92, 32, 44, 
	99, 105, 9, 13, 32, 44, 9, 13, 
	32, 34, 39, 9, 13, 34, 92, 34, 
	92, 41, 58, 92, 39, 92, 39, 92, 
	92, 32, 44, 99, 105, 9, 13, 32, 
	44, 99, 105, 9, 13, 92, 32, 47, 
	62, 95, 111, 114, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	108, 117, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 111, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 95, 119, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	58, 62, 95, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 95, 114, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 58, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 95, 
	105, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 95, 109, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 40, 
	47, 58, 62, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 34, 39, 34, 92, 
	34, 92, 41, 58, 92, 39, 92, 39, 
	92, 92, 34, 39, 61, 126, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 39, 92, 39, 92, 92, 
	47, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 116, 114, 
	105, 112, 45, 116, 97, 103, 115, 36, 
	42, 58, 61, 94, 101, 120, 116, 36, 
	42, 58, 61, 94, 32, 33, 36, 42, 
	45, 47, 58, 61, 62, 94, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	47, 62, 9, 13, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 32, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 61, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 34, 
	39, 95, 97, 99, 102, 112, 114, 116, 
	45, 46, 48, 57, 65, 90, 98, 122, 
	34, 92, 34, 92, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 32, 47, 62, 
	63, 95, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 110, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 100, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	34, 92, 34, 92, 41, 58, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	95, 111, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 108, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 108, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 97, 9, 13, 45, 57, 
	65, 90, 98, 122, 32, 47, 62, 63, 
	95, 112, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 115, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 101, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 119, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 115, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 58, 62, 63, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 105, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 108, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 116, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 114, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 40, 
	47, 62, 63, 95, 9, 13, 45, 57, 
	65, 90, 97, 122, 47, 47, 92, 47, 
	92, 41, 99, 105, 58, 41, 99, 105, 
	41, 99, 105, 92, 32, 47, 62, 63, 
	95, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 112, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 101, 9, 13, 45, 57, 
	65, 90, 97, 122, 32, 47, 62, 63, 
	95, 110, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 100, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 34, 39, 
	34, 92, 34, 92, 41, 58, 92, 39, 
	92, 39, 92, 92, 32, 47, 62, 63, 
	95, 101, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 112, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 47, 62, 63, 95, 108, 9, 13, 
	45, 57, 65, 90, 97, 122, 32, 47, 
	62, 63, 95, 97, 9, 13, 45, 57, 
	65, 90, 98, 122, 32, 47, 62, 63, 
	95, 99, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 101, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	32, 40, 47, 62, 63, 95, 9, 13, 
	45, 57, 65, 90, 97, 122, 47, 47, 
	92, 47, 92, 32, 44, 99, 105, 9, 
	13, 32, 44, 9, 13, 32, 34, 39, 
	9, 13, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 32, 44, 
	99, 105, 9, 13, 32, 44, 99, 105, 
	9, 13, 92, 32, 47, 62, 63, 95, 
	111, 114, 9, 13, 45, 57, 65, 90, 
	97, 122, 32, 47, 62, 63, 95, 108, 
	117, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 111, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 119, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 101, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	114, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 58, 62, 63, 95, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 62, 63, 95, 112, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 112, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	101, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 47, 62, 63, 95, 114, 9, 
	13, 45, 57, 65, 90, 97, 122, 32, 
	47, 58, 62, 63, 95, 9, 13, 45, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	63, 95, 105, 9, 13, 45, 57, 65, 
	90, 97, 122, 32, 47, 62, 63, 95, 
	109, 9, 13, 45, 57, 65, 90, 97, 
	122, 32, 40, 47, 58, 62, 63, 95, 
	9, 13, 45, 57, 65, 90, 97, 122, 
	34, 39, 34, 92, 34, 92, 41, 58, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	61, 126, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 47, 47, 92, 47, 
	92, 32, 33, 47, 62, 99, 105, 9, 
	13, 32, 47, 62, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 33, 
	47, 62, 99, 105, 9, 13, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 111, 116, 
	116, 40, 58, 97, 99, 101, 102, 108, 
	110, 111, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 41, 58, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 41, 58, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 41, 58, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	41, 58, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 111, 104, 105, 
	108, 100, 32, 47, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 32, 47, 
	58, 62, 9, 13, 42, 65, 90, 97, 
	122, 62, 45, 62, 95, 48, 57, 65, 
	90, 97, 122, 42, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 9, 2, 2, 3, 
	1, 2, 2, 1, 4, 5, 5, 5, 
	5, 5, 5, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 1, 2, 2, 3, 
	1, 3, 3, 1, 5, 5, 5, 5, 
	5, 5, 5, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 5, 5, 5, 5, 
	5, 5, 5, 1, 2, 2, 4, 2, 
	3, 2, 2, 1, 1, 1, 2, 2, 
	1, 4, 4, 1, 6, 6, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 6, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 4, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 1, 2, 2, 6, 
	3, 6, 6, 1, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 1, 
	1, 1, 5, 11, 3, 1, 2, 2, 
	2, 4, 3, 1, 2, 2, 1, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	9, 2, 2, 4, 3, 1, 2, 2, 
	1, 5, 6, 6, 6, 6, 6, 6, 
	2, 2, 2, 1, 1, 1, 2, 2, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 1, 2, 2, 3, 1, 3, 3, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	2, 2, 2, 1, 1, 1, 2, 2, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	1, 2, 2, 4, 2, 3, 2, 2, 
	1, 1, 1, 2, 2, 1, 4, 4, 
	1, 7, 7, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 7, 
	2, 2, 2, 1, 1, 1, 2, 2, 
	1, 4, 2, 2, 4, 1, 2, 2, 
	1, 2, 2, 2, 4, 1, 2, 2, 
	1, 1, 2, 2, 6, 3, 6, 6, 
	1, 1, 2, 2, 2, 4, 1, 2, 
	2, 1, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 2, 1, 1, 1, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	2, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	2, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 2, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 3, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 4, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 3, 1, 6, 3, 
	3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 4, 0, 0, 1, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 1, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	4, 0, 0, 1, 1, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 2, 0, 3, 2, 4, 1, 
	1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 125, 128, 131, 
	136, 138, 141, 144, 146, 155, 165, 175, 
	185, 195, 205, 215, 218, 221, 224, 226, 
	228, 230, 233, 236, 238, 248, 258, 268, 
	278, 288, 298, 308, 318, 328, 338, 348, 
	358, 368, 378, 388, 398, 400, 403, 406, 
	410, 412, 416, 420, 422, 432, 442, 452, 
	462, 472, 482, 492, 495, 498, 501, 503, 
	505, 507, 510, 513, 515, 525, 535, 545, 
	555, 565, 575, 585, 587, 590, 593, 599, 
	603, 608, 611, 614, 616, 618, 620, 623, 
	626, 628, 634, 640, 642, 653, 664, 674, 
	684, 694, 704, 714, 724, 734, 744, 754, 
	764, 774, 784, 795, 798, 801, 804, 806, 
	808, 810, 813, 816, 818, 823, 826, 829, 
	835, 837, 840, 843, 845, 848, 851, 854, 
	860, 862, 865, 868, 870, 872, 875, 878, 
	886, 891, 899, 907, 909, 911, 914, 917, 
	920, 926, 928, 931, 934, 936, 938, 940, 
	942, 944, 946, 948, 950, 952, 954, 960, 
	962, 964, 966, 972, 988, 993, 995, 998, 
	1001, 1004, 1010, 1015, 1017, 1020, 1023, 1025, 
	1027, 1030, 1033, 1036, 1042, 1044, 1047, 1050, 
	1052, 1066, 1069, 1072, 1078, 1083, 1085, 1088, 
	1091, 1093, 1103, 1114, 1125, 1136, 1147, 1158, 
	1169, 1172, 1175, 1178, 1180, 1182, 1184, 1187, 
	1190, 1192, 1203, 1214, 1225, 1236, 1247, 1258, 
	1269, 1280, 1291, 1302, 1313, 1324, 1335, 1346, 
	1357, 1368, 1370, 1373, 1376, 1380, 1382, 1386, 
	1390, 1392, 1403, 1414, 1425, 1436, 1447, 1458, 
	1469, 1472, 1475, 1478, 1480, 1482, 1484, 1487, 
	1490, 1492, 1503, 1514, 1525, 1536, 1547, 1558, 
	1569, 1571, 1574, 1577, 1583, 1587, 1592, 1595, 
	1598, 1600, 1602, 1604, 1607, 1610, 1612, 1618, 
	1624, 1626, 1638, 1650, 1661, 1672, 1683, 1694, 
	1705, 1716, 1727, 1738, 1749, 1760, 1771, 1782, 
	1794, 1797, 1800, 1803, 1805, 1807, 1809, 1812, 
	1815, 1817, 1822, 1825, 1828, 1834, 1836, 1839, 
	1842, 1844, 1847, 1850, 1853, 1859, 1861, 1864, 
	1867, 1869, 1871, 1874, 1877, 1885, 1890, 1898, 
	1906, 1908, 1910, 1913, 1916, 1919, 1925, 1927, 
	1930, 1933, 1935, 1943, 1945, 1947, 1949, 1951, 
	1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 
	1969, 1971, 1973, 1975, 1978, 1984, 1986, 1988, 
	1990, 1992, 1994, 1996, 1998, 2000, 2002, 2004, 
	2006, 2008, 2011, 2013, 2015, 2017, 2019, 2025, 
	2027, 2029, 2031, 2033, 2035, 2038, 2040, 2042, 
	2044, 2046, 2052, 2054, 2056, 2058, 2060, 2062, 
	2064, 2070, 2072, 2074, 2076, 2078, 2081, 2083, 
	2085, 2087, 2089, 2095, 2097, 2099, 2101, 2103, 
	2105, 2107, 2113, 2116, 2118, 2120, 2122, 2130, 
	2132, 2134, 2136, 2138, 2140, 2142, 2144, 2146, 
	2148, 2150, 2152, 2154, 2156, 2158, 2160, 2162, 
	2165, 2168, 2174, 2176, 2178, 2180, 2182, 2184, 
	2186, 2188, 2190, 2192, 2194, 2196, 2198, 2201, 
	2203, 2205, 2207, 2209, 2212, 2214, 2216, 2218, 
	2220, 2222, 2225, 2227, 2229, 2231, 2233, 2236, 
	2238, 2240, 2242, 2244, 2246, 2248, 2251, 2253, 
	2255, 2257, 2259, 2262, 2264, 2266, 2268, 2270, 
	2273, 2275, 2277, 2279, 2281, 2283, 2285, 2288, 
	2290, 2292, 2294, 2298, 2300, 2302, 2304, 2306, 
	2308, 2313, 2315, 2319, 2322, 2326, 2328, 2331, 
	2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 
	2349, 2351, 2353, 2356, 2358, 2360, 2362, 2364, 
	2366, 2371, 2373, 2377, 2380, 2384, 2386, 2389, 
	2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 
	2407, 2409, 2411, 2413, 2415, 2417, 2422, 2424, 
	2428, 2431, 2435, 2437, 2440, 2442, 2444, 2446, 
	2448, 2450, 2452, 2454, 2456, 2458, 2460, 2462, 
	2464, 2466, 2468, 2473, 2475, 2479, 2482, 2486, 
	2488, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 
	2505, 2507, 2509, 2511, 2513, 2516, 2518, 2520, 
	2522, 2524, 2527, 2529, 2531, 2533, 2535, 2537, 
	2539, 2542, 2544, 2546, 2550, 2552, 2554, 2556, 
	2558, 2560, 2565, 2567, 2571, 2577, 2581, 2583, 
	2586, 2588, 2590, 2592, 2594, 2596, 2598, 2600, 
	2602, 2604, 2606, 2608, 2611, 2613, 2615, 2617, 
	2619, 2621, 2626, 2628, 2632, 2638, 2642, 2644, 
	2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 
	2663, 2665, 2667, 2669, 2671, 2673, 2675, 2680, 
	2682, 2686, 2692, 2696, 2698, 2701, 2703, 2705, 
	2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 
	2723, 2725, 2727, 2729, 2734, 2736, 2740, 2746, 
	2750, 2752, 2755, 2757, 2759, 2761, 2763, 2765, 
	2767, 2769, 2771, 2773, 2775, 2777, 2780, 2782, 
	2784, 2786, 2788, 2794, 2796, 2798, 2800, 2802, 
	2804, 2806, 2812, 2816, 2818, 2825, 2829, 2840, 
	2845
};

static const short _hext_indicies[] = {
	1, 0, 3, 4, 5, 6, 6, 2, 
	7, 8, 9, 10, 7, 2, 11, 12, 
	1, 13, 11, 14, 14, 2, 15, 2, 
	16, 17, 18, 2, 19, 2, 20, 2, 
	21, 2, 22, 2, 23, 2, 24, 2, 
	25, 2, 26, 2, 27, 2, 28, 29, 
	30, 31, 32, 2, 33, 2, 34, 35, 
	2, 37, 38, 36, 40, 41, 39, 42, 
	43, 44, 45, 42, 2, 46, 47, 48, 
	46, 2, 41, 39, 50, 51, 49, 53, 
	54, 52, 54, 52, 55, 2, 56, 57, 
	2, 59, 60, 58, 62, 63, 61, 64, 
	65, 66, 67, 64, 2, 63, 61, 69, 
	70, 68, 72, 73, 71, 73, 71, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	76, 76, 76, 76, 2, 84, 85, 83, 
	87, 88, 86, 89, 90, 91, 89, 2, 
	88, 86, 93, 94, 92, 96, 97, 95, 
	97, 95, 98, 100, 101, 99, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 102, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 103, 98, 99, 99, 99, 2, 98, 
	100, 101, 99, 104, 98, 99, 99, 99, 
	2, 98, 100, 101, 99, 105, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 106, 
	98, 99, 99, 99, 2, 98, 107, 100, 
	101, 99, 98, 99, 99, 99, 2, 108, 
	109, 2, 111, 112, 110, 114, 115, 113, 
	116, 2, 117, 2, 115, 113, 119, 120, 
	118, 122, 123, 121, 123, 121, 98, 100, 
	101, 99, 124, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 125, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 126, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	127, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 128, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 129, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 130, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	131, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 132, 98, 99, 99, 99, 2, 
	98, 100, 133, 101, 99, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 134, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	135, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 136, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 137, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 138, 98, 
	99, 99, 99, 2, 98, 139, 100, 101, 
	99, 98, 99, 99, 99, 2, 140, 2, 
	142, 143, 141, 145, 146, 144, 147, 148, 
	149, 2, 150, 2, 151, 152, 153, 2, 
	154, 155, 156, 2, 146, 144, 98, 100, 
	101, 99, 157, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 158, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 159, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	160, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 161, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 162, 98, 99, 99, 
	99, 2, 98, 163, 100, 101, 99, 98, 
	99, 99, 99, 2, 164, 165, 2, 167, 
	168, 166, 170, 171, 169, 172, 2, 173, 
	2, 171, 169, 175, 176, 174, 178, 179, 
	177, 179, 177, 98, 100, 101, 99, 180, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 181, 98, 99, 99, 99, 2, 98, 
	100, 101, 99, 182, 98, 99, 99, 99, 
	2, 98, 100, 101, 99, 183, 98, 99, 
	99, 99, 2, 98, 100, 101, 99, 184, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 185, 98, 99, 99, 99, 2, 98, 
	186, 100, 101, 99, 98, 99, 99, 99, 
	2, 187, 2, 189, 190, 188, 192, 193, 
	191, 194, 195, 196, 197, 194, 2, 198, 
	199, 198, 2, 199, 200, 201, 199, 2, 
	203, 204, 202, 206, 207, 205, 208, 2, 
	209, 2, 207, 205, 211, 212, 210, 214, 
	215, 213, 215, 213, 216, 217, 218, 219, 
	216, 2, 220, 221, 222, 223, 220, 2, 
	193, 191, 98, 100, 101, 99, 224, 225, 
	98, 99, 99, 99, 2, 98, 100, 101, 
	99, 226, 227, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 228, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 229, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	230, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 231, 98, 99, 99, 99, 2, 
	98, 100, 232, 101, 99, 98, 99, 99, 
	99, 2, 98, 100, 101, 99, 233, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	234, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 235, 98, 99, 99, 99, 2, 
	98, 100, 101, 99, 236, 98, 99, 99, 
	99, 2, 98, 100, 237, 101, 99, 98, 
	99, 99, 99, 2, 98, 100, 101, 99, 
	238, 98, 99, 99, 99, 2, 98, 100, 
	101, 99, 239, 98, 99, 99, 99, 2, 
	98, 240, 100, 241, 101, 99, 98, 99, 
	99, 99, 2, 242, 243, 2, 245, 246, 
	244, 248, 249, 247, 250, 2, 251, 2, 
	249, 247, 253, 254, 252, 256, 257, 255, 
	257, 255, 258, 259, 260, 261, 2, 263, 
	264, 262, 266, 267, 265, 268, 269, 270, 
	271, 268, 2, 267, 265, 273, 274, 272, 
	276, 277, 275, 277, 275, 278, 279, 2, 
	281, 282, 280, 284, 285, 283, 286, 287, 
	288, 289, 286, 2, 285, 283, 291, 292, 
	290, 294, 295, 293, 295, 293, 296, 2, 
	298, 299, 297, 301, 302, 300, 303, 304, 
	305, 306, 307, 308, 303, 2, 309, 310, 
	311, 309, 2, 312, 313, 314, 315, 316, 
	317, 312, 2, 318, 319, 320, 321, 322, 
	323, 318, 2, 302, 300, 324, 2, 325, 
	326, 2, 328, 329, 327, 331, 332, 330, 
	333, 334, 335, 336, 333, 2, 332, 330, 
	338, 339, 337, 341, 342, 340, 342, 340, 
	343, 2, 344, 2, 345, 2, 346, 2, 
	347, 2, 348, 2, 349, 2, 350, 2, 
	351, 2, 352, 353, 354, 355, 356, 2, 
	357, 2, 358, 2, 359, 2, 360, 361, 
	362, 363, 364, 2, 365, 366, 367, 368, 
	369, 370, 371, 372, 373, 374, 369, 365, 
	369, 369, 369, 2, 375, 376, 377, 375, 
	2, 378, 2, 379, 380, 2, 382, 383, 
	381, 385, 386, 384, 387, 388, 389, 390, 
	387, 2, 391, 392, 393, 391, 2, 386, 
	384, 395, 396, 394, 398, 399, 397, 399, 
	397, 400, 2, 401, 402, 2, 404, 405, 
	403, 407, 408, 406, 409, 410, 411, 412, 
	409, 2, 408, 406, 414, 415, 413, 417, 
	418, 416, 418, 416, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 421, 421, 421, 
	421, 2, 429, 430, 428, 432, 433, 431, 
	434, 435, 436, 437, 434, 2, 438, 439, 
	440, 438, 2, 433, 431, 442, 443, 441, 
	445, 446, 444, 446, 444, 447, 449, 450, 
	451, 448, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 452, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 453, 
	447, 448, 448, 448, 2, 447, 449, 450, 
	451, 448, 454, 447, 448, 448, 448, 2, 
	447, 449, 450, 451, 448, 455, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	456, 447, 448, 448, 448, 2, 447, 457, 
	449, 450, 451, 448, 447, 448, 448, 448, 
	2, 458, 459, 2, 461, 462, 460, 464, 
	465, 463, 466, 2, 467, 2, 465, 463, 
	469, 470, 468, 472, 473, 471, 473, 471, 
	447, 449, 450, 451, 448, 474, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	475, 447, 448, 448, 448, 2, 447, 449, 
	450, 451, 448, 476, 447, 448, 448, 448, 
	2, 447, 449, 450, 451, 448, 477, 447, 
	448, 448, 448, 2, 447, 449, 450, 451, 
	448, 478, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 479, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 480, 
	447, 448, 448, 448, 2, 447, 449, 450, 
	451, 448, 481, 447, 448, 448, 448, 2, 
	447, 449, 450, 451, 448, 482, 447, 448, 
	448, 448, 2, 447, 449, 483, 450, 451, 
	448, 447, 448, 448, 448, 2, 447, 449, 
	450, 451, 448, 484, 447, 448, 448, 448, 
	2, 447, 449, 450, 451, 448, 485, 447, 
	448, 448, 448, 2, 447, 449, 450, 451, 
	448, 486, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 487, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 488, 
	447, 448, 448, 448, 2, 447, 489, 449, 
	450, 451, 448, 447, 448, 448, 448, 2, 
	490, 2, 492, 493, 491, 495, 496, 494, 
	497, 498, 499, 2, 500, 2, 501, 502, 
	503, 2, 504, 505, 506, 2, 496, 494, 
	447, 449, 450, 451, 448, 507, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	508, 447, 448, 448, 448, 2, 447, 449, 
	450, 451, 448, 509, 447, 448, 448, 448, 
	2, 447, 449, 450, 451, 448, 510, 447, 
	448, 448, 448, 2, 447, 449, 450, 451, 
	448, 511, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 512, 447, 448, 448, 
	448, 2, 447, 513, 449, 450, 451, 448, 
	447, 448, 448, 448, 2, 514, 515, 2, 
	517, 518, 516, 520, 521, 519, 522, 2, 
	523, 2, 521, 519, 525, 526, 524, 528, 
	529, 527, 529, 527, 447, 449, 450, 451, 
	448, 530, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 531, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 532, 
	447, 448, 448, 448, 2, 447, 449, 450, 
	451, 448, 533, 447, 448, 448, 448, 2, 
	447, 449, 450, 451, 448, 534, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	535, 447, 448, 448, 448, 2, 447, 536, 
	449, 450, 451, 448, 447, 448, 448, 448, 
	2, 537, 2, 539, 540, 538, 542, 543, 
	541, 544, 545, 546, 547, 544, 2, 548, 
	549, 548, 2, 549, 550, 551, 549, 2, 
	553, 554, 552, 556, 557, 555, 558, 2, 
	559, 2, 557, 555, 561, 562, 560, 564, 
	565, 563, 565, 563, 566, 567, 568, 569, 
	566, 2, 570, 571, 572, 573, 570, 2, 
	543, 541, 447, 449, 450, 451, 448, 574, 
	575, 447, 448, 448, 448, 2, 447, 449, 
	450, 451, 448, 576, 577, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 578, 
	447, 448, 448, 448, 2, 447, 449, 450, 
	451, 448, 579, 447, 448, 448, 448, 2, 
	447, 449, 450, 451, 448, 580, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	581, 447, 448, 448, 448, 2, 447, 449, 
	582, 450, 451, 448, 447, 448, 448, 448, 
	2, 447, 449, 450, 451, 448, 583, 447, 
	448, 448, 448, 2, 447, 449, 450, 451, 
	448, 584, 447, 448, 448, 448, 2, 447, 
	449, 450, 451, 448, 585, 447, 448, 448, 
	448, 2, 447, 449, 450, 451, 448, 586, 
	447, 448, 448, 448, 2, 447, 449, 587, 
	450, 451, 448, 447, 448, 448, 448, 2, 
	447, 449, 450, 451, 448, 588, 447, 448, 
	448, 448, 2, 447, 449, 450, 451, 448, 
	589, 447, 448, 448, 448, 2, 447, 590, 
	449, 591, 450, 451, 448, 447, 448, 448, 
	448, 2, 592, 593, 2, 595, 596, 594, 
	598, 599, 597, 600, 2, 601, 2, 599, 
	597, 603, 604, 602, 606, 607, 605, 607, 
	605, 608, 609, 610, 611, 2, 613, 614, 
	612, 616, 617, 615, 618, 619, 620, 621, 
	618, 2, 617, 615, 623, 624, 622, 626, 
	627, 625, 627, 625, 628, 629, 2, 631, 
	632, 630, 634, 635, 633, 636, 637, 638, 
	639, 636, 2, 635, 633, 641, 642, 640, 
	644, 645, 643, 645, 643, 646, 2, 648, 
	649, 647, 651, 652, 650, 653, 654, 655, 
	656, 657, 658, 653, 2, 659, 660, 661, 
	659, 2, 662, 663, 664, 665, 666, 667, 
	662, 2, 668, 669, 670, 671, 672, 673, 
	668, 2, 652, 650, 674, 2, 675, 676, 
	2, 678, 679, 677, 681, 682, 680, 683, 
	684, 685, 686, 683, 2, 682, 680, 688, 
	689, 687, 691, 692, 690, 692, 690, 693, 
	694, 695, 696, 697, 698, 699, 2, 700, 
	2, 701, 2, 702, 2, 703, 2, 704, 
	2, 705, 2, 706, 2, 707, 2, 708, 
	2, 709, 2, 710, 2, 711, 2, 712, 
	2, 713, 2, 714, 2, 715, 2, 716, 
	717, 2, 718, 719, 720, 721, 718, 2, 
	722, 2, 723, 2, 724, 2, 725, 2, 
	726, 2, 727, 2, 728, 2, 729, 2, 
	730, 2, 731, 2, 732, 2, 733, 2, 
	734, 735, 2, 736, 2, 737, 2, 738, 
	2, 739, 2, 740, 741, 742, 743, 740, 
	2, 744, 2, 745, 2, 746, 2, 747, 
	2, 748, 2, 749, 750, 2, 751, 2, 
	752, 2, 753, 2, 754, 2, 755, 756, 
	757, 758, 755, 2, 759, 2, 760, 2, 
	761, 2, 762, 2, 763, 2, 764, 2, 
	765, 766, 767, 768, 765, 2, 769, 2, 
	770, 2, 771, 2, 772, 2, 773, 774, 
	2, 775, 2, 776, 2, 777, 2, 778, 
	2, 779, 780, 781, 782, 779, 2, 783, 
	2, 784, 2, 785, 2, 786, 2, 787, 
	2, 788, 2, 789, 790, 791, 792, 789, 
	2, 793, 794, 2, 795, 2, 796, 2, 
	797, 2, 798, 799, 800, 801, 802, 803, 
	804, 2, 805, 2, 806, 2, 807, 2, 
	808, 2, 809, 2, 810, 2, 811, 2, 
	812, 2, 813, 2, 814, 2, 815, 2, 
	816, 2, 817, 2, 818, 2, 819, 2, 
	820, 2, 821, 822, 2, 823, 824, 2, 
	825, 826, 827, 828, 825, 2, 829, 2, 
	830, 2, 831, 2, 832, 2, 833, 2, 
	834, 2, 835, 2, 836, 2, 837, 2, 
	838, 2, 839, 2, 840, 2, 841, 842, 
	2, 843, 2, 844, 2, 845, 2, 846, 
	2, 847, 848, 2, 849, 2, 850, 2, 
	851, 2, 852, 2, 853, 2, 854, 855, 
	2, 856, 2, 857, 2, 858, 2, 859, 
	2, 860, 861, 2, 862, 2, 863, 2, 
	864, 2, 865, 2, 866, 2, 867, 2, 
	868, 869, 2, 870, 2, 871, 2, 872, 
	2, 873, 2, 874, 875, 2, 876, 2, 
	877, 2, 878, 2, 879, 2, 880, 881, 
	2, 882, 2, 883, 2, 884, 2, 885, 
	2, 886, 2, 887, 2, 888, 889, 2, 
	890, 2, 891, 2, 892, 2, 893, 894, 
	895, 2, 896, 2, 897, 2, 898, 2, 
	899, 2, 900, 2, 901, 903, 904, 902, 
	2, 905, 2, 906, 907, 905, 2, 908, 
	909, 2, 910, 911, 911, 2, 912, 2, 
	913, 912, 2, 914, 2, 915, 2, 916, 
	2, 917, 2, 918, 2, 919, 2, 920, 
	2, 921, 2, 922, 2, 923, 2, 924, 
	2, 925, 926, 2, 927, 2, 928, 2, 
	929, 2, 930, 2, 931, 2, 932, 934, 
	935, 933, 2, 936, 2, 937, 938, 936, 
	2, 939, 940, 2, 941, 942, 942, 2, 
	943, 2, 944, 943, 2, 945, 2, 946, 
	2, 947, 2, 948, 2, 949, 2, 950, 
	2, 951, 2, 952, 2, 953, 2, 954, 
	2, 955, 2, 956, 2, 957, 2, 958, 
	2, 959, 961, 962, 960, 2, 963, 2, 
	964, 965, 963, 2, 966, 967, 2, 968, 
	969, 969, 2, 970, 2, 971, 970, 2, 
	972, 2, 973, 2, 974, 2, 975, 2, 
	976, 2, 977, 2, 978, 2, 979, 2, 
	980, 2, 981, 2, 982, 2, 983, 2, 
	984, 2, 985, 2, 986, 988, 989, 987, 
	2, 990, 2, 991, 992, 990, 2, 993, 
	994, 2, 995, 996, 996, 2, 997, 2, 
	998, 997, 2, 999, 2, 1000, 2, 1001, 
	2, 1002, 2, 1003, 2, 1004, 2, 1005, 
	2, 1006, 2, 1007, 2, 1008, 2, 1009, 
	2, 1010, 1011, 2, 1012, 2, 1013, 2, 
	1014, 2, 1015, 2, 1016, 1017, 2, 1018, 
	2, 1019, 2, 1020, 2, 1021, 2, 1022, 
	2, 1023, 2, 1024, 1025, 2, 1026, 2, 
	1027, 2, 1028, 1029, 1030, 2, 1031, 2, 
	1032, 2, 1033, 2, 1034, 2, 1035, 2, 
	1036, 1038, 1039, 1037, 2, 1040, 2, 1041, 
	1042, 1040, 2, 1043, 1044, 1045, 1046, 1043, 
	2, 1047, 1048, 1048, 2, 1049, 2, 1050, 
	1049, 2, 1051, 2, 1052, 2, 1053, 2, 
	1054, 2, 1055, 2, 1056, 2, 1057, 2, 
	1058, 2, 1059, 2, 1060, 2, 1061, 2, 
	1062, 1063, 2, 1064, 2, 1065, 2, 1066, 
	2, 1067, 2, 1068, 2, 1069, 1071, 1072, 
	1070, 2, 1073, 2, 1074, 1075, 1073, 2, 
	1076, 1077, 1078, 1079, 1076, 2, 1080, 1081, 
	1081, 2, 1082, 2, 1083, 1082, 2, 1084, 
	2, 1085, 2, 1086, 2, 1087, 2, 1088, 
	2, 1089, 2, 1090, 2, 1091, 2, 1092, 
	2, 1093, 2, 1094, 2, 1095, 2, 1096, 
	2, 1097, 2, 1098, 1100, 1101, 1099, 2, 
	1102, 2, 1103, 1104, 1102, 2, 1105, 1106, 
	1107, 1108, 1105, 2, 1109, 1110, 1110, 2, 
	1111, 2, 1112, 1111, 2, 1113, 2, 1114, 
	2, 1115, 2, 1116, 2, 1117, 2, 1118, 
	2, 1119, 2, 1120, 2, 1121, 2, 1122, 
	2, 1123, 2, 1124, 2, 1125, 2, 1126, 
	2, 1127, 1129, 1130, 1128, 2, 1131, 2, 
	1132, 1133, 1131, 2, 1134, 1135, 1136, 1137, 
	1134, 2, 1138, 1139, 1139, 2, 1140, 2, 
	1141, 1140, 2, 1142, 2, 1143, 2, 1144, 
	2, 1145, 2, 1146, 2, 1147, 2, 1148, 
	2, 1149, 2, 1150, 2, 1151, 2, 1152, 
	2, 1153, 1154, 2, 1155, 2, 1156, 2, 
	1157, 2, 1158, 2, 1159, 1160, 1161, 1162, 
	1159, 2, 1163, 2, 1164, 2, 1165, 2, 
	1166, 2, 1167, 2, 1168, 2, 1169, 1170, 
	1171, 1172, 1169, 2, 1173, 1174, 1174, 2, 
	1175, 2, 1176, 1175, 1176, 1176, 1176, 1176, 
	2, 1177, 1178, 1178, 2, 7, 1179, 8, 
	9, 10, 1179, 7, 1179, 1179, 1179, 2, 
	1, 0, 1180, 1, 2, 1181, 1182, 1183, 
	1181, 2, 0
};

static const short _hext_trans_targs[] = {
	1, 727, 0, 3, 722, 725, 726, 4, 
	5, 362, 727, 4, 5, 6, 195, 728, 
	7, 181, 191, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 27, 36, 148, 
	172, 18, 19, 24, 20, 21, 23, 20, 
	21, 23, 4, 22, 5, 727, 4, 5, 
	727, 25, 21, 26, 25, 21, 26, 28, 
	29, 33, 30, 31, 32, 30, 31, 32, 
	4, 22, 5, 727, 34, 31, 35, 34, 
	31, 35, 37, 41, 44, 45, 60, 70, 
	84, 100, 124, 38, 39, 40, 38, 39, 
	40, 4, 5, 727, 42, 39, 43, 42, 
	39, 43, 4, 44, 5, 727, 46, 47, 
	48, 49, 50, 51, 52, 57, 53, 54, 
	56, 53, 54, 56, 55, 36, 58, 54, 
	59, 58, 54, 59, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 36, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 83, 
	78, 79, 83, 80, 81, 82, 36, 80, 
	81, 82, 80, 81, 82, 85, 86, 87, 
	88, 89, 90, 91, 92, 97, 93, 94, 
	96, 93, 94, 96, 95, 36, 98, 94, 
	99, 98, 94, 99, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 123, 109, 
	110, 123, 111, 112, 121, 122, 111, 112, 
	113, 118, 114, 115, 117, 114, 115, 117, 
	116, 36, 119, 115, 120, 119, 115, 120, 
	111, 112, 121, 122, 111, 112, 121, 122, 
	125, 136, 126, 131, 127, 128, 129, 130, 
	36, 132, 133, 134, 135, 36, 137, 138, 
	139, 36, 140, 145, 141, 142, 144, 141, 
	142, 144, 143, 36, 146, 142, 147, 146, 
	142, 147, 149, 153, 156, 164, 150, 151, 
	152, 150, 151, 152, 4, 22, 5, 727, 
	154, 151, 155, 154, 151, 155, 157, 161, 
	158, 159, 160, 158, 159, 160, 4, 22, 
	5, 727, 162, 159, 163, 162, 159, 163, 
	165, 166, 167, 171, 166, 167, 171, 4, 
	168, 5, 727, 169, 170, 4, 5, 727, 
	4, 168, 5, 727, 169, 170, 4, 168, 
	5, 727, 169, 170, 173, 174, 178, 175, 
	176, 177, 175, 176, 177, 4, 22, 5, 
	727, 179, 176, 180, 179, 176, 180, 182, 
	183, 184, 185, 186, 187, 188, 189, 190, 
	17, 27, 36, 148, 172, 192, 193, 194, 
	17, 27, 36, 148, 172, 4, 196, 197, 
	207, 195, 5, 216, 329, 727, 353, 4, 
	5, 727, 198, 199, 204, 200, 201, 203, 
	200, 201, 203, 4, 202, 5, 727, 4, 
	5, 727, 205, 201, 206, 205, 201, 206, 
	208, 209, 213, 210, 211, 212, 210, 211, 
	212, 4, 202, 5, 727, 214, 211, 215, 
	214, 211, 215, 217, 222, 225, 226, 241, 
	251, 265, 281, 305, 218, 219, 221, 218, 
	219, 221, 4, 5, 727, 220, 4, 5, 
	727, 223, 219, 224, 223, 219, 224, 4, 
	225, 5, 727, 220, 227, 228, 229, 230, 
	231, 232, 233, 238, 234, 235, 237, 234, 
	235, 237, 236, 216, 239, 235, 240, 239, 
	235, 240, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 216, 252, 253, 254, 255, 
	256, 257, 258, 259, 260, 264, 259, 260, 
	264, 261, 262, 263, 216, 261, 262, 263, 
	261, 262, 263, 266, 267, 268, 269, 270, 
	271, 272, 273, 278, 274, 275, 277, 274, 
	275, 277, 276, 216, 279, 275, 280, 279, 
	275, 280, 282, 283, 284, 285, 286, 287, 
	288, 289, 290, 291, 304, 290, 291, 304, 
	292, 293, 302, 303, 292, 293, 294, 299, 
	295, 296, 298, 295, 296, 298, 297, 216, 
	300, 296, 301, 300, 296, 301, 292, 293, 
	302, 303, 292, 293, 302, 303, 306, 317, 
	307, 312, 308, 309, 310, 311, 216, 313, 
	314, 315, 316, 216, 318, 319, 320, 216, 
	321, 326, 322, 323, 325, 322, 323, 325, 
	324, 216, 327, 323, 328, 327, 323, 328, 
	330, 334, 337, 345, 331, 332, 333, 331, 
	332, 333, 4, 202, 5, 727, 335, 332, 
	336, 335, 332, 336, 338, 342, 339, 340, 
	341, 339, 340, 341, 4, 202, 5, 727, 
	343, 340, 344, 343, 340, 344, 346, 347, 
	348, 352, 347, 348, 352, 4, 349, 5, 
	727, 350, 351, 4, 5, 727, 4, 349, 
	5, 727, 350, 351, 4, 349, 5, 727, 
	350, 351, 354, 355, 359, 356, 357, 358, 
	356, 357, 358, 4, 202, 5, 727, 360, 
	357, 361, 360, 357, 361, 363, 381, 394, 
	399, 417, 434, 705, 364, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 375, 
	376, 377, 378, 379, 380, 379, 4, 5, 
	362, 727, 382, 383, 384, 385, 386, 387, 
	388, 389, 390, 391, 392, 393, 380, 393, 
	395, 396, 397, 398, 4, 5, 362, 727, 
	400, 401, 402, 403, 404, 405, 410, 406, 
	407, 408, 409, 4, 5, 362, 727, 411, 
	412, 413, 414, 415, 416, 4, 5, 362, 
	727, 418, 419, 420, 421, 422, 427, 423, 
	424, 425, 426, 4, 5, 362, 727, 428, 
	429, 430, 431, 432, 433, 4, 5, 362, 
	727, 435, 617, 436, 437, 438, 439, 458, 
	471, 476, 494, 511, 600, 440, 441, 442, 
	443, 444, 445, 446, 447, 448, 449, 450, 
	451, 452, 453, 454, 455, 456, 455, 457, 
	438, 4, 5, 362, 727, 459, 460, 461, 
	462, 463, 464, 465, 466, 467, 468, 469, 
	470, 456, 470, 472, 473, 474, 475, 457, 
	438, 477, 478, 479, 480, 481, 482, 487, 
	483, 484, 485, 486, 457, 438, 488, 489, 
	490, 491, 492, 493, 457, 438, 495, 496, 
	497, 498, 499, 504, 500, 501, 502, 503, 
	457, 438, 505, 506, 507, 508, 509, 510, 
	457, 438, 512, 513, 514, 515, 534, 579, 
	516, 517, 518, 519, 520, 521, 522, 527, 
	531, 522, 523, 524, 457, 438, 523, 525, 
	526, 523, 528, 529, 530, 523, 532, 533, 
	523, 535, 536, 537, 538, 539, 558, 540, 
	541, 542, 543, 544, 545, 546, 551, 555, 
	546, 547, 548, 457, 438, 547, 549, 550, 
	547, 552, 553, 554, 547, 556, 557, 547, 
	559, 560, 561, 562, 563, 564, 565, 566, 
	567, 572, 576, 567, 568, 569, 457, 438, 
	568, 570, 571, 568, 573, 574, 575, 568, 
	577, 578, 568, 580, 581, 582, 583, 584, 
	585, 586, 587, 588, 593, 597, 588, 589, 
	590, 457, 438, 589, 591, 592, 589, 594, 
	595, 596, 589, 598, 599, 589, 601, 602, 
	603, 604, 605, 610, 606, 607, 608, 609, 
	457, 438, 611, 612, 613, 614, 615, 616, 
	457, 438, 618, 619, 620, 639, 684, 621, 
	622, 623, 624, 625, 626, 627, 632, 636, 
	627, 628, 629, 4, 5, 362, 727, 628, 
	630, 631, 628, 633, 634, 635, 628, 637, 
	638, 628, 640, 641, 642, 643, 644, 663, 
	645, 646, 647, 648, 649, 650, 651, 656, 
	660, 651, 652, 653, 4, 5, 362, 727, 
	652, 654, 655, 652, 657, 658, 659, 652, 
	661, 662, 652, 664, 665, 666, 667, 668, 
	669, 670, 671, 672, 677, 681, 672, 673, 
	674, 4, 5, 362, 727, 673, 675, 676, 
	673, 678, 679, 680, 673, 682, 683, 673, 
	685, 686, 687, 688, 689, 690, 691, 692, 
	693, 698, 702, 693, 694, 695, 4, 5, 
	362, 727, 694, 696, 697, 694, 699, 700, 
	701, 694, 703, 704, 694, 706, 707, 708, 
	709, 710, 715, 711, 712, 713, 714, 4, 
	5, 362, 727, 716, 717, 718, 719, 720, 
	721, 4, 5, 362, 727, 723, 724, 727, 
	724, 3, 726, 726, 2, 727, 1, 2
};

static const short _hext_trans_actions[] = {
	0, 0, 109, 207, 0, 95, 207, 97, 
	97, 97, 97, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 57, 57, 57, 
	57, 0, 0, 0, 13, 120, 13, 0, 
	15, 0, 293, 93, 293, 293, 221, 221, 
	221, 17, 123, 17, 0, 19, 0, 0, 
	0, 0, 13, 120, 13, 0, 15, 0, 
	285, 91, 285, 285, 17, 123, 17, 0, 
	19, 0, 0, 0, 81, 81, 81, 81, 
	81, 81, 81, 13, 120, 13, 0, 15, 
	0, 245, 245, 245, 17, 123, 17, 0, 
	19, 0, 253, 0, 253, 253, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 120, 
	13, 0, 15, 0, 0, 73, 17, 123, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 65, 0, 0, 
	0, 0, 0, 0, 0, 45, 195, 45, 
	0, 47, 0, 53, 0, 0, 75, 201, 
	51, 51, 198, 49, 49, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 120, 
	13, 0, 15, 0, 0, 71, 17, 123, 
	17, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 45, 195, 45, 0, 
	47, 0, 53, 53, 0, 0, 0, 0, 
	0, 0, 5, 114, 5, 0, 7, 0, 
	0, 77, 9, 117, 9, 0, 11, 0, 
	201, 201, 51, 51, 198, 198, 49, 49, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 0, 0, 0, 0, 69, 0, 0, 
	0, 61, 0, 0, 13, 120, 13, 0, 
	15, 0, 0, 63, 17, 123, 17, 0, 
	19, 0, 0, 0, 0, 0, 13, 120, 
	13, 0, 15, 0, 261, 85, 261, 261, 
	17, 123, 17, 0, 19, 0, 0, 0, 
	5, 114, 5, 0, 7, 0, 269, 87, 
	269, 269, 9, 117, 9, 0, 11, 0, 
	0, 45, 195, 45, 0, 47, 0, 306, 
	204, 306, 306, 0, 0, 217, 217, 217, 
	328, 241, 328, 328, 51, 51, 316, 237, 
	316, 316, 49, 49, 0, 0, 0, 13, 
	120, 13, 0, 15, 0, 277, 89, 277, 
	277, 17, 123, 17, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	59, 59, 59, 59, 59, 0, 0, 0, 
	55, 55, 55, 55, 55, 301, 111, 3, 
	3, 0, 301, 3, 3, 301, 3, 233, 
	233, 233, 0, 0, 0, 13, 120, 13, 
	0, 15, 0, 297, 93, 297, 297, 229, 
	229, 229, 17, 123, 17, 0, 19, 0, 
	0, 0, 0, 13, 120, 13, 0, 15, 
	0, 289, 91, 289, 289, 17, 123, 17, 
	0, 19, 0, 0, 0, 81, 81, 81, 
	81, 81, 81, 81, 13, 120, 13, 0, 
	15, 0, 249, 249, 249, 79, 213, 213, 
	213, 17, 123, 17, 0, 19, 0, 257, 
	0, 257, 257, 83, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 120, 13, 0, 
	15, 0, 0, 73, 17, 123, 17, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 65, 0, 0, 0, 0, 
	0, 0, 0, 45, 195, 45, 0, 47, 
	0, 53, 0, 0, 75, 201, 51, 51, 
	198, 49, 49, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 120, 13, 0, 
	15, 0, 0, 71, 17, 123, 17, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 45, 195, 45, 0, 47, 0, 
	53, 53, 0, 0, 0, 0, 0, 0, 
	5, 114, 5, 0, 7, 0, 0, 77, 
	9, 117, 9, 0, 11, 0, 201, 201, 
	51, 51, 198, 198, 49, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 67, 0, 
	0, 0, 0, 69, 0, 0, 0, 61, 
	0, 0, 13, 120, 13, 0, 15, 0, 
	0, 63, 17, 123, 17, 0, 19, 0, 
	0, 0, 0, 0, 13, 120, 13, 0, 
	15, 0, 265, 85, 265, 265, 17, 123, 
	17, 0, 19, 0, 0, 0, 5, 114, 
	5, 0, 7, 0, 273, 87, 273, 273, 
	9, 117, 9, 0, 11, 0, 0, 45, 
	195, 45, 0, 47, 0, 311, 204, 311, 
	311, 0, 0, 225, 225, 225, 334, 241, 
	334, 334, 51, 51, 322, 237, 322, 322, 
	49, 49, 0, 0, 0, 13, 120, 13, 
	0, 15, 0, 281, 89, 281, 281, 17, 
	123, 17, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 39, 0, 101, 101, 
	101, 101, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 33, 35, 0, 
	0, 0, 0, 0, 132, 132, 132, 132, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 156, 156, 156, 156, 0, 
	0, 0, 0, 0, 0, 162, 162, 162, 
	162, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 168, 168, 168, 168, 0, 
	0, 0, 0, 0, 0, 174, 174, 174, 
	174, 0, 0, 0, 0, 41, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 39, 0, 43, 
	43, 99, 99, 99, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	33, 35, 0, 0, 0, 0, 0, 129, 
	129, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 153, 153, 0, 0, 
	0, 0, 0, 0, 159, 159, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	165, 165, 0, 0, 0, 0, 0, 0, 
	171, 171, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 25, 25, 0, 
	0, 0, 27, 27, 135, 135, 29, 126, 
	0, 31, 0, 0, 0, 21, 0, 0, 
	23, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 25, 25, 0, 0, 
	0, 27, 27, 141, 141, 29, 126, 0, 
	31, 0, 0, 0, 21, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	25, 0, 0, 0, 27, 27, 177, 177, 
	29, 126, 0, 31, 0, 0, 0, 21, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 25, 25, 0, 0, 0, 27, 
	27, 147, 147, 29, 126, 0, 31, 0, 
	0, 0, 21, 0, 0, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	183, 183, 0, 0, 0, 0, 0, 0, 
	189, 189, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 25, 25, 0, 0, 
	0, 27, 27, 138, 138, 138, 138, 29, 
	126, 0, 31, 0, 0, 0, 21, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 25, 25, 0, 
	0, 0, 27, 27, 144, 144, 144, 144, 
	29, 126, 0, 31, 0, 0, 0, 21, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 25, 25, 0, 0, 0, 27, 
	27, 180, 180, 180, 180, 29, 126, 0, 
	31, 0, 0, 0, 21, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	25, 0, 0, 0, 27, 27, 150, 150, 
	150, 150, 29, 126, 0, 31, 0, 0, 
	0, 21, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 186, 
	186, 186, 186, 0, 0, 0, 0, 0, 
	0, 192, 192, 192, 192, 105, 105, 107, 
	0, 210, 210, 0, 0, 103, 103, 103
};

static const short _hext_eof_actions[] = {
	0, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 0, 
	103
};

static const int hext_start = 727;
static const int hext_first_final = 727;
static const int hext_error = 0;

static const int hext_en_main = 727;


#line 66 "Parser.cpp.rl"

} // namespace ragel


Parser::Parser(const char * begin, const char * end) noexcept
: rule_stack_()
, top_rule_(nullptr)
, p_begin_(begin)
, p(begin)
, pe(end)
, eof(end)
, cs(0)
{
}

Parser::~Parser() = default;
Parser::Parser(Parser&&) = default;
Parser& Parser::operator=(Parser&&) = default;

Rule Parser::parse()
{
  // Allow ragel to access its namespace.
  using namespace ragel;

  // Hide clang's warning -Wunused-const-variable.
  (void)hext_first_final;
  (void)hext_error;
  (void)hext_en_main;

  // When calling Parser::parse repeatedly, ensure we are always in a valid
  // state.
  this->p = this->p_begin_;
  this->rule_stack_.clear();
  this->top_rule_ = nullptr;

  // All values required to construct Matches and Captures.
  PatternValues pv;

  const char * tok_begin = nullptr;
  const char * tok_end = nullptr;
  std::string tok = "";

  // Convenience lambda to store the start of a token. Used within the hext
  // machine definition.
  auto tk_start = [this, &tok_begin, &tok_end](){
    tok_begin = this->p;
    tok_end = nullptr;
  };

  // Convenience lambda to complete a token. Used within the hext
  // machine definition.
  auto tk_stop = [this, &tok, &tok_begin, &tok_end](){
    assert(tok_begin);
    assert(this->p);
    tok_end = this->p;
    tok = std::string(
      tok_begin,
      static_cast<std::string::size_type>(std::distance(tok_begin, tok_end))
    );
  };

  // Hide warnings generated by ragel code.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunreachable-code-break"
  
#line 1663 "Parser.cpp.tmp"
	{
	cs = hext_start;
	}

#line 1668 "Parser.cpp.tmp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _hext_trans_keys + _hext_key_offsets[cs];
	_trans = _hext_index_offsets[cs];

	_klen = _hext_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _hext_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _hext_indicies[_trans];
	cs = _hext_trans_targs[_trans];

	if ( _hext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _hext_actions + _hext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 25 "hext-machine.rl"
	{ pv.optional = true; }
	break;
	case 1:
#line 29 "hext-machine.rl"
	{ pv.set_test<NegateTest>(std::move(pv.test)); }
	break;
	case 2:
#line 34 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 3:
#line 35 "hext-machine.rl"
	{ tk_stop(); pv.attr_name = tok; }
	break;
	case 4:
#line 41 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 5:
#line 41 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 6:
#line 46 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 7:
#line 46 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 8:
#line 52 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 9:
#line 52 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 10:
#line 57 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 11:
#line 57 "hext-machine.rl"
	{ tk_stop(); pv.literal_value = tok; }
	break;
	case 12:
#line 65 "hext-machine.rl"
	{ pv.nth = {2, 0}; }
	break;
	case 13:
#line 68 "hext-machine.rl"
	{ pv.nth = {2, 1}; }
	break;
	case 14:
#line 72 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 15:
#line 73 "hext-machine.rl"
	{ tk_stop(); pv.nth = {0, std::stoi(tok)}; }
	break;
	case 16:
#line 76 "hext-machine.rl"
	{ pv.nth = {pv.nth.second, 0}; }
	break;
	case 17:
#line 78 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 18:
#line 79 "hext-machine.rl"
	{ tk_stop(); pv.nth.second = std::stoi(tok); }
	break;
	case 19:
#line 88 "hext-machine.rl"
	{ pv.set_trait<ChildCountMatch>(0); }
	break;
	case 20:
#line 93 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 21:
#line 94 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<ChildCountMatch>(std::stoi(tok)); }
	break;
	case 22:
#line 100 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 23:
#line 101 "hext-machine.rl"
	{ tk_stop(); pv.set_trait<AttributeCountMatch>(std::stoi(tok)); }
	break;
	case 24:
#line 106 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth); }
	break;
	case 25:
#line 110 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last); }
	break;
	case 26:
#line 114 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 27:
#line 118 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1); }
	break;
	case 28:
#line 122 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::First|NthChildMatch::OfType); }
	break;
	case 29:
#line 126 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last); }
	break;
	case 30:
#line 130 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(0, 1, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 31:
#line 134 "hext-machine.rl"
	{ pv.set_trait<NthChildMatch>(pv.nth, NthChildMatch::Last|NthChildMatch::OfType); }
	break;
	case 32:
#line 137 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(); }
	break;
	case 33:
#line 140 "hext-machine.rl"
	{ pv.set_trait<OnlyChildMatch>(OnlyChildMatch::OfType); }
	break;
	case 34:
#line 144 "hext-machine.rl"
	{ pv.negate = std::make_unique<NegateMatch>(); }
	break;
	case 35:
#line 147 "hext-machine.rl"
	{
       assert(pv.negate);
       pv.negate->append_match(std::move(pv.trait));
     }
	break;
	case 36:
#line 157 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 37:
#line 157 "hext-machine.rl"
	{ tk_stop(); }
	break;
	case 38:
#line 161 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::icase; }
	break;
	case 39:
#line 164 "hext-machine.rl"
	{ pv.regex_flag |= boost::regex::collate; }
	break;
	case 40:
#line 166 "hext-machine.rl"
	{ try {
     pv.regex = boost::regex(tok, pv.regex_flag);
   }
   catch( const boost::regex_error& e ) {
     // Mark whole regex as error, including slashes and flags
     auto mark_len = static_cast<std::size_t>(this->p - tok_begin + 1);
     this->throw_regex_error(mark_len, e.code());
   }
}
	break;
	case 41:
#line 176 "hext-machine.rl"
	{ assert(pv.regex); pv.set_test<RegexTest>(*pv.regex); }
	break;
	case 42:
#line 182 "hext-machine.rl"
	{ pv.builtin = TextBuiltin; }
	break;
	case 43:
#line 184 "hext-machine.rl"
	{ pv.builtin = InnerHtmlBuiltin; }
	break;
	case 44:
#line 186 "hext-machine.rl"
	{ pv.builtin = StripTagsBuiltin; }
	break;
	case 45:
#line 194 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(); }
	break;
	case 46:
#line 196 "hext-machine.rl"
	{ pv.add_pipe<TrimPipe>(pv.literal_value); }
	break;
	case 47:
#line 198 "hext-machine.rl"
	{ pv.add_pipe<CollapseWsPipe>(); }
	break;
	case 48:
#line 200 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(); }
	break;
	case 49:
#line 202 "hext-machine.rl"
	{ pv.add_pipe<CasePipe>(CasePipe::ToUpper); }
	break;
	case 50:
#line 204 "hext-machine.rl"
	{ pv.add_pipe<PrependPipe>(pv.literal_value); }
	break;
	case 51:
#line 206 "hext-machine.rl"
	{ pv.add_pipe<AppendPipe>(pv.literal_value); }
	break;
	case 52:
#line 208 "hext-machine.rl"
	{ pv.add_pipe<RegexPipe>(*pv.regex); }
	break;
	case 53:
#line 211 "hext-machine.rl"
	{ pv.add_pipe<RegexReplacePipe>(*pv.regex, pv.literal_value); }
	break;
	case 54:
#line 217 "hext-machine.rl"
	{ pv.cap_var = pv.literal_value; }
	break;
	case 55:
#line 219 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 56:
#line 220 "hext-machine.rl"
	{ tk_stop(); pv.cap_var = tok; }
	break;
	case 57:
#line 227 "hext-machine.rl"
	{ pv.set_test<ContainsWordsTest>(pv.literal_value); }
	break;
	case 58:
#line 230 "hext-machine.rl"
	{ pv.set_test<EqualsTest>(pv.literal_value); }
	break;
	case 59:
#line 233 "hext-machine.rl"
	{ pv.set_test<BeginsWithTest>(pv.literal_value); }
	break;
	case 60:
#line 236 "hext-machine.rl"
	{ pv.set_test<ContainsTest>(pv.literal_value); }
	break;
	case 61:
#line 239 "hext-machine.rl"
	{ pv.set_test<EndsWithTest>(pv.literal_value); }
	break;
	case 62:
#line 247 "hext-machine.rl"
	{ cur_rule().append_capture<FunctionCapture>(
             pv.builtin, pv.cap_var, std::move(pv.pipe)); }
	break;
	case 63:
#line 252 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 64:
#line 256 "hext-machine.rl"
	{ cur_rule().append_match<FunctionValueMatch>(pv.builtin, std::move(pv.test)); }
	break;
	case 65:
#line 260 "hext-machine.rl"
	{ cur_rule().append_capture<AttributeCapture>(
             pv.attr_name, pv.cap_var, std::move(pv.pipe));
         if( !pv.optional )
           cur_rule().append_match<AttributeMatch>(pv.attr_name);
       }
	break;
	case 66:
#line 268 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 67:
#line 272 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 68:
#line 276 "hext-machine.rl"
	{ pv.test = nullptr; }
	break;
	case 69:
#line 279 "hext-machine.rl"
	{ cur_rule().append_match<AttributeMatch>(pv.attr_name, std::move(pv.test)); }
	break;
	case 70:
#line 280 "hext-machine.rl"
	{ pv.reset(); }
	break;
	case 71:
#line 298 "hext-machine.rl"
	{ push_rule(); }
	break;
	case 72:
#line 301 "hext-machine.rl"
	{ cur_rule().set_optional(true); }
	break;
	case 73:
#line 304 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 74:
#line 305 "hext-machine.rl"
	{ tk_stop(); set_open_tag_or_throw(tok); }
	break;
	case 75:
#line 308 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.negate)); }
	break;
	case 76:
#line 311 "hext-machine.rl"
	{ cur_rule().append_match(std::move(pv.trait)); }
	break;
	case 77:
#line 319 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 78:
#line 326 "hext-machine.rl"
	{ tk_start(); }
	break;
	case 79:
#line 327 "hext-machine.rl"
	{ tk_stop();
                            validate_close_tag_or_throw(tok);
                            pop_rule(); }
	break;
	case 80:
#line 332 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 2084 "Parser.cpp.tmp"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _hext_actions + _hext_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 77:
#line 319 "hext-machine.rl"
	{ pop_rule(); }
	break;
	case 80:
#line 332 "hext-machine.rl"
	{ this->throw_unexpected(); }
	break;
#line 2108 "Parser.cpp.tmp"
		}
	}
	}

	_out: {}
	}

#line 138 "Parser.cpp.rl"

#pragma GCC diagnostic pop

  // Throw error if there are missing closing tags.
  if( this->rule_stack_.size() )
    this->throw_missing_tag(this->rule_stack_.back().get_tag());

  if( this->top_rule_ )
  {
    return *this->top_rule_;
  }
  else
  {
    return Rule();
  }
}

Rule& Parser::cur_rule()
{
  assert(this->rule_stack_.size());
  return this->rule_stack_.back();
}

void Parser::push_rule()
{
  this->rule_stack_.emplace_back();
}

void Parser::pop_rule()
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  Rule rule = std::move(this->rule_stack_.back());
  this->rule_stack_.pop_back();

  if( this->rule_stack_.empty() )
  {
    if( this->top_rule_ )
      this->top_rule_->append_next(std::move(rule));
    else
      this->top_rule_ = std::make_unique<Rule>(std::move(rule));
  }
  else
  {
    this->rule_stack_.back().append_child(std::move(rule));
  }
}

void Parser::set_open_tag_or_throw(const std::string& tag_name)
{
  assert(this->rule_stack_.size());
  if( this->rule_stack_.empty() )
    return;

  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    this->rule_stack_.back().set_tag(HtmlTag::ANY);
    return;
  }

  GumboTag tag = gumbo_tag_enum(tag_name.c_str());
  if( tag == GUMBO_TAG_UNKNOWN )
    this->throw_invalid_tag(tag_name);
  else
    this->rule_stack_.back().set_tag(static_cast<HtmlTag>(tag));
}

void Parser::validate_close_tag_or_throw(const std::string& tag_name)
{
  if( this->rule_stack_.empty() )
    this->throw_unexpected_tag(tag_name, /* expected no tag: */ {});

  HtmlTag expected_tag = this->rule_stack_.back().get_tag();
  if( tag_name.size() == 1 && tag_name[0] == '*' )
  {
    if( expected_tag != HtmlTag::ANY )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
  else
  {
    GumboTag given_tag = gumbo_tag_enum(tag_name.c_str());
    if( given_tag == GUMBO_TAG_UNKNOWN
        || static_cast<HtmlTag>(given_tag) != expected_tag )
      this->throw_unexpected_tag(tag_name, expected_tag);
  }
}

void Parser::throw_unexpected() const
{
  assert(this->p && this->p_begin_ && this->pe);
  assert(this->p <= this->pe && this->p >= this->p_begin_);

  std::stringstream error_msg;
  if( this->p == this->pe || !this->p )
    error_msg << "Premature termination ";
  else
    error_msg << "Unexpected character '"
              << CharName(*(this->p))
              << "' ";

  if( this->p && this->pe )
    this->print_error_location(this->p, /* mark_len: */ 1, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_invalid_tag(const std::string& tag) const
{
  std::stringstream error_msg;
  error_msg << "Unknown HTML tag '" << tag << "' ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, tag.size(), error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_regex_error(
  std::size_t mark_len,
  boost::regex_constants::error_type e_code
) const
{
  std::stringstream error_msg;
  error_msg << "In regular expression ";

  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  // regex_error::what() not only contains an error message, but also adds the
  // error location. Therefore we use regex_traits::error_string to get a
  // shorter error description.
  boost::regex_traits<boost::regex::value_type> traits;
  error_msg << "\nError: "
            << traits.error_string(e_code);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_missing_tag(HtmlTag missing) const
{
  std::stringstream error_msg;
  error_msg << "Missing closing tag '</"
            << ( missing == HtmlTag::ANY
                 ? "*"
                 : gumbo_normalized_tagname(static_cast<GumboTag>(missing)) )
            << ">' ";

  this->print_error_location(this->pe, /* mark_len: */ 0, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::throw_unexpected_tag(
  const std::string& tag,
  boost::optional<HtmlTag> expected
) const
{
  std::stringstream error_msg;
  error_msg << "Unexpected closing tag '</"
            << tag
            << ">'";

  if( expected )
  {
    error_msg << ", expected '</"
              << ( *expected == HtmlTag::ANY
                   ? "*"
                   : gumbo_normalized_tagname(static_cast<GumboTag>(*expected)) )
              << ">'";
  }

  error_msg << " ";

  auto mark_len = tag.size() + 2; // strlen("</")
  auto unexpected_char = this->p - 1;
  this->print_error_location(unexpected_char, mark_len, error_msg);

  throw SyntaxError(error_msg.str());
}

void Parser::print_error_location(
  const char * uc,
  std::size_t mark_len,
  std::ostream& out
) const
{
  assert(uc && this->p_begin_ && this->pe);
  assert(uc <= this->pe && uc >= this->p_begin_);
  if( !uc || !this->p_begin_ || !this->pe || uc > this->pe )
    return;

  // The zero-based line and char offset of the unexpected character
  CharPosPair pos = CharPosition(this->p_begin_, uc);
  auto line_count = static_cast<std::size_t>(pos.first + 1);
  auto char_count = static_cast<std::size_t>(pos.second + 1);

  if( uc == this->pe )
    out << "at end of input:\n\n";
  else
    out << "at line " << line_count
        << ", char " << char_count << ":\n\n";

  // Don't print the unexpected character if it is a newline
  if( uc == this->pe || *uc == '\n' )
    PrintNumberedLines(this->p_begin_, uc, out);
  else
    PrintNumberedLines(this->p_begin_, uc + 1, out);

  if( mark_len < 1 )
    return;

  // If there are non-ascii characters in the input, lazily bail out.
  if( std::any_of(this->p_begin_, this->pe, [](signed char c){return c < 0;}) )
    return;

  // The longest the mark can be is the length of the last line.
  mark_len = std::min(char_count, mark_len);

  // Print a visual indicator directly under the unexpected token ('^').
  // The required amount of indentation must be known.
  std::size_t indent = static_cast<std::size_t>(DecimalWidth(line_count))
                     + 2            // ": "
                     + char_count   // position of the unexpected character from
                                    // the beginning of the line.
                     - mark_len;    // the length of the '^' mark

  out << std::string(indent, ' ')
      << std::string(mark_len, '^')
      << " here\n";
}


} // namespace hext

