// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 60 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	38, 1, 39, 1, 41, 1, 42, 2, 
	1, 43, 2, 21, 22, 2, 23, 24, 
	2, 25, 26, 2, 26, 34, 2, 28, 
	31, 2, 28, 34, 2, 30, 31, 2, 
	30, 34, 2, 36, 38, 2, 37, 38, 
	2, 38, 40, 2, 39, 40, 3, 0, 
	1, 43, 3, 9, 1, 43, 3, 12, 
	1, 43, 3, 13, 1, 43, 3, 14, 
	1, 43, 3, 15, 1, 43, 3, 16, 
	1, 43, 3, 17, 1, 43, 3, 18, 
	1, 43, 3, 19, 1, 43, 3, 20, 
	1, 43, 3, 25, 26, 34, 3, 34, 
	1, 43, 3, 36, 38, 40, 3, 37, 
	38, 40, 3, 38, 1, 43, 3, 39, 
	1, 43, 3, 41, 1, 43, 3, 42, 
	1, 43, 4, 26, 34, 1, 43, 4, 
	28, 34, 1, 43, 4, 30, 34, 1, 
	43, 4, 36, 38, 1, 43, 4, 37, 
	38, 1, 43, 5, 25, 26, 34, 1, 
	43
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 7, 8, 14, 18, 19, 
	20, 22, 24, 30, 31, 32, 33, 34, 
	35, 36, 37, 38, 39, 40, 41, 43, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 55, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 68, 69, 70, 
	71, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 89, 
	90, 91, 92, 93, 94, 98, 102, 104, 
	106, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 122, 123, 124, 
	125, 126, 127, 131, 135, 137, 139, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 160, 164, 
	166, 168, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 189, 193, 195, 197, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 217, 220, 
	222, 224, 225, 228, 231, 233, 235, 241, 
	247, 248, 253, 258, 270, 289, 295, 301, 
	313, 320, 332, 343, 358, 365, 372, 379, 
	386, 393, 400, 407, 414, 421, 428, 439, 
	450
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 62, 126, 10, 
	32, 64, 65, 90, 97, 122, 65, 90, 
	97, 122, 61, 34, 34, 92, 34, 92, 
	99, 101, 102, 108, 110, 111, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 105, 114, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 102, 45, 116, 
	121, 112, 101, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 102, 45, 116, 
	121, 112, 101, 116, 104, 45, 99, 108, 
	111, 104, 105, 108, 100, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 41, 43, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 101, 
	111, 48, 57, 41, 110, 48, 57, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 41, 43, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 101, 111, 48, 57, 41, 110, 48, 
	57, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 110, 
	108, 121, 45, 99, 104, 105, 108, 100, 
	92, 34, 47, 123, 47, 92, 47, 92, 
	92, 47, 123, 125, 47, 123, 125, 47, 
	92, 47, 92, 33, 125, 65, 90, 97, 
	122, 33, 125, 65, 90, 97, 122, 92, 
	32, 35, 60, 62, 126, 32, 35, 60, 
	62, 126, 10, 32, 35, 58, 60, 62, 
	63, 126, 65, 90, 97, 122, 10, 32, 
	33, 35, 36, 42, 45, 60, 61, 62, 
	94, 95, 126, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 60, 62, 126, 10, 
	32, 35, 60, 62, 126, 10, 32, 35, 
	58, 60, 62, 63, 126, 65, 90, 97, 
	122, 10, 32, 35, 58, 60, 62, 126, 
	10, 32, 35, 58, 60, 62, 63, 126, 
	65, 90, 97, 122, 10, 32, 35, 58, 
	60, 62, 126, 65, 90, 97, 122, 10, 
	32, 35, 45, 58, 60, 62, 95, 126, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 58, 60, 62, 126, 10, 32, 35, 
	58, 60, 62, 126, 10, 32, 35, 58, 
	60, 62, 126, 10, 32, 35, 58, 60, 
	62, 126, 10, 32, 35, 58, 60, 62, 
	126, 10, 32, 35, 58, 60, 62, 126, 
	10, 32, 35, 58, 60, 62, 126, 10, 
	32, 35, 58, 60, 62, 126, 10, 32, 
	35, 58, 60, 62, 126, 10, 32, 35, 
	58, 60, 62, 126, 10, 32, 33, 35, 
	60, 62, 126, 65, 90, 97, 122, 10, 
	32, 33, 35, 60, 62, 126, 65, 90, 
	97, 122, 10, 32, 33, 35, 36, 42, 
	45, 60, 61, 62, 94, 95, 126, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 1, 2, 0, 1, 1, 
	2, 2, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 2, 2, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 2, 2, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 2, 
	2, 1, 3, 3, 2, 2, 2, 2, 
	1, 5, 5, 8, 13, 6, 6, 8, 
	7, 8, 7, 9, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	13
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 2, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 2, 2, 
	0, 0, 0, 2, 3, 0, 0, 2, 
	0, 2, 2, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 2, 2, 
	3
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 9, 11, 16, 19, 21, 
	23, 26, 29, 36, 38, 40, 42, 44, 
	46, 48, 50, 52, 54, 56, 58, 60, 
	63, 65, 67, 69, 71, 73, 75, 77, 
	79, 81, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	112, 115, 117, 119, 121, 123, 125, 127, 
	129, 131, 133, 135, 137, 139, 141, 145, 
	147, 149, 151, 153, 155, 159, 163, 166, 
	168, 171, 173, 175, 177, 179, 181, 183, 
	185, 187, 189, 191, 193, 196, 198, 200, 
	202, 204, 206, 210, 214, 217, 219, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 250, 254, 258, 
	261, 263, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 298, 302, 305, 307, 310, 312, 314, 
	316, 318, 320, 322, 324, 326, 328, 330, 
	332, 334, 336, 338, 340, 342, 344, 348, 
	351, 354, 356, 360, 364, 367, 370, 375, 
	380, 382, 388, 394, 405, 422, 429, 436, 
	447, 455, 466, 476, 489, 497, 505, 513, 
	521, 529, 537, 545, 553, 561, 569, 579, 
	589
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 163, 167, 169, 
	0, 162, 3, 4, 5, 184, 184, 0, 
	164, 164, 0, 7, 0, 8, 0, 165, 
	149, 9, 165, 149, 9, 11, 24, 28, 
	44, 59, 140, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 0, 
	18, 0, 19, 0, 20, 0, 21, 0, 
	22, 0, 23, 0, 168, 23, 0, 25, 
	0, 26, 0, 27, 0, 172, 0, 29, 
	0, 30, 0, 31, 0, 32, 0, 33, 
	0, 34, 38, 0, 35, 0, 36, 0, 
	37, 0, 173, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 174, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 53, 0, 50, 0, 51, 0, 52, 
	0, 175, 0, 54, 0, 55, 0, 56, 
	0, 57, 0, 58, 0, 176, 0, 60, 
	0, 61, 0, 62, 0, 63, 80, 121, 
	0, 64, 0, 65, 0, 66, 0, 67, 
	0, 68, 0, 73, 77, 69, 0, 177, 
	70, 69, 0, 177, 71, 0, 72, 0, 
	177, 72, 0, 74, 0, 75, 0, 76, 
	0, 177, 0, 78, 0, 79, 0, 177, 
	0, 81, 0, 82, 0, 83, 0, 84, 
	0, 85, 102, 0, 86, 0, 87, 0, 
	88, 0, 89, 0, 90, 0, 95, 99, 
	91, 0, 178, 92, 91, 0, 178, 93, 
	0, 94, 0, 178, 94, 0, 96, 0, 
	97, 0, 98, 0, 178, 0, 100, 0, 
	101, 0, 178, 0, 103, 0, 104, 0, 
	105, 0, 106, 0, 107, 0, 108, 0, 
	109, 0, 114, 118, 110, 0, 179, 111, 
	110, 0, 179, 112, 0, 113, 0, 179, 
	113, 0, 115, 0, 116, 0, 117, 0, 
	179, 0, 119, 0, 120, 0, 179, 0, 
	122, 0, 123, 0, 124, 0, 125, 0, 
	126, 0, 127, 0, 128, 0, 133, 137, 
	129, 0, 180, 130, 129, 0, 180, 131, 
	0, 132, 0, 180, 132, 0, 134, 0, 
	135, 0, 136, 0, 180, 0, 138, 0, 
	139, 0, 180, 0, 141, 0, 142, 0, 
	143, 0, 144, 0, 145, 0, 146, 0, 
	147, 0, 148, 0, 181, 0, 149, 9, 
	8, 151, 154, 0, 182, 153, 152, 182, 
	153, 152, 153, 152, 0, 0, 0, 155, 
	156, 0, 165, 155, 158, 160, 157, 158, 
	160, 157, 159, 165, 159, 159, 0, 159, 
	165, 159, 159, 0, 160, 157, 1, 3, 
	163, 167, 169, 0, 1, 3, 163, 167, 
	169, 0, 162, 4, 3, 10, 163, 166, 
	170, 169, 171, 171, 0, 162, 4, 6, 
	3, 6, 6, 164, 163, 150, 166, 6, 
	164, 6, 164, 164, 164, 0, 162, 4, 
	3, 163, 166, 169, 0, 162, 1, 3, 
	163, 167, 169, 0, 162, 4, 3, 10, 
	163, 166, 170, 169, 171, 171, 0, 162, 
	4, 3, 10, 163, 166, 169, 0, 162, 
	4, 3, 10, 163, 166, 170, 169, 171, 
	171, 0, 162, 4, 3, 10, 163, 166, 
	169, 171, 171, 0, 162, 4, 3, 171, 
	10, 163, 166, 171, 169, 171, 171, 171, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 3, 10, 163, 166, 169, 
	0, 162, 4, 183, 3, 163, 166, 169, 
	183, 183, 0, 162, 4, 183, 3, 163, 
	166, 169, 183, 183, 0, 162, 4, 6, 
	3, 6, 6, 184, 163, 150, 166, 6, 
	184, 6, 184, 184, 184, 0, 0
};

static const unsigned char _hext_trans_actions[] = {
	0, 0, 1, 69, 0, 69, 69, 69, 
	1, 0, 0, 0, 0, 59, 59, 1, 
	55, 55, 1, 0, 1, 0, 1, 82, 
	43, 43, 45, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 21, 1, 23, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 9, 1, 11, 
	11, 0, 1, 13, 13, 1, 15, 1, 
	17, 0, 1, 0, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 7, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	9, 1, 11, 11, 0, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 13, 13, 1, 15, 1, 17, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 7, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	9, 1, 11, 11, 0, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	0, 0, 0, 1, 85, 47, 47, 49, 
	0, 0, 0, 0, 1, 1, 1, 63, 
	65, 1, 65, 0, 85, 47, 47, 49, 
	0, 0, 51, 88, 51, 51, 1, 0, 
	53, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 3, 3, 3, 3, 
	3, 1, 71, 71, 71, 71, 71, 71, 
	71, 71, 112, 112, 1, 97, 97, 94, 
	97, 94, 94, 0, 97, 57, 97, 94, 
	0, 94, 0, 0, 0, 1, 67, 67, 
	67, 67, 67, 67, 1, 77, 77, 77, 
	77, 77, 77, 1, 106, 106, 106, 106, 
	106, 106, 106, 106, 170, 170, 1, 0, 
	0, 0, 0, 0, 0, 0, 1, 109, 
	109, 109, 109, 109, 109, 109, 109, 174, 
	174, 1, 73, 73, 73, 73, 73, 73, 
	73, 115, 115, 1, 75, 75, 75, 0, 
	75, 75, 75, 0, 75, 0, 0, 0, 
	1, 19, 19, 19, 19, 19, 19, 19, 
	1, 31, 31, 31, 31, 31, 31, 31, 
	1, 33, 33, 33, 33, 33, 33, 33, 
	1, 35, 35, 35, 35, 35, 35, 35, 
	1, 37, 37, 37, 37, 37, 37, 37, 
	1, 25, 25, 25, 25, 25, 25, 25, 
	1, 27, 27, 27, 27, 27, 27, 27, 
	1, 39, 39, 39, 39, 39, 39, 39, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	1, 41, 41, 41, 41, 41, 41, 41, 
	1, 162, 162, 51, 162, 162, 162, 162, 
	51, 51, 1, 91, 91, 0, 91, 91, 
	91, 91, 0, 0, 1, 103, 103, 100, 
	103, 100, 100, 0, 103, 61, 103, 100, 
	0, 100, 0, 0, 0, 1, 0
};

static const unsigned char _hext_eof_actions[] = {
	0, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 79, 79, 178, 199, 166, 190, 209, 
	79, 214, 182, 186, 122, 138, 142, 146, 
	150, 126, 130, 154, 134, 158, 219, 194, 
	204
};

static const int hext_start = 161;
static const int hext_first_final = 161;
static const int hext_error = 0;

static const int hext_en_main = 161;


#line 60 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a vector of rules.
  /// Throw `ParseError` on invalid input.
  std::vector<Rule> parse(Option flags = DefaultOption);

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amomunt of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

