// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/Builtins.h"
#include "hext/MakeUnique.h"
#include "hext/pattern/AttributeCapture.h"
#include "hext/pattern/AttributeCountMatch.h"
#include "hext/pattern/AttributeMatch.h"
#include "hext/pattern/BuiltinCapture.h"
#include "hext/pattern/BuiltinMatch.h"
#include "hext/pattern/CapturePattern.h"
#include "hext/pattern/ChildCountMatch.h"
#include "hext/pattern/MatchPattern.h"
#include "hext/pattern/NegateMatch.h"
#include "hext/pattern/NthChildMatch.h"
#include "hext/pattern/TextNodeMatch.h"
#include "hext/PatternValues.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/StringUtil.h"
#include "hext/test/BeginsWith.h"
#include "hext/test/Contains.h"
#include "hext/test/ContainsAllWords.h"
#include "hext/test/ContainsWord.h"
#include "hext/test/EndsWith.h"
#include "hext/test/Equals.h"
#include "hext/test/Negate.h"
#include "hext/test/NotNull.h"
#include "hext/test/Regex.h"
#include "hext/test/ValueTest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  assert(p != nullptr);         \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 86 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 6, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 30, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 37, 1, 
	38, 1, 39, 1, 40, 1, 41, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 47, 1, 48, 1, 58, 1, 
	59, 1, 60, 1, 61, 1, 62, 1, 
	63, 1, 67, 1, 68, 1, 69, 2, 
	4, 5, 2, 7, 23, 2, 7, 63, 
	2, 12, 23, 2, 12, 63, 2, 13, 
	23, 2, 13, 63, 2, 14, 23, 2, 
	14, 63, 2, 15, 23, 2, 15, 63, 
	2, 16, 23, 2, 16, 63, 2, 17, 
	23, 2, 17, 63, 2, 18, 23, 2, 
	18, 63, 2, 19, 23, 2, 19, 63, 
	2, 20, 23, 2, 20, 63, 2, 21, 
	23, 2, 21, 63, 2, 24, 25, 2, 
	26, 28, 2, 27, 28, 2, 28, 29, 
	2, 38, 55, 2, 39, 40, 2, 41, 
	42, 2, 49, 57, 2, 52, 57, 2, 
	58, 60, 2, 64, 66, 2, 65, 66, 
	3, 26, 28, 29, 3, 27, 28, 29, 
	3, 35, 52, 57, 3, 36, 50, 57, 
	3, 36, 51, 57, 3, 36, 53, 57, 
	3, 36, 54, 57, 3, 36, 56, 57, 
	3, 43, 51, 57, 3, 43, 54, 57, 
	3, 44, 51, 57, 3, 44, 54, 57, 
	3, 45, 51, 57, 3, 45, 54, 57, 
	3, 46, 51, 57, 3, 46, 54, 57, 
	3, 47, 51, 57, 3, 47, 54, 57, 
	3, 48, 51, 57, 3, 48, 54, 57, 
	4, 28, 29, 50, 57, 4, 28, 29, 
	53, 57, 4, 38, 55, 56, 57, 5, 
	26, 28, 29, 50, 57, 5, 26, 28, 
	29, 53, 57, 5, 27, 28, 29, 50, 
	57, 5, 27, 28, 29, 53, 57
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 45, 47, 49, 55, 60, 
	61, 63, 65, 66, 67, 69, 71, 73, 
	79, 80, 82, 84, 85, 90, 92, 94, 
	100, 101, 103, 105, 106, 108, 110, 118, 
	123, 131, 139, 140, 142, 144, 146, 152, 
	153, 155, 157, 158, 161, 164, 166, 168, 
	171, 174, 177, 182, 183, 184, 186, 188, 
	190, 196, 197, 199, 201, 202, 203, 205, 
	207, 209, 215, 216, 218, 220, 221, 222, 
	223, 224, 225, 226, 227, 228, 229, 230, 
	235, 236, 237, 238, 243, 262, 267, 268, 
	270, 272, 274, 280, 285, 286, 288, 290, 
	291, 292, 294, 296, 298, 304, 305, 307, 
	309, 310, 315, 317, 319, 325, 326, 328, 
	330, 331, 333, 335, 343, 348, 356, 364, 
	365, 367, 369, 371, 377, 378, 380, 382, 
	383, 386, 389, 391, 393, 396, 399, 402, 
	408, 413, 414, 415, 417, 419, 421, 427, 
	428, 430, 432, 433, 434, 436, 438, 440, 
	446, 447, 449, 451, 452, 460, 461, 462, 
	463, 464, 465, 466, 467, 468, 469, 470, 
	471, 472, 473, 474, 475, 477, 480, 486, 
	487, 488, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 499, 502, 503, 504, 505, 
	506, 512, 513, 514, 515, 516, 517, 519, 
	520, 521, 522, 523, 529, 530, 531, 532, 
	533, 534, 535, 541, 542, 543, 544, 545, 
	547, 548, 549, 550, 551, 557, 558, 559, 
	560, 561, 562, 563, 569, 571, 572, 573, 
	574, 582, 583, 584, 585, 586, 587, 588, 
	589, 590, 591, 592, 593, 594, 595, 596, 
	597, 599, 602, 604, 610, 611, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	623, 626, 627, 628, 629, 630, 632, 633, 
	634, 635, 636, 637, 639, 640, 641, 642, 
	643, 645, 646, 647, 648, 649, 650, 651, 
	653, 654, 655, 656, 657, 659, 660, 661, 
	662, 663, 665, 666, 667, 668, 669, 670, 
	671, 673, 674, 675, 676, 679, 680, 681, 
	682, 683, 684, 689, 691, 695, 697, 700, 
	702, 705, 706, 707, 708, 709, 710, 711, 
	712, 713, 714, 715, 716, 718, 719, 720, 
	721, 722, 723, 728, 730, 734, 736, 739, 
	741, 744, 745, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 755, 756, 757, 758, 
	763, 765, 769, 771, 774, 776, 779, 780, 
	781, 782, 783, 784, 785, 786, 787, 788, 
	789, 790, 791, 792, 793, 798, 800, 804, 
	806, 809, 811, 814, 815, 816, 817, 818, 
	819, 820, 821, 822, 823, 824, 825, 826, 
	827, 828, 829, 830, 832, 833, 834, 835, 
	837, 838, 839, 842, 843, 844, 845, 846, 
	847, 852, 854, 858, 864, 867, 869, 872, 
	873, 874, 875, 876, 877, 878, 879, 880, 
	881, 882, 883, 885, 886, 887, 888, 889, 
	890, 895, 897, 901, 907, 910, 912, 915, 
	916, 917, 918, 919, 920, 921, 922, 923, 
	924, 925, 926, 927, 928, 929, 934, 936, 
	940, 946, 949, 951, 954, 955, 956, 957, 
	958, 959, 960, 961, 962, 963, 964, 965, 
	966, 967, 968, 973, 975, 979, 985, 988, 
	990, 993, 994, 995, 996, 997, 998, 999, 
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 
	1008, 1009, 1015, 1016, 1017, 1018, 1024, 1029, 
	1030, 1039, 1044, 1058, 1063, 1068
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 61, 
	94, 126, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 32, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 34, 39, 47, 
	61, 123, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 47, 92, 47, 92, 32, 33, 
	47, 62, 99, 105, 9, 13, 32, 47, 
	62, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 33, 47, 62, 99, 
	105, 9, 13, 92, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 47, 123, 
	125, 47, 123, 125, 47, 92, 47, 92, 
	99, 105, 125, 99, 105, 125, 99, 105, 
	125, 32, 47, 62, 9, 13, 92, 61, 
	34, 39, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 39, 92, 39, 
	92, 92, 61, 34, 39, 34, 92, 34, 
	92, 32, 33, 47, 62, 9, 13, 92, 
	39, 92, 39, 92, 92, 116, 114, 105, 
	112, 45, 116, 97, 103, 115, 36, 42, 
	61, 94, 126, 101, 120, 116, 36, 42, 
	61, 94, 126, 32, 33, 36, 42, 45, 
	47, 61, 62, 94, 95, 126, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 47, 
	62, 9, 13, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 61, 34, 39, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 39, 92, 39, 92, 92, 34, 39, 
	47, 61, 123, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 39, 92, 
	39, 92, 92, 47, 92, 47, 92, 32, 
	33, 47, 62, 99, 105, 9, 13, 32, 
	47, 62, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 32, 33, 47, 62, 
	99, 105, 9, 13, 92, 34, 39, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 39, 92, 39, 92, 92, 47, 
	123, 125, 47, 123, 125, 47, 92, 47, 
	92, 99, 105, 125, 99, 105, 125, 99, 
	105, 125, 32, 47, 62, 63, 9, 13, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	39, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 39, 92, 39, 92, 
	92, 61, 34, 39, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 39, 
	92, 39, 92, 92, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	32, 47, 58, 62, 9, 13, 104, 105, 
	108, 100, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 109, 112, 
	116, 121, 32, 47, 58, 62, 9, 13, 
	105, 114, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 32, 47, 58, 62, 9, 
	13, 102, 45, 116, 121, 112, 101, 32, 
	47, 58, 62, 9, 13, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 32, 
	47, 58, 62, 9, 13, 102, 45, 116, 
	121, 112, 101, 32, 47, 58, 62, 9, 
	13, 111, 116, 116, 40, 58, 97, 99, 
	101, 102, 108, 110, 111, 116, 116, 116, 
	114, 105, 98, 117, 116, 101, 45, 99, 
	111, 117, 110, 116, 40, 48, 57, 41, 
	48, 57, 41, 58, 32, 47, 58, 62, 
	9, 13, 104, 105, 108, 100, 45, 99, 
	111, 117, 110, 116, 40, 48, 57, 41, 
	48, 57, 109, 112, 116, 121, 41, 58, 
	105, 114, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 41, 58, 102, 45, 116, 
	121, 112, 101, 41, 58, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 41, 
	58, 102, 45, 116, 121, 112, 101, 41, 
	58, 116, 104, 45, 99, 108, 111, 104, 
	105, 108, 100, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 41, 
	58, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	97, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 41, 58, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 41, 58, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 110, 108, 121, 
	45, 99, 104, 105, 108, 100, 41, 58, 
	101, 120, 116, 41, 58, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 32, 47, 58, 62, 
	9, 13, 41, 43, 45, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	110, 108, 121, 45, 99, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 101, 
	120, 116, 32, 47, 58, 62, 9, 13, 
	42, 65, 90, 97, 122, 62, 45, 62, 
	95, 48, 57, 65, 90, 97, 122, 42, 
	65, 90, 97, 122, 32, 45, 47, 58, 
	62, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 35, 60, 9, 13, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 2, 2, 2, 4, 3, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 5, 2, 2, 4, 
	1, 2, 2, 1, 2, 2, 6, 3, 
	6, 6, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 3, 3, 2, 2, 3, 
	3, 3, 3, 1, 1, 2, 2, 2, 
	4, 1, 2, 2, 1, 1, 2, 2, 
	2, 4, 1, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	1, 1, 1, 5, 11, 3, 1, 2, 
	2, 2, 4, 3, 1, 2, 2, 1, 
	1, 2, 2, 2, 4, 1, 2, 2, 
	1, 5, 2, 2, 4, 1, 2, 2, 
	1, 2, 2, 6, 3, 6, 6, 1, 
	2, 2, 2, 4, 1, 2, 2, 1, 
	3, 3, 2, 2, 3, 3, 3, 4, 
	3, 1, 1, 2, 2, 2, 4, 1, 
	2, 2, 1, 1, 2, 2, 2, 4, 
	1, 2, 2, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 1, 4, 2, 1, 1, 1, 
	8, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 2, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 3, 0, 2, 2, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 3, 0, 2, 2, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 2, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 2, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	3, 0, 2, 4, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 0, 2, 
	4, 3, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 4, 1, 1, 
	3, 1, 6, 3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 1, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 2, 0, 
	3, 2, 4, 1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 57, 60, 63, 69, 74, 
	76, 79, 82, 84, 86, 89, 92, 95, 
	101, 103, 106, 109, 111, 117, 120, 123, 
	129, 131, 134, 137, 139, 142, 145, 153, 
	158, 166, 174, 176, 179, 182, 185, 191, 
	193, 196, 199, 201, 205, 209, 212, 215, 
	219, 223, 227, 232, 234, 236, 239, 242, 
	245, 251, 253, 256, 259, 261, 263, 266, 
	269, 272, 278, 280, 283, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	312, 314, 316, 318, 324, 340, 345, 347, 
	350, 353, 356, 362, 367, 369, 372, 375, 
	377, 379, 382, 385, 388, 394, 396, 399, 
	402, 404, 410, 413, 416, 422, 424, 427, 
	430, 432, 435, 438, 446, 451, 459, 467, 
	469, 472, 475, 478, 484, 486, 489, 492, 
	494, 498, 502, 505, 508, 512, 516, 520, 
	526, 531, 533, 535, 538, 541, 544, 550, 
	552, 555, 558, 560, 562, 565, 568, 571, 
	577, 579, 582, 585, 587, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 631, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 664, 666, 668, 670, 
	672, 678, 680, 682, 684, 686, 688, 691, 
	693, 695, 697, 699, 705, 707, 709, 711, 
	713, 715, 717, 723, 725, 727, 729, 731, 
	734, 736, 738, 740, 742, 748, 750, 752, 
	754, 756, 758, 760, 766, 769, 771, 773, 
	775, 784, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 804, 806, 808, 810, 812, 
	814, 816, 819, 822, 828, 830, 832, 834, 
	836, 838, 840, 842, 844, 846, 848, 850, 
	852, 855, 857, 859, 861, 863, 866, 868, 
	870, 872, 874, 876, 879, 881, 883, 885, 
	887, 890, 892, 894, 896, 898, 900, 902, 
	905, 907, 909, 911, 913, 916, 918, 920, 
	922, 924, 927, 929, 931, 933, 935, 937, 
	939, 942, 944, 946, 948, 952, 954, 956, 
	958, 960, 962, 967, 969, 973, 976, 980, 
	982, 985, 987, 989, 991, 993, 995, 997, 
	999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 
	1016, 1018, 1020, 1025, 1027, 1031, 1034, 1038, 
	1040, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 
	1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 
	1076, 1078, 1082, 1085, 1089, 1091, 1094, 1096, 
	1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 
	1114, 1116, 1118, 1120, 1122, 1127, 1129, 1133, 
	1136, 1140, 1142, 1145, 1147, 1149, 1151, 1153, 
	1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 
	1171, 1173, 1175, 1177, 1180, 1182, 1184, 1186, 
	1189, 1191, 1193, 1197, 1199, 1201, 1203, 1205, 
	1207, 1212, 1214, 1218, 1224, 1228, 1230, 1233, 
	1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 
	1251, 1253, 1255, 1258, 1260, 1262, 1264, 1266, 
	1268, 1273, 1275, 1279, 1285, 1289, 1291, 1294, 
	1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 
	1312, 1314, 1316, 1318, 1320, 1322, 1327, 1329, 
	1333, 1339, 1343, 1345, 1348, 1350, 1352, 1354, 
	1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 
	1372, 1374, 1376, 1381, 1383, 1387, 1393, 1397, 
	1399, 1402, 1404, 1406, 1408, 1410, 1412, 1414, 
	1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 
	1432, 1434, 1440, 1442, 1444, 1446, 1452, 1456, 
	1458, 1465, 1469, 1480, 1485, 1490
};

static const short _hext_trans_targs[] = {
	531, 1, 3, 526, 529, 530, 530, 0, 
	4, 5, 172, 533, 4, 0, 4, 5, 
	533, 6, 4, 100, 100, 0, 532, 0, 
	7, 86, 96, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 27, 
	36, 68, 77, 0, 18, 0, 19, 24, 
	0, 21, 23, 20, 21, 23, 20, 4, 
	22, 5, 533, 4, 0, 4, 5, 533, 
	4, 0, 23, 20, 21, 26, 25, 21, 
	26, 25, 26, 25, 28, 0, 29, 33, 
	0, 31, 32, 30, 31, 32, 30, 4, 
	22, 5, 533, 4, 0, 32, 30, 31, 
	35, 34, 31, 35, 34, 35, 34, 37, 
	41, 44, 51, 59, 0, 39, 40, 38, 
	39, 40, 38, 4, 22, 5, 533, 4, 
	0, 40, 38, 39, 43, 42, 39, 43, 
	42, 43, 42, 46, 50, 45, 46, 50, 
	45, 4, 47, 5, 533, 48, 49, 4, 
	0, 4, 5, 533, 4, 0, 4, 47, 
	5, 533, 48, 49, 4, 0, 4, 47, 
	5, 533, 48, 49, 4, 0, 50, 45, 
	52, 56, 0, 54, 55, 53, 54, 55, 
	53, 4, 22, 5, 533, 4, 0, 55, 
	53, 54, 58, 57, 54, 58, 57, 58, 
	57, 0, 0, 0, 60, 61, 0, 66, 
	60, 63, 67, 62, 63, 67, 62, 64, 
	65, 66, 0, 64, 65, 66, 0, 64, 
	65, 66, 0, 4, 5, 533, 4, 0, 
	67, 62, 69, 0, 70, 74, 0, 72, 
	73, 71, 72, 73, 71, 4, 22, 5, 
	533, 4, 0, 73, 71, 72, 76, 75, 
	72, 76, 75, 76, 75, 78, 0, 79, 
	83, 0, 81, 82, 80, 81, 82, 80, 
	4, 22, 5, 533, 4, 0, 82, 80, 
	81, 85, 84, 81, 85, 84, 85, 84, 
	87, 0, 88, 0, 89, 0, 90, 0, 
	91, 0, 92, 0, 93, 0, 94, 0, 
	95, 0, 17, 27, 36, 68, 77, 0, 
	97, 0, 98, 0, 99, 0, 17, 27, 
	36, 68, 77, 0, 4, 101, 102, 112, 
	100, 5, 121, 533, 154, 100, 163, 4, 
	100, 100, 100, 0, 4, 5, 533, 4, 
	0, 103, 0, 104, 109, 0, 106, 108, 
	105, 106, 108, 105, 4, 107, 5, 533, 
	4, 0, 4, 5, 533, 4, 0, 108, 
	105, 106, 111, 110, 106, 111, 110, 111, 
	110, 113, 0, 114, 118, 0, 116, 117, 
	115, 116, 117, 115, 4, 107, 5, 533, 
	4, 0, 117, 115, 116, 120, 119, 116, 
	120, 119, 120, 119, 122, 126, 129, 136, 
	144, 0, 124, 125, 123, 124, 125, 123, 
	4, 107, 5, 533, 4, 0, 125, 123, 
	124, 128, 127, 124, 128, 127, 128, 127, 
	131, 135, 130, 131, 135, 130, 4, 132, 
	5, 533, 133, 134, 4, 0, 4, 5, 
	533, 4, 0, 4, 132, 5, 533, 133, 
	134, 4, 0, 4, 132, 5, 533, 133, 
	134, 4, 0, 135, 130, 137, 141, 0, 
	139, 140, 138, 139, 140, 138, 4, 107, 
	5, 533, 4, 0, 140, 138, 139, 143, 
	142, 139, 143, 142, 143, 142, 0, 0, 
	0, 145, 146, 0, 151, 145, 148, 153, 
	147, 148, 153, 147, 149, 150, 151, 0, 
	149, 150, 151, 0, 149, 150, 151, 0, 
	4, 5, 533, 152, 4, 0, 4, 5, 
	533, 4, 0, 153, 147, 155, 0, 156, 
	160, 0, 158, 159, 157, 158, 159, 157, 
	4, 107, 5, 533, 4, 0, 159, 157, 
	158, 162, 161, 158, 162, 161, 162, 161, 
	164, 0, 165, 169, 0, 167, 168, 166, 
	167, 168, 166, 4, 107, 5, 533, 4, 
	0, 168, 166, 167, 171, 170, 167, 171, 
	170, 171, 170, 173, 191, 204, 209, 227, 
	244, 512, 522, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 0, 181, 0, 182, 0, 183, 0, 
	184, 0, 185, 0, 186, 0, 187, 0, 
	188, 0, 189, 0, 190, 189, 0, 4, 
	5, 172, 533, 4, 0, 192, 0, 193, 
	0, 194, 0, 195, 0, 196, 0, 197, 
	0, 198, 0, 199, 0, 200, 0, 201, 
	0, 202, 0, 203, 0, 190, 203, 0, 
	205, 0, 206, 0, 207, 0, 208, 0, 
	4, 5, 172, 533, 4, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 220, 0, 216, 0, 217, 0, 218, 
	0, 219, 0, 4, 5, 172, 533, 4, 
	0, 221, 0, 222, 0, 223, 0, 224, 
	0, 225, 0, 226, 0, 4, 5, 172, 
	533, 4, 0, 228, 0, 229, 0, 230, 
	0, 231, 0, 232, 237, 0, 233, 0, 
	234, 0, 235, 0, 236, 0, 4, 5, 
	172, 533, 4, 0, 238, 0, 239, 0, 
	240, 0, 241, 0, 242, 0, 243, 0, 
	4, 5, 172, 533, 4, 0, 245, 424, 
	0, 246, 0, 247, 0, 248, 0, 249, 
	268, 281, 286, 304, 321, 410, 420, 0, 
	250, 0, 251, 0, 252, 0, 253, 0, 
	254, 0, 255, 0, 256, 0, 257, 0, 
	258, 0, 259, 0, 260, 0, 261, 0, 
	262, 0, 263, 0, 264, 0, 265, 0, 
	266, 265, 0, 267, 248, 0, 4, 5, 
	172, 533, 4, 0, 269, 0, 270, 0, 
	271, 0, 272, 0, 273, 0, 274, 0, 
	275, 0, 276, 0, 277, 0, 278, 0, 
	279, 0, 280, 0, 266, 280, 0, 282, 
	0, 283, 0, 284, 0, 285, 0, 267, 
	248, 0, 287, 0, 288, 0, 289, 0, 
	290, 0, 291, 0, 292, 297, 0, 293, 
	0, 294, 0, 295, 0, 296, 0, 267, 
	248, 0, 298, 0, 299, 0, 300, 0, 
	301, 0, 302, 0, 303, 0, 267, 248, 
	0, 305, 0, 306, 0, 307, 0, 308, 
	0, 309, 314, 0, 310, 0, 311, 0, 
	312, 0, 313, 0, 267, 248, 0, 315, 
	0, 316, 0, 317, 0, 318, 0, 319, 
	0, 320, 0, 267, 248, 0, 322, 0, 
	323, 0, 324, 0, 325, 344, 389, 0, 
	326, 0, 327, 0, 328, 0, 329, 0, 
	330, 0, 331, 337, 341, 332, 0, 332, 
	0, 333, 334, 332, 0, 267, 248, 0, 
	333, 335, 335, 0, 336, 0, 333, 336, 
	0, 338, 0, 339, 0, 340, 0, 333, 
	0, 342, 0, 343, 0, 333, 0, 345, 
	0, 346, 0, 347, 0, 348, 0, 349, 
	368, 0, 350, 0, 351, 0, 352, 0, 
	353, 0, 354, 0, 355, 361, 365, 356, 
	0, 356, 0, 357, 358, 356, 0, 267, 
	248, 0, 357, 359, 359, 0, 360, 0, 
	357, 360, 0, 362, 0, 363, 0, 364, 
	0, 357, 0, 366, 0, 367, 0, 357, 
	0, 369, 0, 370, 0, 371, 0, 372, 
	0, 373, 0, 374, 0, 375, 0, 376, 
	382, 386, 377, 0, 377, 0, 378, 379, 
	377, 0, 267, 248, 0, 378, 380, 380, 
	0, 381, 0, 378, 381, 0, 383, 0, 
	384, 0, 385, 0, 378, 0, 387, 0, 
	388, 0, 378, 0, 390, 0, 391, 0, 
	392, 0, 393, 0, 394, 0, 395, 0, 
	396, 0, 397, 403, 407, 398, 0, 398, 
	0, 399, 400, 398, 0, 267, 248, 0, 
	399, 401, 401, 0, 402, 0, 399, 402, 
	0, 404, 0, 405, 0, 406, 0, 399, 
	0, 408, 0, 409, 0, 399, 0, 411, 
	0, 412, 0, 413, 0, 414, 0, 415, 
	0, 416, 0, 417, 0, 418, 0, 419, 
	0, 267, 248, 0, 421, 0, 422, 0, 
	423, 0, 267, 248, 0, 425, 0, 426, 
	0, 427, 446, 491, 0, 428, 0, 429, 
	0, 430, 0, 431, 0, 432, 0, 433, 
	439, 443, 434, 0, 434, 0, 435, 436, 
	434, 0, 4, 5, 172, 533, 4, 0, 
	435, 437, 437, 0, 438, 0, 435, 438, 
	0, 440, 0, 441, 0, 442, 0, 435, 
	0, 444, 0, 445, 0, 435, 0, 447, 
	0, 448, 0, 449, 0, 450, 0, 451, 
	470, 0, 452, 0, 453, 0, 454, 0, 
	455, 0, 456, 0, 457, 463, 467, 458, 
	0, 458, 0, 459, 460, 458, 0, 4, 
	5, 172, 533, 4, 0, 459, 461, 461, 
	0, 462, 0, 459, 462, 0, 464, 0, 
	465, 0, 466, 0, 459, 0, 468, 0, 
	469, 0, 459, 0, 471, 0, 472, 0, 
	473, 0, 474, 0, 475, 0, 476, 0, 
	477, 0, 478, 484, 488, 479, 0, 479, 
	0, 480, 481, 479, 0, 4, 5, 172, 
	533, 4, 0, 480, 482, 482, 0, 483, 
	0, 480, 483, 0, 485, 0, 486, 0, 
	487, 0, 480, 0, 489, 0, 490, 0, 
	480, 0, 492, 0, 493, 0, 494, 0, 
	495, 0, 496, 0, 497, 0, 498, 0, 
	499, 505, 509, 500, 0, 500, 0, 501, 
	502, 500, 0, 4, 5, 172, 533, 4, 
	0, 501, 503, 503, 0, 504, 0, 501, 
	504, 0, 506, 0, 507, 0, 508, 0, 
	501, 0, 510, 0, 511, 0, 501, 0, 
	513, 0, 514, 0, 515, 0, 516, 0, 
	517, 0, 518, 0, 519, 0, 520, 0, 
	521, 0, 4, 5, 172, 533, 4, 0, 
	523, 0, 524, 0, 525, 0, 4, 5, 
	172, 533, 4, 0, 527, 528, 528, 0, 
	531, 0, 528, 531, 528, 528, 528, 528, 
	0, 3, 530, 530, 0, 4, 530, 5, 
	172, 533, 530, 4, 530, 530, 530, 0, 
	531, 1, 2, 531, 0, 531, 1, 2, 
	531, 0, 531, 1, 2, 531, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 0, 0, 0, 73, 73, 85, 
	71, 71, 71, 71, 71, 85, 0, 0, 
	0, 0, 0, 45, 45, 85, 0, 85, 
	0, 0, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 37, 37, 
	37, 37, 37, 85, 0, 85, 0, 0, 
	85, 171, 49, 49, 51, 0, 0, 264, 
	67, 264, 264, 264, 85, 208, 208, 208, 
	208, 85, 0, 0, 174, 53, 53, 55, 
	0, 0, 0, 0, 0, 85, 0, 0, 
	85, 171, 49, 49, 51, 0, 0, 248, 
	63, 248, 248, 248, 85, 0, 0, 174, 
	53, 53, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 85, 171, 49, 49, 
	51, 0, 0, 224, 57, 224, 224, 224, 
	85, 0, 0, 174, 53, 53, 55, 0, 
	0, 0, 0, 156, 25, 25, 27, 0, 
	0, 272, 165, 272, 272, 0, 0, 272, 
	85, 204, 204, 204, 204, 85, 299, 196, 
	299, 299, 31, 31, 299, 85, 287, 192, 
	287, 287, 29, 29, 287, 85, 0, 0, 
	0, 0, 85, 171, 49, 49, 51, 0, 
	0, 232, 59, 232, 232, 232, 85, 0, 
	0, 174, 53, 53, 55, 0, 0, 0, 
	0, 85, 85, 85, 41, 43, 85, 43, 
	0, 156, 25, 25, 27, 0, 0, 0, 
	0, 33, 85, 31, 31, 162, 85, 29, 
	29, 159, 85, 177, 177, 177, 177, 85, 
	0, 0, 0, 85, 0, 0, 85, 171, 
	49, 49, 51, 0, 0, 240, 61, 240, 
	240, 240, 85, 0, 0, 174, 53, 53, 
	55, 0, 0, 0, 0, 0, 85, 0, 
	0, 85, 171, 49, 49, 51, 0, 0, 
	256, 65, 256, 256, 256, 85, 0, 0, 
	174, 53, 53, 55, 0, 0, 0, 0, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 39, 39, 39, 39, 39, 85, 
	0, 85, 0, 85, 0, 85, 35, 35, 
	35, 35, 35, 85, 282, 168, 47, 47, 
	0, 282, 47, 282, 47, 0, 47, 282, 
	0, 0, 0, 85, 220, 220, 220, 220, 
	85, 0, 85, 0, 0, 85, 171, 49, 
	49, 51, 0, 0, 268, 67, 268, 268, 
	268, 85, 216, 216, 216, 216, 85, 0, 
	0, 174, 53, 53, 55, 0, 0, 0, 
	0, 0, 85, 0, 0, 85, 171, 49, 
	49, 51, 0, 0, 252, 63, 252, 252, 
	252, 85, 0, 0, 174, 53, 53, 55, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 85, 171, 49, 49, 51, 0, 0, 
	228, 57, 228, 228, 228, 85, 0, 0, 
	174, 53, 53, 55, 0, 0, 0, 0, 
	156, 25, 25, 27, 0, 0, 277, 165, 
	277, 277, 0, 0, 277, 85, 212, 212, 
	212, 212, 85, 305, 196, 305, 305, 31, 
	31, 305, 85, 293, 192, 293, 293, 29, 
	29, 293, 85, 0, 0, 0, 0, 85, 
	171, 49, 49, 51, 0, 0, 236, 59, 
	236, 236, 236, 85, 0, 0, 174, 53, 
	53, 55, 0, 0, 0, 0, 85, 85, 
	85, 41, 43, 85, 43, 0, 156, 25, 
	25, 27, 0, 0, 0, 0, 33, 85, 
	31, 31, 162, 85, 29, 29, 159, 85, 
	180, 180, 180, 0, 180, 85, 200, 200, 
	200, 200, 85, 0, 0, 0, 85, 0, 
	0, 85, 171, 49, 49, 51, 0, 0, 
	244, 61, 244, 244, 244, 85, 0, 0, 
	174, 53, 53, 55, 0, 0, 0, 0, 
	0, 85, 0, 0, 85, 171, 49, 49, 
	51, 0, 0, 260, 65, 260, 260, 260, 
	85, 0, 0, 174, 53, 53, 55, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 17, 85, 19, 0, 85, 79, 
	79, 79, 79, 79, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 13, 85, 15, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	93, 93, 93, 93, 93, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 117, 117, 117, 117, 117, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 123, 123, 123, 
	123, 123, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 129, 129, 
	129, 129, 129, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	135, 135, 135, 135, 135, 85, 0, 0, 
	85, 0, 85, 0, 85, 21, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 17, 85, 
	19, 0, 85, 23, 23, 85, 77, 77, 
	77, 77, 77, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 13, 85, 15, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 90, 
	90, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 114, 
	114, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 120, 120, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 126, 126, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 132, 132, 85, 0, 85, 
	0, 85, 0, 85, 0, 0, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 5, 0, 0, 5, 85, 0, 
	85, 7, 7, 0, 85, 96, 96, 85, 
	9, 87, 87, 85, 0, 85, 11, 0, 
	85, 0, 85, 0, 85, 0, 85, 1, 
	85, 0, 85, 0, 85, 3, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 5, 0, 0, 5, 
	85, 0, 85, 7, 7, 0, 85, 102, 
	102, 85, 9, 87, 87, 85, 0, 85, 
	11, 0, 85, 0, 85, 0, 85, 0, 
	85, 1, 85, 0, 85, 0, 85, 3, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 5, 
	0, 0, 5, 85, 0, 85, 7, 7, 
	0, 85, 138, 138, 85, 9, 87, 87, 
	85, 0, 85, 11, 0, 85, 0, 85, 
	0, 85, 0, 85, 1, 85, 0, 85, 
	0, 85, 3, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 5, 0, 0, 5, 85, 0, 
	85, 7, 7, 0, 85, 108, 108, 85, 
	9, 87, 87, 85, 0, 85, 11, 0, 
	85, 0, 85, 0, 85, 0, 85, 1, 
	85, 0, 85, 0, 85, 3, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	85, 144, 144, 85, 0, 85, 0, 85, 
	0, 85, 150, 150, 85, 0, 85, 0, 
	85, 0, 0, 0, 85, 0, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 5, 
	0, 0, 5, 85, 0, 85, 7, 7, 
	0, 85, 99, 99, 99, 99, 99, 85, 
	9, 87, 87, 85, 0, 85, 11, 0, 
	85, 0, 85, 0, 85, 0, 85, 1, 
	85, 0, 85, 0, 85, 3, 85, 0, 
	85, 0, 85, 0, 85, 0, 85, 0, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 5, 0, 0, 5, 
	85, 0, 85, 7, 7, 0, 85, 105, 
	105, 105, 105, 105, 85, 9, 87, 87, 
	85, 0, 85, 11, 0, 85, 0, 85, 
	0, 85, 0, 85, 1, 85, 0, 85, 
	0, 85, 3, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 5, 0, 0, 5, 85, 0, 
	85, 7, 7, 0, 85, 141, 141, 141, 
	141, 141, 85, 9, 87, 87, 85, 0, 
	85, 11, 0, 85, 0, 85, 0, 85, 
	0, 85, 1, 85, 0, 85, 0, 85, 
	3, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	5, 0, 0, 5, 85, 0, 85, 7, 
	7, 0, 85, 111, 111, 111, 111, 111, 
	85, 9, 87, 87, 85, 0, 85, 11, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	1, 85, 0, 85, 0, 85, 3, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 0, 85, 0, 85, 0, 85, 
	0, 85, 147, 147, 147, 147, 147, 85, 
	0, 85, 0, 85, 0, 85, 153, 153, 
	153, 153, 153, 85, 81, 81, 81, 85, 
	83, 85, 0, 83, 0, 0, 0, 0, 
	85, 69, 183, 183, 85, 75, 0, 75, 
	75, 75, 0, 75, 0, 0, 0, 85, 
	0, 0, 0, 0, 85, 186, 186, 186, 
	186, 85, 189, 189, 189, 189, 85, 0
};

static const short _hext_eof_actions[] = {
	0, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 0, 186, 189
};

static const int hext_start = 531;
static const int hext_first_final = 531;
static const int hext_error = 0;

static const int hext_en_main = 531;


#line 86 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and return the top level Rule. Throw `ParseError` on invalid
  /// input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an invalid html tag.
  void throw_invalid_tag(const std::string& tag) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::size_t mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message complaining about a missing
  /// closing tag.
  void throw_missing_tag(GumboTag missing) const;

  /// Throw `ParseError` with an error message marking an invalid closing tag.
  ///
  /// \param tag
  ///   The invalid tag name.
  ///
  /// \param expected
  ///   The next expected closing GumboTag. If empty, a closing tag was
  ///   given but none expected.
  void throw_unexpected_tag(
    const std::string& tag,
    boost::optional<GumboTag> expected
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the unexpected character.
  ///
  /// \param uc
  ///   A pointer to the unexpected character.
  ///
  /// \param mark_len
  ///   Amount of '^' characters that are used to mark the error location up to
  ///   the unexpected character.
  void print_error_location(
    const char * uc,
    std::size_t mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

