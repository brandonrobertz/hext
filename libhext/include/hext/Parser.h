// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses Parser::parse()'s local variables.
#define LX_TK_START \
  tok_begin = p;    \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses Parser::parse()'s local variables.
#define LX_TK_STOP              \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  
#line 58 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 34, 1, 
	35, 1, 36, 1, 37, 1, 39, 1, 
	40, 2, 1, 41, 2, 22, 33, 2, 
	24, 33, 2, 27, 28, 2, 29, 30, 
	2, 35, 38, 2, 36, 38, 2, 37, 
	38, 3, 0, 1, 41
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 5, 6, 18, 26, 30, 
	44, 47, 51, 55, 60, 61, 63, 65, 
	66, 69, 72, 74, 76, 77, 78, 92, 
	102, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 121, 124, 130, 
	131, 132, 133, 134, 140, 141, 142, 143, 
	144, 145, 147, 148, 149, 150, 151, 157, 
	158, 159, 160, 161, 162, 163, 169, 170, 
	171, 172, 173, 175, 176, 177, 178, 179, 
	185, 186, 187, 188, 189, 190, 191, 197, 
	198, 199, 200, 203, 204, 205, 206, 207, 
	208, 212, 216, 222, 224, 226, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 242, 243, 244, 245, 246, 247, 
	251, 255, 261, 263, 265, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 280, 281, 282, 286, 290, 296, 298, 
	300, 303, 304, 305, 306, 307, 308, 309, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	321, 325, 331, 333, 335, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 347, 348, 
	349, 350, 351, 352, 353, 354, 360, 374, 
	385, 388
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 10, 10, 32, 
	33, 58, 62, 63, 9, 13, 65, 90, 
	97, 122, 32, 64, 9, 13, 65, 90, 
	97, 122, 65, 90, 97, 122, 10, 32, 
	45, 61, 62, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 34, 47, 123, 34, 
	47, 123, 125, 34, 47, 123, 125, 10, 
	32, 62, 9, 13, 10, 47, 92, 47, 
	92, 92, 47, 123, 125, 47, 123, 125, 
	47, 92, 47, 92, 125, 92, 10, 32, 
	45, 61, 62, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 58, 62, 
	9, 13, 65, 90, 97, 122, 99, 101, 
	102, 108, 110, 111, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 10, 32, 58, 62, 
	9, 13, 109, 112, 116, 121, 10, 32, 
	58, 62, 9, 13, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 10, 
	32, 58, 62, 9, 13, 102, 45, 116, 
	121, 112, 101, 10, 32, 58, 62, 9, 
	13, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 10, 32, 58, 62, 9, 
	13, 102, 45, 116, 121, 112, 101, 10, 
	32, 58, 62, 9, 13, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	10, 32, 58, 62, 9, 13, 41, 43, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 97, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 40, 101, 
	111, 48, 57, 41, 110, 48, 57, 10, 
	32, 58, 62, 9, 13, 41, 43, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 102, 45, 116, 121, 112, 
	101, 40, 101, 111, 48, 57, 41, 110, 
	48, 57, 10, 32, 58, 62, 9, 13, 
	41, 43, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 102, 45, 
	116, 121, 112, 101, 40, 101, 111, 48, 
	57, 41, 110, 48, 57, 10, 32, 58, 
	62, 9, 13, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 104, 105, 
	108, 100, 10, 32, 58, 62, 9, 13, 
	10, 32, 45, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	33, 58, 62, 9, 13, 65, 90, 97, 
	122, 32, 35, 60, 32, 35, 60, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 3, 1, 6, 2, 0, 6, 
	3, 4, 4, 3, 1, 2, 2, 1, 
	3, 3, 2, 2, 1, 1, 6, 4, 
	6, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 4, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	2, 2, 4, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 2, 
	2, 4, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 4, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 4, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 6, 5, 
	3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 3, 3, 2, 4, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 4, 3, 
	0, 0
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 7, 9, 19, 25, 28, 
	39, 43, 48, 53, 58, 60, 63, 66, 
	68, 72, 76, 79, 82, 84, 86, 97, 
	105, 112, 114, 116, 118, 120, 122, 124, 
	126, 128, 130, 132, 134, 136, 139, 145, 
	147, 149, 151, 153, 159, 161, 163, 165, 
	167, 169, 172, 174, 176, 178, 180, 186, 
	188, 190, 192, 194, 196, 198, 204, 206, 
	208, 210, 212, 215, 217, 219, 221, 223, 
	229, 231, 233, 235, 237, 239, 241, 247, 
	249, 251, 253, 257, 259, 261, 263, 265, 
	267, 271, 275, 281, 284, 286, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 314, 316, 318, 320, 322, 324, 
	328, 332, 338, 341, 343, 346, 348, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 378, 382, 388, 391, 
	393, 396, 398, 400, 402, 404, 406, 408, 
	410, 412, 414, 416, 418, 420, 422, 424, 
	428, 432, 438, 441, 443, 446, 448, 450, 
	452, 454, 456, 458, 460, 462, 464, 466, 
	468, 470, 472, 474, 476, 478, 484, 495, 
	504, 508
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 4, 0, 177, 
	3, 177, 5, 23, 24, 12, 175, 5, 
	174, 174, 0, 5, 6, 5, 22, 22, 
	0, 7, 7, 0, 177, 5, 7, 8, 
	12, 7, 5, 7, 7, 7, 0, 9, 
	13, 16, 0, 0, 0, 0, 0, 10, 
	11, 0, 0, 0, 10, 177, 5, 12, 
	5, 0, 177, 0, 11, 15, 14, 11, 
	15, 14, 15, 14, 0, 0, 0, 17, 
	18, 0, 11, 17, 20, 21, 19, 20, 
	21, 19, 11, 0, 21, 19, 177, 5, 
	22, 8, 12, 22, 5, 22, 22, 22, 
	0, 177, 5, 24, 12, 5, 174, 174, 
	0, 25, 39, 44, 62, 79, 164, 0, 
	26, 0, 27, 0, 28, 0, 29, 0, 
	30, 0, 31, 0, 32, 0, 33, 0, 
	34, 0, 35, 0, 36, 0, 37, 0, 
	38, 37, 0, 177, 5, 24, 12, 5, 
	0, 40, 0, 41, 0, 42, 0, 43, 
	0, 177, 5, 24, 12, 5, 0, 45, 
	0, 46, 0, 47, 0, 48, 0, 49, 
	0, 50, 55, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 177, 5, 24, 12, 
	5, 0, 56, 0, 57, 0, 58, 0, 
	59, 0, 60, 0, 61, 0, 177, 5, 
	24, 12, 5, 0, 63, 0, 64, 0, 
	65, 0, 66, 0, 67, 72, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 177, 
	5, 24, 12, 5, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 177, 5, 24, 12, 5, 0, 80, 
	0, 81, 0, 82, 0, 83, 101, 144, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 94, 98, 89, 0, 90, 
	91, 89, 0, 177, 5, 24, 12, 5, 
	0, 90, 92, 0, 93, 0, 90, 93, 
	0, 95, 0, 96, 0, 97, 0, 90, 
	0, 99, 0, 100, 0, 90, 0, 102, 
	0, 103, 0, 104, 0, 105, 0, 106, 
	124, 0, 107, 0, 108, 0, 109, 0, 
	110, 0, 111, 0, 117, 121, 112, 0, 
	113, 114, 112, 0, 177, 5, 24, 12, 
	5, 0, 113, 115, 0, 116, 0, 113, 
	116, 0, 118, 0, 119, 0, 120, 0, 
	113, 0, 122, 0, 123, 0, 113, 0, 
	125, 0, 126, 0, 127, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 137, 141, 
	132, 0, 133, 134, 132, 0, 177, 5, 
	24, 12, 5, 0, 133, 135, 0, 136, 
	0, 133, 136, 0, 138, 0, 139, 0, 
	140, 0, 133, 0, 142, 0, 143, 0, 
	133, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 149, 0, 150, 0, 151, 0, 
	157, 161, 152, 0, 153, 154, 152, 0, 
	177, 5, 24, 12, 5, 0, 153, 155, 
	0, 156, 0, 153, 156, 0, 158, 0, 
	159, 0, 160, 0, 153, 0, 162, 0, 
	163, 0, 153, 0, 165, 0, 166, 0, 
	167, 0, 168, 0, 169, 0, 170, 0, 
	171, 0, 172, 0, 173, 0, 177, 5, 
	24, 12, 5, 0, 177, 5, 174, 24, 
	12, 174, 5, 174, 174, 174, 0, 177, 
	5, 23, 24, 12, 5, 174, 174, 0, 
	1, 3, 4, 0, 1, 3, 4, 0, 
	0
};

static const char _hext_trans_actions[] = {
	0, 0, 1, 69, 0, 69, 1, 0, 
	0, 71, 71, 71, 71, 71, 71, 71, 
	96, 96, 1, 0, 0, 0, 47, 47, 
	1, 43, 43, 1, 84, 84, 0, 45, 
	84, 0, 84, 0, 0, 0, 1, 0, 
	0, 0, 1, 1, 1, 1, 1, 63, 
	65, 1, 1, 1, 0, 67, 67, 67, 
	67, 1, 79, 1, 93, 59, 59, 61, 
	0, 0, 0, 0, 1, 1, 1, 51, 
	53, 1, 53, 0, 90, 55, 55, 57, 
	0, 0, 0, 1, 0, 0, 87, 87, 
	0, 49, 87, 0, 87, 0, 0, 0, 
	1, 75, 75, 75, 75, 75, 102, 102, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 21, 1, 
	23, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 19, 19, 19, 19, 19, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 31, 31, 31, 31, 
	31, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 33, 33, 
	33, 33, 33, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 35, 
	35, 35, 35, 35, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 37, 37, 37, 37, 37, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 9, 1, 11, 
	11, 0, 1, 25, 25, 25, 25, 25, 
	1, 13, 13, 1, 15, 1, 17, 0, 
	1, 0, 1, 0, 1, 0, 1, 5, 
	1, 0, 1, 0, 1, 7, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 9, 1, 
	11, 11, 0, 1, 27, 27, 27, 27, 
	27, 1, 13, 13, 1, 15, 1, 17, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 7, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	9, 1, 11, 11, 0, 1, 39, 39, 
	39, 39, 39, 1, 13, 13, 1, 15, 
	1, 17, 0, 1, 0, 1, 0, 1, 
	0, 1, 5, 1, 0, 1, 0, 1, 
	7, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 9, 1, 11, 11, 0, 1, 
	29, 29, 29, 29, 29, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 41, 41, 
	41, 41, 41, 1, 77, 77, 0, 77, 
	77, 0, 77, 0, 0, 0, 1, 73, 
	73, 73, 73, 73, 73, 99, 99, 1, 
	0, 0, 0, 1, 3, 3, 3, 1, 
	0
};

static const char _hext_eof_actions[] = {
	0, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	81, 81
};

static const int hext_start = 176;
static const int hext_first_final = 176;
static const int hext_error = 0;

static const int hext_en_main = 176;


#line 58 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range begin
  /// to end. Pointers must stay valid until the last call to Parser::parse().
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a vector of rules.
  /// Throws ParseError on invalid input.
  std::vector<Rule> parse();

private:
  /// Throw ParseError with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw ParseError with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw ParseError with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    const std::string& tok,
    boost::regex_constants::error_type e_code
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. mark_len denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// A pointer to the beginning of the overall input is needed to provide
  /// good error diagnostics.
  const char * p_begin_;

  /// ragel's runtime state
  const char * p;
  const char * pe;
  const char * eof;
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

