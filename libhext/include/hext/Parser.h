// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 60 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	38, 1, 39, 1, 41, 2, 1, 42, 
	2, 21, 22, 2, 23, 24, 2, 25, 
	26, 2, 26, 34, 2, 28, 31, 2, 
	28, 34, 2, 30, 31, 2, 30, 34, 
	2, 36, 38, 2, 37, 38, 2, 38, 
	40, 2, 39, 40, 3, 0, 1, 42, 
	3, 25, 26, 34, 3, 36, 38, 40, 
	3, 37, 38, 40
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 7, 8, 16, 22, 26, 
	42, 43, 44, 46, 48, 50, 58, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 77, 80, 83, 84, 85, 
	86, 87, 90, 91, 92, 93, 94, 95, 
	97, 98, 99, 100, 101, 104, 105, 106, 
	107, 108, 109, 110, 113, 114, 115, 116, 
	117, 119, 120, 121, 122, 123, 126, 127, 
	128, 129, 130, 131, 132, 135, 136, 137, 
	138, 141, 142, 143, 144, 145, 146, 150, 
	154, 157, 159, 161, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	177, 178, 179, 180, 181, 182, 186, 190, 
	193, 195, 197, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 218, 222, 225, 227, 229, 232, 
	233, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 246, 250, 254, 
	257, 259, 261, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	277, 278, 279, 280, 283, 290, 301, 309, 
	310, 313, 315, 317, 324, 331, 332, 335, 
	338, 340, 342, 348, 354, 355, 371, 376, 
	381
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 62, 126, 10, 
	32, 58, 62, 63, 65, 90, 97, 122, 
	32, 64, 65, 90, 97, 122, 65, 90, 
	97, 122, 32, 33, 36, 42, 45, 61, 
	62, 94, 95, 126, 48, 57, 65, 90, 
	97, 122, 61, 34, 34, 92, 34, 92, 
	32, 62, 32, 58, 62, 63, 65, 90, 
	97, 122, 99, 101, 102, 108, 110, 111, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	32, 58, 62, 109, 112, 116, 121, 32, 
	58, 62, 105, 114, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 58, 62, 
	102, 45, 116, 121, 112, 101, 32, 58, 
	62, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 32, 58, 62, 102, 45, 
	116, 121, 112, 101, 32, 58, 62, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 101, 111, 48, 57, 41, 110, 
	48, 57, 32, 58, 62, 41, 43, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 32, 58, 
	62, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 32, 58, 
	62, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 32, 58, 
	62, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 110, 
	108, 121, 45, 99, 104, 105, 108, 100, 
	32, 58, 62, 32, 58, 62, 65, 90, 
	97, 122, 32, 45, 58, 62, 95, 48, 
	57, 65, 90, 97, 122, 32, 58, 62, 
	63, 65, 90, 97, 122, 92, 34, 47, 
	123, 47, 92, 47, 92, 32, 33, 62, 
	65, 90, 97, 122, 32, 33, 62, 65, 
	90, 97, 122, 92, 47, 123, 125, 47, 
	123, 125, 47, 92, 47, 92, 33, 125, 
	65, 90, 97, 122, 33, 125, 65, 90, 
	97, 122, 92, 32, 33, 36, 42, 45, 
	61, 62, 94, 95, 126, 48, 57, 65, 
	90, 97, 122, 32, 35, 60, 62, 126, 
	32, 35, 60, 62, 126, 10, 32, 35, 
	60, 62, 126, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 1, 4, 2, 0, 10, 
	1, 1, 2, 2, 2, 4, 6, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 3, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 3, 5, 4, 1, 
	3, 2, 2, 3, 3, 1, 3, 3, 
	2, 2, 2, 2, 1, 10, 5, 5, 
	6
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 2, 2, 2, 3, 
	0, 0, 0, 0, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 3, 2, 0, 
	0, 0, 0, 2, 2, 0, 0, 0, 
	0, 0, 2, 2, 0, 3, 0, 0, 
	0
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 9, 11, 18, 23, 26, 
	40, 42, 44, 47, 50, 53, 60, 67, 
	69, 71, 73, 75, 77, 79, 81, 83, 
	85, 87, 89, 91, 94, 98, 100, 102, 
	104, 106, 110, 112, 114, 116, 118, 120, 
	123, 125, 127, 129, 131, 135, 137, 139, 
	141, 143, 145, 147, 151, 153, 155, 157, 
	159, 162, 164, 166, 168, 170, 174, 176, 
	178, 180, 182, 184, 186, 190, 192, 194, 
	196, 200, 202, 204, 206, 208, 210, 214, 
	218, 222, 225, 227, 230, 232, 234, 236, 
	238, 240, 242, 244, 246, 248, 250, 252, 
	255, 257, 259, 261, 263, 265, 269, 273, 
	277, 280, 282, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 317, 321, 325, 328, 330, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 365, 369, 
	373, 376, 378, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 417, 423, 432, 439, 
	441, 445, 448, 451, 457, 463, 465, 469, 
	473, 476, 479, 484, 489, 491, 505, 511, 
	517
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 4, 13, 166, 
	0, 183, 3, 5, 14, 184, 164, 165, 
	165, 0, 5, 6, 181, 181, 0, 7, 
	7, 0, 5, 8, 8, 8, 7, 168, 
	184, 8, 7, 8, 7, 7, 7, 0, 
	9, 0, 10, 0, 12, 167, 11, 12, 
	167, 11, 5, 184, 0, 5, 14, 184, 
	164, 165, 165, 0, 15, 29, 34, 52, 
	69, 154, 0, 16, 0, 17, 0, 18, 
	0, 19, 0, 20, 0, 21, 0, 22, 
	0, 23, 0, 24, 0, 25, 0, 26, 
	0, 27, 0, 28, 27, 0, 5, 14, 
	184, 0, 30, 0, 31, 0, 32, 0, 
	33, 0, 5, 14, 184, 0, 35, 0, 
	36, 0, 37, 0, 38, 0, 39, 0, 
	40, 45, 0, 41, 0, 42, 0, 43, 
	0, 44, 0, 5, 14, 184, 0, 46, 
	0, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 5, 14, 184, 0, 53, 
	0, 54, 0, 55, 0, 56, 0, 57, 
	62, 0, 58, 0, 59, 0, 60, 0, 
	61, 0, 5, 14, 184, 0, 63, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	68, 0, 5, 14, 184, 0, 70, 0, 
	71, 0, 72, 0, 73, 91, 134, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 84, 88, 79, 0, 80, 81, 
	79, 0, 5, 14, 184, 0, 80, 82, 
	0, 83, 0, 80, 83, 0, 85, 0, 
	86, 0, 87, 0, 80, 0, 89, 0, 
	90, 0, 80, 0, 92, 0, 93, 0, 
	94, 0, 95, 0, 96, 114, 0, 97, 
	0, 98, 0, 99, 0, 100, 0, 101, 
	0, 107, 111, 102, 0, 103, 104, 102, 
	0, 5, 14, 184, 0, 103, 105, 0, 
	106, 0, 103, 106, 0, 108, 0, 109, 
	0, 110, 0, 103, 0, 112, 0, 113, 
	0, 103, 0, 115, 0, 116, 0, 117, 
	0, 118, 0, 119, 0, 120, 0, 121, 
	0, 127, 131, 122, 0, 123, 124, 122, 
	0, 5, 14, 184, 0, 123, 125, 0, 
	126, 0, 123, 126, 0, 128, 0, 129, 
	0, 130, 0, 123, 0, 132, 0, 133, 
	0, 123, 0, 135, 0, 136, 0, 137, 
	0, 138, 0, 139, 0, 140, 0, 141, 
	0, 147, 151, 142, 0, 143, 144, 142, 
	0, 5, 14, 184, 0, 143, 145, 0, 
	146, 0, 143, 146, 0, 148, 0, 149, 
	0, 150, 0, 143, 0, 152, 0, 153, 
	0, 143, 0, 155, 0, 156, 0, 157, 
	0, 158, 0, 159, 0, 160, 0, 161, 
	0, 162, 0, 163, 0, 5, 14, 184, 
	0, 5, 14, 184, 165, 165, 0, 5, 
	165, 14, 184, 165, 165, 165, 165, 0, 
	5, 14, 184, 164, 165, 165, 0, 167, 
	11, 10, 169, 174, 0, 171, 173, 170, 
	171, 173, 170, 5, 172, 184, 172, 172, 
	0, 5, 172, 184, 172, 172, 0, 173, 
	170, 0, 0, 0, 175, 176, 0, 12, 
	175, 178, 180, 177, 178, 180, 177, 179, 
	12, 179, 179, 0, 179, 12, 179, 179, 
	0, 180, 177, 5, 8, 8, 8, 181, 
	168, 184, 8, 181, 8, 181, 181, 181, 
	0, 1, 3, 4, 13, 166, 0, 1, 
	3, 4, 13, 166, 0, 183, 1, 3, 
	4, 13, 166, 0, 0
};

static const unsigned char _hext_trans_actions[] = {
	0, 0, 1, 69, 0, 69, 69, 69, 
	1, 0, 0, 71, 71, 71, 71, 110, 
	110, 1, 0, 0, 59, 59, 1, 55, 
	55, 1, 95, 92, 92, 92, 0, 57, 
	95, 92, 0, 92, 0, 0, 0, 1, 
	0, 1, 0, 1, 80, 43, 43, 45, 
	0, 0, 67, 67, 1, 104, 104, 104, 
	104, 124, 124, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 21, 1, 23, 0, 1, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 19, 19, 19, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 31, 31, 31, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 33, 33, 33, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 35, 35, 35, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 37, 37, 37, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 25, 25, 25, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 9, 1, 11, 11, 0, 
	1, 27, 27, 27, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 9, 1, 11, 11, 0, 
	1, 39, 39, 39, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 9, 1, 11, 11, 0, 
	1, 29, 29, 29, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 41, 41, 41, 
	1, 73, 73, 73, 113, 113, 1, 75, 
	0, 75, 75, 0, 0, 0, 0, 1, 
	107, 107, 107, 107, 128, 128, 1, 0, 
	0, 0, 0, 0, 1, 83, 47, 47, 
	49, 0, 0, 120, 51, 120, 51, 51, 
	1, 89, 0, 89, 0, 0, 1, 0, 
	0, 1, 1, 1, 63, 65, 1, 65, 
	0, 83, 47, 47, 49, 0, 0, 51, 
	86, 51, 51, 1, 0, 53, 0, 0, 
	1, 0, 0, 101, 98, 98, 98, 0, 
	61, 101, 98, 0, 98, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 3, 
	3, 3, 3, 3, 1, 0, 0, 0, 
	0, 0, 0, 1, 0
};

static const unsigned char _hext_eof_actions[] = {
	0, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 77, 77, 
	77
};

static const int hext_start = 182;
static const int hext_first_final = 182;
static const int hext_error = 0;

static const int hext_en_main = 182;


#line 60 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a vector of rules.
  /// Throw `ParseError` on invalid input.
  std::vector<Rule> parse(Option flags = DefaultOption);

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

