// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses Parser::parse()'s local variables.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses Parser::parse()'s local variables.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  
#line 59 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	28, 1, 29, 1, 30, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	36, 1, 37, 1, 38, 1, 40, 1, 
	41, 2, 1, 42, 2, 21, 22, 2, 
	24, 27, 2, 24, 34, 2, 26, 27, 
	2, 26, 34, 2, 30, 31, 2, 32, 
	33, 2, 36, 39, 2, 37, 39, 2, 
	38, 39, 3, 0, 1, 42, 3, 9, 
	1, 42, 3, 12, 1, 42, 3, 13, 
	1, 42, 3, 14, 1, 42, 3, 15, 
	1, 42, 3, 16, 1, 42, 3, 17, 
	1, 42, 3, 18, 1, 42, 3, 19, 
	1, 42, 3, 20, 1, 42, 3, 34, 
	1, 42, 3, 36, 1, 42, 3, 37, 
	1, 42, 3, 38, 1, 42, 3, 40, 
	1, 42, 3, 41, 1, 42, 4, 24, 
	34, 1, 42, 4, 26, 34, 1, 42
	
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 6, 7, 13, 17, 18, 
	19, 21, 23, 29, 30, 31, 32, 33, 
	34, 35, 36, 37, 38, 39, 40, 42, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	53, 54, 56, 57, 58, 59, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	70, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 88, 
	89, 90, 91, 92, 93, 97, 101, 103, 
	105, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 121, 122, 123, 
	124, 125, 126, 130, 134, 136, 138, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 159, 163, 
	165, 167, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 188, 192, 194, 196, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 219, 
	221, 223, 224, 227, 230, 232, 234, 235, 
	236, 240, 244, 255, 274, 279, 284, 295, 
	301, 307, 313, 319, 325, 331, 337, 343, 
	349, 355, 361, 371, 385
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 62, 10, 32, 
	64, 65, 90, 97, 122, 65, 90, 97, 
	122, 61, 34, 34, 92, 34, 92, 99, 
	101, 102, 108, 110, 111, 104, 105, 108, 
	100, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 109, 112, 116, 
	121, 105, 114, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 102, 45, 116, 121, 
	112, 101, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 102, 45, 116, 121, 
	112, 101, 116, 104, 45, 99, 108, 111, 
	104, 105, 108, 100, 40, 101, 111, 48, 
	57, 41, 110, 48, 57, 41, 43, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 41, 43, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 101, 111, 48, 57, 41, 
	110, 48, 57, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	41, 43, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 110, 108, 
	121, 45, 99, 104, 105, 108, 100, 92, 
	34, 47, 123, 47, 92, 47, 92, 92, 
	47, 123, 125, 47, 123, 125, 47, 92, 
	47, 92, 125, 92, 32, 35, 60, 62, 
	32, 35, 60, 62, 10, 32, 35, 58, 
	60, 62, 63, 65, 90, 97, 122, 10, 
	32, 33, 35, 36, 42, 45, 60, 61, 
	62, 94, 95, 126, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 60, 62, 10, 
	32, 35, 60, 62, 10, 32, 35, 58, 
	60, 62, 63, 65, 90, 97, 122, 10, 
	32, 35, 58, 60, 62, 10, 32, 35, 
	58, 60, 62, 10, 32, 35, 58, 60, 
	62, 10, 32, 35, 58, 60, 62, 10, 
	32, 35, 58, 60, 62, 10, 32, 35, 
	58, 60, 62, 10, 32, 35, 58, 60, 
	62, 10, 32, 35, 58, 60, 62, 10, 
	32, 35, 58, 60, 62, 10, 32, 35, 
	58, 60, 62, 10, 32, 35, 58, 60, 
	62, 10, 32, 35, 58, 60, 62, 65, 
	90, 97, 122, 10, 32, 35, 45, 58, 
	60, 62, 95, 48, 57, 65, 90, 97, 
	122, 10, 32, 33, 35, 36, 42, 45, 
	60, 61, 62, 94, 95, 126, 48, 57, 
	65, 90, 97, 122, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 4, 1, 2, 0, 1, 1, 
	2, 2, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 2, 2, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 2, 2, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 2, 
	2, 1, 3, 3, 2, 2, 1, 1, 
	4, 4, 7, 13, 5, 5, 7, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 8, 13
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 2, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 0, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 3
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 8, 10, 15, 18, 20, 
	22, 25, 28, 35, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	62, 64, 66, 68, 70, 72, 74, 76, 
	78, 80, 83, 85, 87, 89, 91, 93, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 114, 116, 118, 120, 122, 124, 126, 
	128, 130, 132, 134, 136, 138, 140, 144, 
	146, 148, 150, 152, 154, 158, 162, 165, 
	167, 170, 172, 174, 176, 178, 180, 182, 
	184, 186, 188, 190, 192, 195, 197, 199, 
	201, 203, 205, 209, 213, 216, 218, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 253, 257, 
	260, 262, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 297, 301, 304, 306, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 347, 
	350, 353, 355, 359, 363, 366, 369, 371, 
	373, 378, 383, 393, 410, 416, 422, 432, 
	439, 446, 453, 460, 467, 474, 481, 488, 
	495, 502, 509, 518, 530
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 162, 166, 0, 
	161, 3, 4, 5, 180, 180, 0, 163, 
	163, 0, 7, 0, 8, 0, 164, 149, 
	9, 164, 149, 9, 11, 24, 28, 44, 
	59, 140, 0, 12, 0, 13, 0, 14, 
	0, 15, 0, 16, 0, 17, 0, 18, 
	0, 19, 0, 20, 0, 21, 0, 22, 
	0, 23, 0, 167, 23, 0, 25, 0, 
	26, 0, 27, 0, 168, 0, 29, 0, 
	30, 0, 31, 0, 32, 0, 33, 0, 
	34, 38, 0, 35, 0, 36, 0, 37, 
	0, 169, 0, 39, 0, 40, 0, 41, 
	0, 42, 0, 43, 0, 170, 0, 45, 
	0, 46, 0, 47, 0, 48, 0, 49, 
	53, 0, 50, 0, 51, 0, 52, 0, 
	171, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 172, 0, 60, 0, 
	61, 0, 62, 0, 63, 80, 121, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	68, 0, 73, 77, 69, 0, 173, 70, 
	69, 0, 173, 71, 0, 72, 0, 173, 
	72, 0, 74, 0, 75, 0, 76, 0, 
	173, 0, 78, 0, 79, 0, 173, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	85, 102, 0, 86, 0, 87, 0, 88, 
	0, 89, 0, 90, 0, 95, 99, 91, 
	0, 174, 92, 91, 0, 174, 93, 0, 
	94, 0, 174, 94, 0, 96, 0, 97, 
	0, 98, 0, 174, 0, 100, 0, 101, 
	0, 174, 0, 103, 0, 104, 0, 105, 
	0, 106, 0, 107, 0, 108, 0, 109, 
	0, 114, 118, 110, 0, 175, 111, 110, 
	0, 175, 112, 0, 113, 0, 175, 113, 
	0, 115, 0, 116, 0, 117, 0, 175, 
	0, 119, 0, 120, 0, 175, 0, 122, 
	0, 123, 0, 124, 0, 125, 0, 126, 
	0, 127, 0, 128, 0, 133, 137, 129, 
	0, 176, 130, 129, 0, 176, 131, 0, 
	132, 0, 176, 132, 0, 134, 0, 135, 
	0, 136, 0, 176, 0, 138, 0, 139, 
	0, 176, 0, 141, 0, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 147, 
	0, 148, 0, 177, 0, 149, 9, 8, 
	151, 154, 0, 164, 153, 152, 164, 153, 
	152, 153, 152, 0, 0, 0, 155, 156, 
	0, 164, 155, 158, 159, 157, 158, 159, 
	157, 164, 0, 159, 157, 1, 3, 162, 
	166, 0, 1, 3, 162, 166, 0, 161, 
	4, 3, 10, 162, 165, 178, 179, 179, 
	0, 161, 4, 6, 3, 6, 6, 163, 
	162, 150, 165, 6, 163, 6, 163, 163, 
	163, 0, 161, 4, 3, 162, 165, 0, 
	161, 1, 3, 162, 166, 0, 161, 4, 
	3, 10, 162, 165, 178, 179, 179, 0, 
	161, 4, 3, 10, 162, 165, 0, 161, 
	4, 3, 10, 162, 165, 0, 161, 4, 
	3, 10, 162, 165, 0, 161, 4, 3, 
	10, 162, 165, 0, 161, 4, 3, 10, 
	162, 165, 0, 161, 4, 3, 10, 162, 
	165, 0, 161, 4, 3, 10, 162, 165, 
	0, 161, 4, 3, 10, 162, 165, 0, 
	161, 4, 3, 10, 162, 165, 0, 161, 
	4, 3, 10, 162, 165, 0, 161, 4, 
	3, 10, 162, 165, 0, 161, 4, 3, 
	10, 162, 165, 179, 179, 0, 161, 4, 
	3, 179, 10, 162, 165, 179, 179, 179, 
	179, 0, 161, 4, 6, 3, 6, 6, 
	180, 162, 150, 165, 6, 180, 6, 180, 
	180, 180, 0, 0
};

static const unsigned char _hext_trans_actions[] = {
	0, 0, 1, 69, 0, 69, 69, 1, 
	0, 0, 0, 0, 51, 51, 1, 47, 
	47, 1, 0, 1, 0, 1, 84, 43, 
	43, 45, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 21, 1, 23, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 13, 13, 1, 15, 1, 17, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 7, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 9, 
	1, 11, 11, 0, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 9, 1, 11, 11, 0, 
	1, 13, 13, 1, 15, 1, 17, 0, 
	1, 0, 1, 0, 1, 0, 1, 5, 
	1, 0, 1, 0, 1, 7, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 9, 
	1, 11, 11, 0, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	0, 0, 1, 102, 63, 63, 65, 0, 
	0, 0, 0, 1, 1, 1, 55, 57, 
	1, 57, 0, 99, 59, 59, 61, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 3, 3, 3, 3, 1, 71, 
	71, 71, 71, 71, 71, 71, 105, 105, 
	1, 90, 90, 87, 90, 87, 87, 0, 
	90, 49, 90, 87, 0, 87, 0, 0, 
	0, 1, 67, 67, 67, 67, 67, 1, 
	79, 79, 79, 79, 79, 1, 73, 73, 
	73, 73, 73, 73, 73, 108, 108, 1, 
	0, 0, 0, 0, 0, 0, 1, 19, 
	19, 19, 19, 19, 19, 1, 31, 31, 
	31, 31, 31, 31, 1, 33, 33, 33, 
	33, 33, 33, 1, 35, 35, 35, 35, 
	35, 35, 1, 37, 37, 37, 37, 37, 
	37, 1, 25, 25, 25, 25, 25, 25, 
	1, 27, 27, 27, 27, 27, 27, 1, 
	39, 39, 39, 39, 39, 39, 1, 29, 
	29, 29, 29, 29, 29, 1, 41, 41, 
	41, 41, 41, 41, 1, 75, 75, 75, 
	75, 75, 75, 111, 111, 1, 77, 77, 
	77, 0, 77, 77, 77, 0, 0, 0, 
	0, 1, 96, 96, 93, 96, 93, 93, 
	0, 96, 53, 96, 93, 0, 93, 0, 
	0, 0, 1, 0
};

static const unsigned char _hext_eof_actions[] = {
	0, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	114, 114, 114, 114, 114, 114, 114, 114, 
	81, 81, 162, 182, 158, 178, 166, 81, 
	118, 134, 138, 142, 146, 122, 126, 150, 
	130, 154, 170, 174, 187
};

static const int hext_start = 160;
static const int hext_first_final = 160;
static const int hext_error = 0;

static const int hext_en_main = 160;


#line 59 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range begin
  /// to end. Pointers must stay valid until the last call to Parser::parse().
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a vector of rules.
  /// Throws ParseError on invalid input.
  std::vector<Rule> parse(Option flags = Option::Default);

private:
  /// Throw ParseError with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw ParseError with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw ParseError with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    const std::string& tok,
    boost::regex_constants::error_type e_code
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. mark_len denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// A pointer to the beginning of the overall input is needed to provide
  /// good error diagnostics.
  const char * p_begin_;

  /// ragel's runtime state
  const char * p;
  const char * pe;
  const char * eof;
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

