// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 63 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 35, 1, 
	36, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 2, 0, 47, 
	2, 23, 24, 2, 25, 26, 2, 27, 
	28, 2, 28, 38, 2, 31, 34, 2, 
	31, 38, 2, 33, 34, 2, 33, 38, 
	2, 37, 38, 2, 39, 40, 2, 43, 
	46, 2, 43, 47, 2, 46, 47, 3, 
	27, 28, 38, 3, 42, 44, 45, 3, 
	43, 46, 47
};

static const short _hext_key_offsets[] = {
	0, 0, 4, 15, 20, 21, 22, 33, 
	38, 42, 60, 61, 62, 64, 66, 71, 
	72, 75, 77, 79, 89, 99, 100, 103, 
	106, 108, 110, 116, 122, 128, 133, 134, 
	152, 157, 166, 174, 175, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 189, 191, 194, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 213, 216, 217, 218, 219, 220, 226, 
	227, 228, 229, 230, 231, 233, 234, 235, 
	236, 237, 243, 244, 245, 246, 247, 248, 
	249, 255, 256, 257, 258, 259, 261, 262, 
	263, 264, 265, 271, 272, 273, 274, 275, 
	276, 277, 283, 284, 285, 286, 289, 290, 
	291, 292, 293, 294, 298, 302, 308, 310, 
	312, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 328, 329, 330, 
	331, 332, 333, 337, 341, 347, 349, 351, 
	354, 355, 356, 357, 358, 359, 360, 361, 
	362, 363, 364, 365, 366, 367, 368, 372, 
	376, 382, 384, 386, 389, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 400, 
	401, 402, 403, 407, 411, 417, 419, 421, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	440, 446, 447, 448, 449, 455, 465, 479, 
	484, 489, 494, 499, 504
};

static const char _hext_trans_keys[] = {
	32, 60, 9, 13, 32, 47, 58, 62, 
	63, 9, 13, 65, 90, 97, 122, 32, 
	47, 62, 9, 13, 62, 10, 32, 33, 
	47, 62, 64, 9, 13, 65, 90, 97, 
	122, 64, 65, 90, 97, 122, 65, 90, 
	97, 122, 32, 36, 42, 45, 47, 61, 
	62, 94, 95, 126, 9, 13, 48, 57, 
	65, 90, 97, 122, 61, 34, 34, 92, 
	34, 92, 32, 47, 62, 9, 13, 92, 
	34, 47, 123, 47, 92, 47, 92, 32, 
	33, 47, 62, 9, 13, 65, 90, 97, 
	122, 32, 33, 47, 62, 9, 13, 65, 
	90, 97, 122, 92, 47, 123, 125, 47, 
	123, 125, 47, 92, 47, 92, 33, 125, 
	65, 90, 97, 122, 33, 125, 65, 90, 
	97, 122, 32, 47, 62, 63, 9, 13, 
	32, 47, 62, 9, 13, 92, 32, 36, 
	42, 45, 47, 61, 62, 94, 95, 126, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	62, 65, 90, 97, 122, 45, 62, 95, 
	48, 57, 65, 90, 97, 122, 97, 99, 
	101, 102, 108, 110, 111, 116, 116, 116, 
	114, 105, 98, 117, 116, 101, 45, 99, 
	111, 117, 110, 116, 40, 48, 57, 41, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	109, 112, 116, 121, 32, 47, 58, 62, 
	9, 13, 105, 114, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 116, 104, 45, 99, 108, 
	111, 104, 105, 108, 100, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 40, 101, 111, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 101, 111, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 110, 
	108, 121, 45, 99, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 101, 120, 
	116, 32, 47, 58, 62, 9, 13, 32, 
	47, 58, 62, 9, 13, 65, 90, 97, 
	122, 32, 45, 47, 58, 62, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 32, 35, 60, 9, 13, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	32, 35, 60, 9, 13, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 3, 1, 1, 5, 1, 
	0, 10, 1, 1, 2, 2, 3, 1, 
	3, 2, 2, 4, 4, 1, 3, 3, 
	2, 2, 2, 2, 4, 3, 1, 10, 
	1, 3, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 4, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 2, 2, 4, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 2, 2, 4, 2, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	4, 2, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 4, 2, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 4, 4, 6, 3, 
	3, 3, 3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 1, 3, 1, 0, 0, 3, 2, 
	2, 4, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 2, 2, 1, 1, 0, 4, 
	2, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 3, 4, 1, 
	1, 1, 1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 4, 13, 18, 20, 22, 31, 
	35, 38, 53, 55, 57, 60, 63, 68, 
	70, 74, 77, 80, 88, 96, 98, 102, 
	106, 109, 112, 117, 122, 128, 133, 135, 
	150, 154, 161, 170, 172, 174, 176, 178, 
	180, 182, 184, 186, 188, 190, 192, 194, 
	196, 198, 200, 202, 205, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 238, 240, 242, 244, 246, 252, 
	254, 256, 258, 260, 262, 265, 267, 269, 
	271, 273, 279, 281, 283, 285, 287, 289, 
	291, 297, 299, 301, 303, 305, 308, 310, 
	312, 314, 316, 322, 324, 326, 328, 330, 
	332, 334, 340, 342, 344, 346, 350, 352, 
	354, 356, 358, 360, 364, 368, 374, 377, 
	379, 382, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 404, 407, 409, 411, 
	413, 415, 417, 421, 425, 431, 434, 436, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 471, 
	475, 481, 484, 486, 489, 491, 493, 495, 
	497, 499, 501, 503, 505, 507, 509, 511, 
	513, 515, 517, 521, 525, 531, 534, 536, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 577, 579, 581, 583, 589, 597, 608, 
	613, 618, 623, 628, 633
};

static const unsigned char _hext_trans_targs[] = {
	1, 2, 1, 0, 6, 32, 34, 209, 
	205, 3, 206, 206, 0, 3, 4, 209, 
	3, 0, 209, 0, 208, 5, 6, 7, 
	4, 209, 8, 3, 31, 31, 0, 8, 
	31, 31, 0, 9, 9, 0, 6, 10, 
	10, 9, 4, 16, 209, 10, 9, 10, 
	3, 9, 9, 9, 0, 11, 0, 12, 
	0, 14, 15, 13, 14, 15, 13, 6, 
	4, 209, 3, 0, 15, 13, 12, 17, 
	22, 0, 19, 21, 18, 19, 21, 18, 
	6, 20, 4, 209, 3, 20, 20, 0, 
	6, 20, 4, 209, 3, 20, 20, 0, 
	21, 18, 0, 0, 0, 23, 24, 0, 
	28, 23, 26, 30, 25, 26, 30, 25, 
	27, 28, 27, 27, 0, 27, 28, 27, 
	27, 0, 6, 4, 209, 29, 3, 0, 
	6, 4, 209, 3, 0, 30, 25, 6, 
	10, 10, 31, 4, 16, 209, 10, 31, 
	10, 3, 31, 31, 31, 0, 211, 33, 
	33, 0, 33, 212, 33, 33, 33, 33, 
	0, 35, 53, 66, 71, 89, 106, 191, 
	201, 0, 36, 0, 37, 0, 38, 0, 
	39, 0, 40, 0, 41, 0, 42, 0, 
	43, 0, 44, 0, 45, 0, 46, 0, 
	47, 0, 48, 0, 49, 0, 50, 0, 
	51, 0, 52, 51, 0, 6, 4, 34, 
	209, 3, 0, 54, 0, 55, 0, 56, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 52, 65, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 6, 4, 
	34, 209, 3, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 82, 
	0, 78, 0, 79, 0, 80, 0, 81, 
	0, 6, 4, 34, 209, 3, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 6, 4, 34, 209, 3, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 99, 0, 95, 0, 96, 0, 
	97, 0, 98, 0, 6, 4, 34, 209, 
	3, 0, 100, 0, 101, 0, 102, 0, 
	103, 0, 104, 0, 105, 0, 6, 4, 
	34, 209, 3, 0, 107, 0, 108, 0, 
	109, 0, 110, 128, 171, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	121, 125, 116, 0, 117, 118, 116, 0, 
	6, 4, 34, 209, 3, 0, 117, 119, 
	0, 120, 0, 117, 120, 0, 122, 0, 
	123, 0, 124, 0, 117, 0, 126, 0, 
	127, 0, 117, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 151, 0, 134, 
	0, 135, 0, 136, 0, 137, 0, 138, 
	0, 144, 148, 139, 0, 140, 141, 139, 
	0, 6, 4, 34, 209, 3, 0, 140, 
	142, 0, 143, 0, 140, 143, 0, 145, 
	0, 146, 0, 147, 0, 140, 0, 149, 
	0, 150, 0, 140, 0, 152, 0, 153, 
	0, 154, 0, 155, 0, 156, 0, 157, 
	0, 158, 0, 164, 168, 159, 0, 160, 
	161, 159, 0, 6, 4, 34, 209, 3, 
	0, 160, 162, 0, 163, 0, 160, 163, 
	0, 165, 0, 166, 0, 167, 0, 160, 
	0, 169, 0, 170, 0, 160, 0, 172, 
	0, 173, 0, 174, 0, 175, 0, 176, 
	0, 177, 0, 178, 0, 184, 188, 179, 
	0, 180, 181, 179, 0, 6, 4, 34, 
	209, 3, 0, 180, 182, 0, 183, 0, 
	180, 183, 0, 185, 0, 186, 0, 187, 
	0, 180, 0, 189, 0, 190, 0, 180, 
	0, 192, 0, 193, 0, 194, 0, 195, 
	0, 196, 0, 197, 0, 198, 0, 199, 
	0, 200, 0, 6, 4, 34, 209, 3, 
	0, 202, 0, 203, 0, 204, 0, 6, 
	4, 34, 209, 3, 0, 6, 4, 34, 
	209, 3, 206, 206, 0, 6, 206, 4, 
	34, 209, 206, 3, 206, 206, 206, 0, 
	207, 5, 2, 1, 0, 207, 5, 2, 
	1, 0, 210, 5, 2, 210, 0, 210, 
	5, 2, 210, 0, 210, 5, 2, 210, 
	0, 210, 5, 2, 210, 0, 0
};

static const unsigned char _hext_trans_actions[] = {
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 77, 77, 1, 0, 0, 0, 
	0, 1, 81, 1, 0, 0, 0, 59, 
	0, 0, 0, 0, 65, 65, 1, 0, 
	65, 65, 1, 61, 61, 1, 111, 108, 
	108, 0, 111, 63, 111, 108, 0, 108, 
	111, 0, 0, 0, 1, 0, 1, 0, 
	1, 96, 47, 47, 49, 0, 0, 73, 
	73, 73, 73, 1, 0, 0, 0, 0, 
	0, 1, 99, 51, 51, 53, 0, 0, 
	135, 55, 135, 135, 135, 55, 55, 1, 
	105, 0, 105, 105, 105, 0, 0, 1, 
	0, 0, 1, 1, 1, 69, 71, 1, 
	71, 0, 99, 51, 51, 53, 0, 0, 
	55, 102, 55, 55, 1, 0, 57, 0, 
	0, 1, 73, 73, 73, 0, 73, 1, 
	120, 120, 120, 120, 1, 0, 0, 117, 
	114, 114, 0, 117, 67, 117, 114, 0, 
	114, 117, 0, 0, 0, 1, 139, 85, 
	85, 1, 0, 87, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	19, 1, 21, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 23, 1, 25, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 17, 17, 
	17, 17, 17, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 33, 33, 33, 33, 33, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 35, 35, 35, 35, 35, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 37, 37, 37, 37, 
	37, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 39, 39, 
	39, 39, 39, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 7, 1, 9, 9, 0, 1, 
	27, 27, 27, 27, 27, 1, 11, 11, 
	1, 13, 1, 15, 0, 1, 0, 1, 
	0, 1, 0, 1, 3, 1, 0, 1, 
	0, 1, 5, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 7, 1, 9, 9, 0, 
	1, 29, 29, 29, 29, 29, 1, 11, 
	11, 1, 13, 1, 15, 0, 1, 0, 
	1, 0, 1, 0, 1, 3, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 7, 1, 9, 
	9, 0, 1, 41, 41, 41, 41, 41, 
	1, 11, 11, 1, 13, 1, 15, 0, 
	1, 0, 1, 0, 1, 0, 1, 3, 
	1, 0, 1, 0, 1, 5, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 7, 
	1, 9, 9, 0, 1, 31, 31, 31, 
	31, 31, 1, 11, 11, 1, 13, 1, 
	15, 0, 1, 0, 1, 0, 1, 0, 
	1, 3, 1, 0, 1, 0, 1, 5, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 43, 43, 43, 43, 43, 
	1, 0, 1, 0, 1, 0, 1, 45, 
	45, 45, 45, 45, 1, 75, 75, 75, 
	75, 75, 123, 123, 1, 79, 0, 79, 
	79, 79, 0, 79, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 83, 83, 83, 83, 1, 0, 
	0, 0, 0, 1, 126, 126, 126, 126, 
	1, 89, 89, 89, 89, 1, 0
};

static const unsigned char _hext_eof_actions[] = {
	0, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	91, 129, 91, 143, 132
};

static const int hext_start = 208;
static const int hext_first_final = 208;
static const int hext_error = 0;

static const int hext_en_main = 208;


#line 63 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message marking an invalid or missing
  /// closing tag.
  void throw_expected_closing_tag(
    const std::string& input,
    boost::optional<GumboTag> expected_closing_tag
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

