// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses Parser::parse()'s local variables.
#define LX_TK_START \
  tok_begin = p;    \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses Parser::parse()'s local variables.
#define LX_TK_STOP              \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  
#line 58 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 34, 1, 
	35, 1, 36, 1, 38, 1, 39, 2, 
	1, 40, 2, 21, 32, 2, 23, 32, 
	2, 26, 27, 2, 28, 29, 2, 34, 
	37, 2, 35, 37, 2, 36, 37, 3, 
	0, 1, 40
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 5, 6, 18, 26, 30, 
	44, 47, 51, 55, 60, 61, 63, 65, 
	66, 69, 72, 74, 76, 77, 78, 92, 
	102, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 120, 123, 129, 
	130, 131, 132, 133, 139, 140, 141, 142, 
	143, 144, 146, 147, 148, 149, 150, 156, 
	157, 158, 159, 160, 161, 162, 168, 169, 
	170, 171, 172, 174, 175, 176, 177, 178, 
	184, 185, 186, 187, 188, 189, 190, 196, 
	197, 198, 199, 202, 203, 204, 205, 206, 
	207, 211, 215, 221, 223, 225, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	238, 239, 241, 242, 243, 244, 245, 246, 
	250, 254, 260, 262, 264, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 281, 285, 289, 295, 297, 
	299, 302, 303, 304, 305, 306, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	320, 324, 330, 332, 334, 337, 338, 339, 
	340, 341, 342, 343, 344, 358, 369, 372
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 10, 10, 32, 
	33, 58, 62, 63, 9, 13, 65, 90, 
	97, 122, 32, 64, 9, 13, 65, 90, 
	97, 122, 65, 90, 97, 122, 10, 32, 
	45, 61, 62, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 34, 47, 123, 34, 
	47, 123, 125, 34, 47, 123, 125, 10, 
	32, 62, 9, 13, 10, 47, 92, 47, 
	92, 92, 47, 123, 125, 47, 123, 125, 
	47, 92, 47, 92, 125, 92, 10, 32, 
	45, 61, 62, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 58, 62, 
	9, 13, 65, 90, 97, 122, 99, 101, 
	102, 108, 110, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 10, 32, 58, 62, 9, 
	13, 109, 112, 116, 121, 10, 32, 58, 
	62, 9, 13, 105, 114, 115, 116, 45, 
	99, 111, 104, 105, 108, 100, 10, 32, 
	58, 62, 9, 13, 102, 45, 116, 121, 
	112, 101, 10, 32, 58, 62, 9, 13, 
	97, 115, 116, 45, 99, 111, 104, 105, 
	108, 100, 10, 32, 58, 62, 9, 13, 
	102, 45, 116, 121, 112, 101, 10, 32, 
	58, 62, 9, 13, 116, 104, 45, 99, 
	108, 111, 104, 105, 108, 100, 40, 101, 
	111, 48, 57, 41, 110, 48, 57, 10, 
	32, 58, 62, 9, 13, 41, 43, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 10, 32, 
	58, 62, 9, 13, 41, 43, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 102, 45, 116, 121, 112, 101, 
	40, 101, 111, 48, 57, 41, 110, 48, 
	57, 10, 32, 58, 62, 9, 13, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 10, 32, 58, 62, 
	9, 13, 41, 43, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	10, 32, 45, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	33, 58, 62, 9, 13, 65, 90, 97, 
	122, 32, 35, 60, 32, 35, 60, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 3, 1, 6, 2, 0, 6, 
	3, 4, 4, 3, 1, 2, 2, 1, 
	3, 3, 2, 2, 1, 1, 6, 4, 
	5, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 4, 1, 
	1, 1, 1, 4, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	2, 2, 4, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 2, 
	2, 4, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 4, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 4, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 5, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 3, 3, 2, 4, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 4, 3, 0, 0
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 7, 9, 19, 25, 28, 
	39, 43, 48, 53, 58, 60, 63, 66, 
	68, 72, 76, 79, 82, 84, 86, 97, 
	105, 111, 113, 115, 117, 119, 121, 123, 
	125, 127, 129, 131, 133, 135, 138, 144, 
	146, 148, 150, 152, 158, 160, 162, 164, 
	166, 168, 171, 173, 175, 177, 179, 185, 
	187, 189, 191, 193, 195, 197, 203, 205, 
	207, 209, 211, 214, 216, 218, 220, 222, 
	228, 230, 232, 234, 236, 238, 240, 246, 
	248, 250, 252, 256, 258, 260, 262, 264, 
	266, 270, 274, 280, 283, 285, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 313, 315, 317, 319, 321, 323, 
	327, 331, 337, 340, 342, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 373, 377, 381, 387, 390, 
	392, 395, 397, 399, 401, 403, 405, 407, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	427, 431, 437, 440, 442, 445, 447, 449, 
	451, 453, 455, 457, 459, 470, 479, 483
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 4, 0, 167, 
	3, 167, 5, 23, 24, 12, 165, 5, 
	164, 164, 0, 5, 6, 5, 22, 22, 
	0, 7, 7, 0, 167, 5, 7, 8, 
	12, 7, 5, 7, 7, 7, 0, 9, 
	13, 16, 0, 0, 0, 0, 0, 10, 
	11, 0, 0, 0, 10, 167, 5, 12, 
	5, 0, 167, 0, 11, 15, 14, 11, 
	15, 14, 15, 14, 0, 0, 0, 17, 
	18, 0, 11, 17, 20, 21, 19, 20, 
	21, 19, 11, 0, 21, 19, 167, 5, 
	22, 8, 12, 22, 5, 22, 22, 22, 
	0, 167, 5, 24, 12, 5, 164, 164, 
	0, 25, 39, 44, 62, 79, 0, 26, 
	0, 27, 0, 28, 0, 29, 0, 30, 
	0, 31, 0, 32, 0, 33, 0, 34, 
	0, 35, 0, 36, 0, 37, 0, 38, 
	37, 0, 167, 5, 24, 12, 5, 0, 
	40, 0, 41, 0, 42, 0, 43, 0, 
	167, 5, 24, 12, 5, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 55, 0, 51, 0, 52, 0, 53, 
	0, 54, 0, 167, 5, 24, 12, 5, 
	0, 56, 0, 57, 0, 58, 0, 59, 
	0, 60, 0, 61, 0, 167, 5, 24, 
	12, 5, 0, 63, 0, 64, 0, 65, 
	0, 66, 0, 67, 72, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 167, 5, 
	24, 12, 5, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 78, 0, 
	167, 5, 24, 12, 5, 0, 80, 0, 
	81, 0, 82, 0, 83, 101, 144, 0, 
	84, 0, 85, 0, 86, 0, 87, 0, 
	88, 0, 94, 98, 89, 0, 90, 91, 
	89, 0, 167, 5, 24, 12, 5, 0, 
	90, 92, 0, 93, 0, 90, 93, 0, 
	95, 0, 96, 0, 97, 0, 90, 0, 
	99, 0, 100, 0, 90, 0, 102, 0, 
	103, 0, 104, 0, 105, 0, 106, 124, 
	0, 107, 0, 108, 0, 109, 0, 110, 
	0, 111, 0, 117, 121, 112, 0, 113, 
	114, 112, 0, 167, 5, 24, 12, 5, 
	0, 113, 115, 0, 116, 0, 113, 116, 
	0, 118, 0, 119, 0, 120, 0, 113, 
	0, 122, 0, 123, 0, 113, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 137, 141, 132, 
	0, 133, 134, 132, 0, 167, 5, 24, 
	12, 5, 0, 133, 135, 0, 136, 0, 
	133, 136, 0, 138, 0, 139, 0, 140, 
	0, 133, 0, 142, 0, 143, 0, 133, 
	0, 145, 0, 146, 0, 147, 0, 148, 
	0, 149, 0, 150, 0, 151, 0, 157, 
	161, 152, 0, 153, 154, 152, 0, 167, 
	5, 24, 12, 5, 0, 153, 155, 0, 
	156, 0, 153, 156, 0, 158, 0, 159, 
	0, 160, 0, 153, 0, 162, 0, 163, 
	0, 153, 0, 167, 5, 164, 24, 12, 
	164, 5, 164, 164, 164, 0, 167, 5, 
	23, 24, 12, 5, 164, 164, 0, 1, 
	3, 4, 0, 1, 3, 4, 0, 0
};

static const char _hext_trans_actions[] = {
	0, 0, 1, 67, 0, 67, 1, 0, 
	0, 69, 69, 69, 69, 69, 69, 69, 
	94, 94, 1, 0, 0, 0, 45, 45, 
	1, 41, 41, 1, 82, 82, 0, 43, 
	82, 0, 82, 0, 0, 0, 1, 0, 
	0, 0, 1, 1, 1, 1, 1, 61, 
	63, 1, 1, 1, 0, 65, 65, 65, 
	65, 1, 77, 1, 91, 57, 57, 59, 
	0, 0, 0, 0, 1, 1, 1, 49, 
	51, 1, 51, 0, 88, 53, 53, 55, 
	0, 0, 0, 1, 0, 0, 85, 85, 
	0, 47, 85, 0, 85, 0, 0, 0, 
	1, 73, 73, 73, 73, 73, 100, 100, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 21, 1, 23, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	19, 19, 19, 19, 19, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 31, 31, 31, 31, 31, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 33, 33, 33, 
	33, 33, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 35, 35, 
	35, 35, 35, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	37, 37, 37, 37, 37, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 25, 25, 25, 25, 25, 1, 
	13, 13, 1, 15, 1, 17, 0, 1, 
	0, 1, 0, 1, 0, 1, 5, 1, 
	0, 1, 0, 1, 7, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 9, 1, 11, 
	11, 0, 1, 27, 27, 27, 27, 27, 
	1, 13, 13, 1, 15, 1, 17, 0, 
	1, 0, 1, 0, 1, 0, 1, 5, 
	1, 0, 1, 0, 1, 7, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 9, 
	1, 11, 11, 0, 1, 39, 39, 39, 
	39, 39, 1, 13, 13, 1, 15, 1, 
	17, 0, 1, 0, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 7, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 9, 1, 11, 11, 0, 1, 29, 
	29, 29, 29, 29, 1, 13, 13, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 7, 1, 75, 75, 0, 75, 75, 
	0, 75, 0, 0, 0, 1, 71, 71, 
	71, 71, 71, 71, 97, 97, 1, 0, 
	0, 0, 1, 3, 3, 3, 1, 0
};

static const char _hext_eof_actions[] = {
	0, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 79, 79
};

static const int hext_start = 166;
static const int hext_first_final = 166;
static const int hext_error = 0;

static const int hext_en_main = 166;


#line 58 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range begin
  /// to end. Pointers must stay valid until the last call to Parser::parse().
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a vector of rules.
  /// Throws ParseError on invalid input.
  std::vector<Rule> parse();

private:
  /// Throw ParseError with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw ParseError with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw ParseError with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    const std::string& tok,
    boost::regex_constants::error_type e_code
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. mark_len denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// A pointer to the beginning of the overall input is needed to provide
  /// good error diagnostics.
  const char * p_begin_;

  /// ragel's runtime state
  const char * p;
  const char * pe;
  const char * eof;
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

