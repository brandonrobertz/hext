// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 63 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 35, 1, 
	36, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 2, 0, 47, 
	2, 23, 24, 2, 25, 26, 2, 27, 
	28, 2, 28, 38, 2, 31, 34, 2, 
	31, 38, 2, 33, 34, 2, 33, 38, 
	2, 37, 38, 2, 39, 40, 2, 43, 
	46, 2, 43, 47, 2, 46, 47, 3, 
	27, 28, 38, 3, 42, 44, 45, 3, 
	43, 46, 47
};

static const short _hext_key_offsets[] = {
	0, 0, 4, 15, 26, 31, 35, 53, 
	54, 55, 57, 59, 64, 65, 66, 67, 
	70, 72, 74, 84, 94, 95, 98, 101, 
	103, 105, 111, 117, 123, 128, 129, 147, 
	152, 161, 169, 170, 171, 172, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 186, 189, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 206, 
	208, 211, 212, 213, 214, 215, 221, 222, 
	223, 224, 225, 226, 228, 229, 230, 231, 
	232, 238, 239, 240, 241, 242, 243, 244, 
	250, 251, 252, 253, 254, 256, 257, 258, 
	259, 260, 266, 267, 268, 269, 270, 271, 
	272, 278, 279, 280, 281, 284, 285, 286, 
	287, 288, 289, 293, 297, 303, 305, 307, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 323, 324, 325, 326, 
	327, 328, 332, 336, 342, 344, 346, 349, 
	350, 351, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 362, 363, 367, 371, 
	377, 379, 381, 384, 385, 386, 387, 388, 
	389, 390, 391, 392, 393, 394, 395, 396, 
	397, 398, 402, 406, 412, 414, 416, 419, 
	420, 421, 422, 423, 424, 425, 426, 427, 
	428, 429, 430, 431, 432, 433, 434, 435, 
	441, 442, 443, 444, 450, 460, 474, 479, 
	484, 489, 494, 499
};

static const char _hext_trans_keys[] = {
	32, 60, 9, 13, 32, 47, 58, 62, 
	63, 9, 13, 65, 90, 97, 122, 32, 
	33, 47, 62, 64, 9, 13, 65, 90, 
	97, 122, 64, 65, 90, 97, 122, 65, 
	90, 97, 122, 32, 36, 42, 45, 47, 
	61, 62, 94, 95, 126, 9, 13, 48, 
	57, 65, 90, 97, 122, 61, 34, 34, 
	92, 34, 92, 32, 47, 62, 9, 13, 
	62, 10, 92, 34, 47, 123, 47, 92, 
	47, 92, 32, 33, 47, 62, 9, 13, 
	65, 90, 97, 122, 32, 33, 47, 62, 
	9, 13, 65, 90, 97, 122, 92, 47, 
	123, 125, 47, 123, 125, 47, 92, 47, 
	92, 33, 125, 65, 90, 97, 122, 33, 
	125, 65, 90, 97, 122, 32, 47, 62, 
	63, 9, 13, 32, 47, 62, 9, 13, 
	92, 32, 36, 42, 45, 47, 61, 62, 
	94, 95, 126, 9, 13, 48, 57, 65, 
	90, 97, 122, 62, 65, 90, 97, 122, 
	45, 62, 95, 48, 57, 65, 90, 97, 
	122, 97, 99, 101, 102, 108, 110, 111, 
	116, 116, 116, 114, 105, 98, 117, 116, 
	101, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 32, 47, 58, 
	62, 9, 13, 104, 105, 108, 100, 45, 
	99, 111, 117, 110, 116, 40, 48, 57, 
	41, 48, 57, 109, 112, 116, 121, 32, 
	47, 58, 62, 9, 13, 105, 114, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	32, 47, 58, 62, 9, 13, 102, 45, 
	116, 121, 112, 101, 32, 47, 58, 62, 
	9, 13, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 102, 45, 116, 121, 112, 101, 
	32, 47, 58, 62, 9, 13, 116, 104, 
	45, 99, 108, 111, 104, 105, 108, 100, 
	40, 101, 111, 48, 57, 41, 110, 48, 
	57, 32, 47, 58, 62, 9, 13, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 101, 111, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 101, 111, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 110, 108, 121, 45, 99, 104, 
	105, 108, 100, 32, 47, 58, 62, 9, 
	13, 101, 120, 116, 32, 47, 58, 62, 
	9, 13, 32, 47, 58, 62, 9, 13, 
	65, 90, 97, 122, 32, 45, 47, 58, 
	62, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 35, 60, 9, 13, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 32, 35, 60, 9, 13, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 5, 1, 0, 10, 1, 
	1, 2, 2, 3, 1, 1, 1, 3, 
	2, 2, 4, 4, 1, 3, 3, 2, 
	2, 2, 2, 4, 3, 1, 10, 1, 
	3, 8, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	4, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 2, 2, 4, 2, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 2, 2, 4, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 4, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 4, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 4, 4, 6, 3, 3, 
	3, 3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 1, 3, 3, 2, 2, 4, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 0, 0, 0, 
	0, 2, 2, 1, 1, 0, 4, 2, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 3, 4, 1, 1, 
	1, 1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 4, 13, 22, 26, 29, 44, 
	46, 48, 51, 54, 59, 61, 63, 65, 
	69, 72, 75, 83, 91, 93, 97, 101, 
	104, 107, 112, 117, 123, 128, 130, 145, 
	149, 156, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 200, 206, 208, 210, 212, 
	214, 216, 218, 220, 222, 224, 226, 228, 
	230, 233, 235, 237, 239, 241, 247, 249, 
	251, 253, 255, 257, 260, 262, 264, 266, 
	268, 274, 276, 278, 280, 282, 284, 286, 
	292, 294, 296, 298, 300, 303, 305, 307, 
	309, 311, 317, 319, 321, 323, 325, 327, 
	329, 335, 337, 339, 341, 345, 347, 349, 
	351, 353, 355, 359, 363, 369, 372, 374, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 402, 404, 406, 408, 
	410, 412, 416, 420, 426, 429, 431, 434, 
	436, 438, 440, 442, 444, 446, 448, 450, 
	452, 454, 456, 458, 460, 462, 466, 470, 
	476, 479, 481, 484, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 506, 508, 
	510, 512, 516, 520, 526, 529, 531, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	572, 574, 576, 578, 584, 592, 603, 608, 
	613, 618, 623, 628
};

static const unsigned char _hext_trans_targs[] = {
	1, 2, 1, 0, 3, 31, 33, 208, 
	204, 3, 205, 205, 0, 3, 4, 12, 
	208, 5, 3, 30, 30, 0, 5, 30, 
	30, 0, 6, 6, 0, 3, 7, 7, 
	6, 12, 15, 208, 7, 6, 7, 3, 
	6, 6, 6, 0, 8, 0, 9, 0, 
	11, 14, 10, 11, 14, 10, 3, 12, 
	208, 3, 0, 208, 0, 207, 13, 14, 
	10, 9, 16, 21, 0, 18, 20, 17, 
	18, 20, 17, 3, 19, 12, 208, 3, 
	19, 19, 0, 3, 19, 12, 208, 3, 
	19, 19, 0, 20, 17, 0, 0, 0, 
	22, 23, 0, 27, 22, 25, 29, 24, 
	25, 29, 24, 26, 27, 26, 26, 0, 
	26, 27, 26, 26, 0, 3, 12, 208, 
	28, 3, 0, 3, 12, 208, 3, 0, 
	29, 24, 3, 7, 7, 30, 12, 15, 
	208, 7, 30, 7, 3, 30, 30, 30, 
	0, 210, 32, 32, 0, 32, 211, 32, 
	32, 32, 32, 0, 34, 52, 65, 70, 
	88, 105, 190, 200, 0, 35, 0, 36, 
	0, 37, 0, 38, 0, 39, 0, 40, 
	0, 41, 0, 42, 0, 43, 0, 44, 
	0, 45, 0, 46, 0, 47, 0, 48, 
	0, 49, 0, 50, 0, 51, 50, 0, 
	3, 12, 33, 208, 3, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	58, 0, 59, 0, 60, 0, 61, 0, 
	62, 0, 63, 0, 64, 0, 51, 64, 
	0, 66, 0, 67, 0, 68, 0, 69, 
	0, 3, 12, 33, 208, 3, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 81, 0, 77, 0, 78, 0, 
	79, 0, 80, 0, 3, 12, 33, 208, 
	3, 0, 82, 0, 83, 0, 84, 0, 
	85, 0, 86, 0, 87, 0, 3, 12, 
	33, 208, 3, 0, 89, 0, 90, 0, 
	91, 0, 92, 0, 93, 98, 0, 94, 
	0, 95, 0, 96, 0, 97, 0, 3, 
	12, 33, 208, 3, 0, 99, 0, 100, 
	0, 101, 0, 102, 0, 103, 0, 104, 
	0, 3, 12, 33, 208, 3, 0, 106, 
	0, 107, 0, 108, 0, 109, 127, 170, 
	0, 110, 0, 111, 0, 112, 0, 113, 
	0, 114, 0, 120, 124, 115, 0, 116, 
	117, 115, 0, 3, 12, 33, 208, 3, 
	0, 116, 118, 0, 119, 0, 116, 119, 
	0, 121, 0, 122, 0, 123, 0, 116, 
	0, 125, 0, 126, 0, 116, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	150, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 143, 147, 138, 0, 
	139, 140, 138, 0, 3, 12, 33, 208, 
	3, 0, 139, 141, 0, 142, 0, 139, 
	142, 0, 144, 0, 145, 0, 146, 0, 
	139, 0, 148, 0, 149, 0, 139, 0, 
	151, 0, 152, 0, 153, 0, 154, 0, 
	155, 0, 156, 0, 157, 0, 163, 167, 
	158, 0, 159, 160, 158, 0, 3, 12, 
	33, 208, 3, 0, 159, 161, 0, 162, 
	0, 159, 162, 0, 164, 0, 165, 0, 
	166, 0, 159, 0, 168, 0, 169, 0, 
	159, 0, 171, 0, 172, 0, 173, 0, 
	174, 0, 175, 0, 176, 0, 177, 0, 
	183, 187, 178, 0, 179, 180, 178, 0, 
	3, 12, 33, 208, 3, 0, 179, 181, 
	0, 182, 0, 179, 182, 0, 184, 0, 
	185, 0, 186, 0, 179, 0, 188, 0, 
	189, 0, 179, 0, 191, 0, 192, 0, 
	193, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 198, 0, 199, 0, 3, 12, 
	33, 208, 3, 0, 201, 0, 202, 0, 
	203, 0, 3, 12, 33, 208, 3, 0, 
	3, 12, 33, 208, 3, 205, 205, 0, 
	3, 205, 12, 33, 208, 205, 3, 205, 
	205, 205, 0, 206, 13, 2, 1, 0, 
	206, 13, 2, 1, 0, 209, 13, 2, 
	209, 0, 209, 13, 2, 209, 0, 209, 
	13, 2, 209, 0, 209, 13, 2, 209, 
	0, 0
};

static const unsigned char _hext_trans_actions[] = {
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 77, 77, 1, 0, 59, 0, 
	0, 0, 0, 65, 65, 1, 0, 65, 
	65, 1, 61, 61, 1, 111, 108, 108, 
	0, 111, 63, 111, 108, 0, 108, 111, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	96, 47, 47, 49, 0, 0, 73, 73, 
	73, 73, 1, 81, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 99, 51, 51, 
	53, 0, 0, 135, 55, 135, 135, 135, 
	55, 55, 1, 105, 0, 105, 105, 105, 
	0, 0, 1, 0, 0, 1, 1, 1, 
	69, 71, 1, 71, 0, 99, 51, 51, 
	53, 0, 0, 55, 102, 55, 55, 1, 
	0, 57, 0, 0, 1, 73, 73, 73, 
	0, 73, 1, 120, 120, 120, 120, 1, 
	0, 0, 117, 114, 114, 0, 117, 67, 
	117, 114, 0, 114, 117, 0, 0, 0, 
	1, 139, 85, 85, 1, 0, 87, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 19, 1, 21, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 23, 1, 25, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 17, 17, 17, 17, 17, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 33, 33, 33, 33, 
	33, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 35, 35, 
	35, 35, 35, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 37, 
	37, 37, 37, 37, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 39, 39, 39, 39, 39, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 7, 1, 9, 
	9, 0, 1, 27, 27, 27, 27, 27, 
	1, 11, 11, 1, 13, 1, 15, 0, 
	1, 0, 1, 0, 1, 0, 1, 3, 
	1, 0, 1, 0, 1, 5, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 7, 1, 
	9, 9, 0, 1, 29, 29, 29, 29, 
	29, 1, 11, 11, 1, 13, 1, 15, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	3, 1, 0, 1, 0, 1, 5, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	7, 1, 9, 9, 0, 1, 41, 41, 
	41, 41, 41, 1, 11, 11, 1, 13, 
	1, 15, 0, 1, 0, 1, 0, 1, 
	0, 1, 3, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 7, 1, 9, 9, 0, 1, 
	31, 31, 31, 31, 31, 1, 11, 11, 
	1, 13, 1, 15, 0, 1, 0, 1, 
	0, 1, 0, 1, 3, 1, 0, 1, 
	0, 1, 5, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 43, 43, 
	43, 43, 43, 1, 0, 1, 0, 1, 
	0, 1, 45, 45, 45, 45, 45, 1, 
	75, 75, 75, 75, 75, 123, 123, 1, 
	79, 0, 79, 79, 79, 0, 79, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 83, 83, 83, 
	83, 1, 0, 0, 0, 0, 1, 126, 
	126, 126, 126, 1, 89, 89, 89, 89, 
	1, 0
};

static const unsigned char _hext_eof_actions[] = {
	0, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 91, 
	129, 91, 143, 132
};

static const int hext_start = 207;
static const int hext_first_final = 207;
static const int hext_error = 0;

static const int hext_en_main = 207;


#line 63 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message marking an invalid or missing
  /// closing tag.
  void throw_expected_closing_tag(
    const std::string& input,
    boost::optional<GumboTag> expected_closing_tag
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

