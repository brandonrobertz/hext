// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/Builtins.h"
#include "hext/MakeUnique.h"
#include "hext/pattern/AttributeCapture.h"
#include "hext/pattern/AttributeCountMatch.h"
#include "hext/pattern/AttributeMatch.h"
#include "hext/pattern/BuiltinCapture.h"
#include "hext/pattern/BuiltinMatch.h"
#include "hext/pattern/CapturePattern.h"
#include "hext/pattern/ChildCountMatch.h"
#include "hext/pattern/MatchPattern.h"
#include "hext/pattern/NthChildMatch.h"
#include "hext/pattern/TextNodeMatch.h"
#include "hext/PatternValues.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/StringUtil.h"
#include "hext/test/BeginsWith.h"
#include "hext/test/Contains.h"
#include "hext/test/ContainsWord.h"
#include "hext/test/EndsWith.h"
#include "hext/test/Equals.h"
#include "hext/test/Negate.h"
#include "hext/test/Regex.h"
#include "hext/test/True.h"
#include "hext/test/ValueTest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 83 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 26, 1, 27, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 36, 1, 37, 1, 38, 1, 
	39, 1, 40, 1, 41, 1, 42, 1, 
	43, 1, 44, 1, 54, 1, 55, 1, 
	56, 1, 60, 1, 61, 1, 62, 1, 
	63, 2, 0, 63, 2, 5, 6, 2, 
	23, 24, 2, 25, 27, 2, 26, 27, 
	2, 27, 28, 2, 37, 51, 2, 38, 
	39, 2, 45, 53, 2, 48, 53, 2, 
	54, 55, 2, 57, 59, 2, 58, 59, 
	2, 60, 61, 2, 62, 63, 3, 25, 
	27, 28, 3, 26, 27, 28, 3, 34, 
	48, 53, 3, 35, 46, 53, 3, 35, 
	47, 53, 3, 35, 49, 53, 3, 35, 
	50, 53, 3, 35, 52, 53, 3, 40, 
	47, 53, 3, 40, 50, 53, 3, 41, 
	47, 53, 3, 41, 50, 53, 3, 42, 
	47, 53, 3, 42, 50, 53, 3, 43, 
	47, 53, 3, 43, 50, 53, 3, 44, 
	47, 53, 3, 44, 50, 53, 3, 57, 
	59, 62, 3, 57, 59, 63, 3, 58, 
	59, 63, 4, 27, 28, 46, 53, 4, 
	27, 28, 49, 53, 4, 37, 51, 52, 
	53, 4, 57, 59, 62, 63, 5, 25, 
	27, 28, 46, 53, 5, 25, 27, 28, 
	49, 53, 5, 26, 27, 28, 46, 53, 
	5, 26, 27, 28, 49, 53
};

static const short _hext_key_offsets[] = {
	0, 0, 4, 15, 25, 26, 27, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 44, 45, 46, 48, 50, 56, 61, 
	62, 63, 64, 66, 68, 74, 75, 78, 
	80, 82, 88, 89, 91, 93, 101, 106, 
	114, 122, 123, 126, 129, 131, 133, 136, 
	139, 142, 147, 148, 149, 150, 152, 154, 
	160, 161, 162, 163, 165, 167, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 188, 189, 190, 191, 196, 215, 220, 
	221, 222, 224, 226, 232, 237, 238, 239, 
	240, 242, 244, 250, 251, 254, 256, 258, 
	264, 265, 267, 269, 277, 282, 290, 298, 
	299, 302, 305, 307, 309, 312, 315, 318, 
	324, 329, 330, 331, 332, 334, 336, 342, 
	343, 344, 345, 347, 349, 355, 356, 361, 
	370, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	393, 395, 398, 404, 405, 406, 407, 408, 
	409, 410, 411, 412, 413, 414, 415, 417, 
	420, 421, 422, 423, 424, 430, 431, 432, 
	433, 434, 435, 437, 438, 439, 440, 441, 
	447, 448, 449, 450, 451, 452, 453, 459, 
	460, 461, 462, 463, 465, 466, 467, 468, 
	469, 475, 476, 477, 478, 479, 480, 481, 
	487, 488, 489, 490, 493, 494, 495, 496, 
	497, 498, 503, 505, 509, 515, 518, 520, 
	523, 524, 525, 526, 527, 528, 529, 530, 
	531, 532, 533, 534, 536, 537, 538, 539, 
	540, 541, 546, 548, 552, 558, 561, 563, 
	566, 567, 568, 569, 570, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 580, 585, 
	587, 591, 597, 600, 602, 605, 606, 607, 
	608, 609, 610, 611, 612, 613, 614, 615, 
	616, 617, 618, 619, 624, 626, 630, 636, 
	639, 641, 644, 645, 646, 647, 648, 649, 
	650, 651, 652, 653, 654, 655, 656, 657, 
	658, 659, 660, 666, 667, 668, 669, 675, 
	685, 699, 704, 709, 714, 719, 724, 729
};

static const char _hext_trans_keys[] = {
	32, 60, 9, 13, 32, 47, 58, 62, 
	63, 9, 13, 65, 90, 97, 122, 32, 
	47, 62, 64, 9, 13, 65, 90, 97, 
	122, 62, 10, 105, 115, 116, 110, 110, 
	101, 114, 45, 104, 116, 109, 108, 36, 
	42, 61, 94, 126, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 34, 47, 123, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 47, 123, 125, 47, 123, 
	125, 47, 92, 47, 92, 99, 105, 125, 
	99, 105, 125, 99, 105, 125, 32, 47, 
	62, 9, 13, 92, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 61, 34, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 116, 114, 
	105, 112, 45, 116, 97, 103, 115, 36, 
	42, 61, 94, 126, 101, 120, 116, 36, 
	42, 61, 94, 126, 32, 33, 36, 42, 
	45, 47, 61, 62, 94, 95, 126, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	47, 62, 9, 13, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 34, 47, 123, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 47, 123, 125, 47, 123, 
	125, 47, 92, 47, 92, 99, 105, 125, 
	99, 105, 125, 99, 105, 125, 32, 47, 
	62, 63, 9, 13, 32, 47, 62, 9, 
	13, 92, 61, 34, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 61, 
	34, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 62, 65, 90, 97, 
	122, 45, 62, 95, 48, 57, 65, 90, 
	97, 122, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 32, 47, 58, 
	62, 9, 13, 41, 43, 45, 48, 57, 
	41, 48, 57, 118, 101, 110, 41, 100, 
	100, 41, 97, 115, 116, 45, 99, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 32, 
	47, 58, 62, 9, 13, 41, 43, 45, 
	48, 57, 41, 48, 57, 118, 101, 110, 
	41, 100, 100, 41, 102, 45, 116, 121, 
	112, 101, 40, 45, 101, 111, 48, 57, 
	48, 57, 41, 110, 48, 57, 32, 47, 
	58, 62, 9, 13, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	104, 105, 108, 100, 32, 47, 58, 62, 
	9, 13, 101, 120, 116, 32, 47, 58, 
	62, 9, 13, 32, 47, 58, 62, 9, 
	13, 65, 90, 97, 122, 32, 45, 47, 
	58, 62, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 35, 60, 9, 13, 
	32, 35, 60, 9, 13, 32, 35, 60, 
	9, 13, 32, 35, 60, 9, 13, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 32, 35, 60, 9, 13, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 4, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 2, 2, 4, 3, 1, 
	1, 1, 2, 2, 4, 1, 3, 2, 
	2, 4, 1, 2, 2, 6, 3, 6, 
	6, 1, 3, 3, 2, 2, 3, 3, 
	3, 3, 1, 1, 1, 2, 2, 4, 
	1, 1, 1, 2, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 5, 11, 3, 1, 
	1, 2, 2, 4, 3, 1, 1, 1, 
	2, 2, 4, 1, 3, 2, 2, 4, 
	1, 2, 2, 6, 3, 6, 6, 1, 
	3, 3, 2, 2, 3, 3, 3, 4, 
	3, 1, 1, 1, 2, 2, 4, 1, 
	1, 1, 2, 2, 4, 1, 1, 3, 
	8, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 4, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 4, 4, 
	6, 3, 3, 3, 3, 3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 1, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 2, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 3, 
	4, 1, 1, 1, 1, 1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 4, 13, 21, 23, 25, 29, 
	31, 33, 35, 37, 39, 41, 43, 45, 
	47, 53, 55, 57, 60, 63, 69, 74, 
	76, 78, 80, 83, 86, 92, 94, 98, 
	101, 104, 110, 112, 115, 118, 126, 131, 
	139, 147, 149, 153, 157, 160, 163, 167, 
	171, 175, 180, 182, 184, 186, 189, 192, 
	198, 200, 202, 204, 207, 210, 216, 218, 
	220, 222, 224, 226, 228, 230, 232, 234, 
	236, 242, 244, 246, 248, 254, 270, 275, 
	277, 279, 282, 285, 291, 296, 298, 300, 
	302, 305, 308, 314, 316, 320, 323, 326, 
	332, 334, 337, 340, 348, 353, 361, 369, 
	371, 375, 379, 382, 385, 389, 393, 397, 
	403, 408, 410, 412, 414, 417, 420, 426, 
	428, 430, 432, 435, 438, 444, 446, 450, 
	457, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 501, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	534, 536, 538, 540, 542, 548, 550, 552, 
	554, 556, 558, 561, 563, 565, 567, 569, 
	575, 577, 579, 581, 583, 585, 587, 593, 
	595, 597, 599, 601, 604, 606, 608, 610, 
	612, 618, 620, 622, 624, 626, 628, 630, 
	636, 638, 640, 642, 646, 648, 650, 652, 
	654, 656, 661, 663, 667, 673, 677, 679, 
	682, 684, 686, 688, 690, 692, 694, 696, 
	698, 700, 702, 704, 707, 709, 711, 713, 
	715, 717, 722, 724, 728, 734, 738, 740, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 767, 769, 771, 776, 
	778, 782, 788, 792, 794, 797, 799, 801, 
	803, 805, 807, 809, 811, 813, 815, 817, 
	819, 821, 823, 825, 830, 832, 836, 842, 
	846, 848, 851, 853, 855, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 889, 891, 893, 895, 901, 
	909, 920, 925, 930, 935, 940, 945, 950
};

static const short _hext_trans_targs[] = {
	1, 2, 1, 0, 3, 126, 128, 309, 
	303, 3, 304, 304, 0, 3, 4, 309, 
	6, 3, 77, 77, 0, 307, 0, 306, 
	5, 7, 63, 73, 0, 8, 0, 9, 
	0, 10, 0, 11, 0, 12, 0, 13, 
	0, 14, 0, 15, 0, 16, 0, 17, 
	24, 30, 51, 57, 0, 18, 0, 19, 
	0, 21, 23, 20, 21, 23, 20, 3, 
	22, 4, 309, 3, 0, 3, 4, 309, 
	3, 0, 23, 20, 25, 0, 26, 0, 
	28, 29, 27, 28, 29, 27, 3, 22, 
	4, 309, 3, 0, 29, 27, 31, 35, 
	42, 0, 33, 34, 32, 33, 34, 32, 
	3, 22, 4, 309, 3, 0, 34, 32, 
	37, 41, 36, 37, 41, 36, 3, 38, 
	4, 309, 39, 40, 3, 0, 3, 4, 
	309, 3, 0, 3, 38, 4, 309, 39, 
	40, 3, 0, 3, 38, 4, 309, 39, 
	40, 3, 0, 41, 36, 0, 0, 0, 
	43, 44, 0, 49, 43, 46, 50, 45, 
	46, 50, 45, 47, 48, 49, 0, 47, 
	48, 49, 0, 47, 48, 49, 0, 3, 
	4, 309, 3, 0, 50, 45, 52, 0, 
	53, 0, 55, 56, 54, 55, 56, 54, 
	3, 22, 4, 309, 3, 0, 56, 54, 
	58, 0, 59, 0, 61, 62, 60, 61, 
	62, 60, 3, 22, 4, 309, 3, 0, 
	62, 60, 64, 0, 65, 0, 66, 0, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 72, 0, 17, 24, 30, 51, 
	57, 0, 74, 0, 75, 0, 76, 0, 
	17, 24, 30, 51, 57, 0, 3, 78, 
	79, 86, 77, 4, 92, 309, 114, 77, 
	120, 3, 77, 77, 77, 0, 3, 4, 
	309, 3, 0, 80, 0, 81, 0, 83, 
	85, 82, 83, 85, 82, 3, 84, 4, 
	309, 3, 0, 3, 4, 309, 3, 0, 
	85, 82, 87, 0, 88, 0, 90, 91, 
	89, 90, 91, 89, 3, 84, 4, 309, 
	3, 0, 91, 89, 93, 97, 104, 0, 
	95, 96, 94, 95, 96, 94, 3, 84, 
	4, 309, 3, 0, 96, 94, 99, 103, 
	98, 99, 103, 98, 3, 100, 4, 309, 
	101, 102, 3, 0, 3, 4, 309, 3, 
	0, 3, 100, 4, 309, 101, 102, 3, 
	0, 3, 100, 4, 309, 101, 102, 3, 
	0, 103, 98, 0, 0, 0, 105, 106, 
	0, 111, 105, 108, 113, 107, 108, 113, 
	107, 109, 110, 111, 0, 109, 110, 111, 
	0, 109, 110, 111, 0, 3, 4, 309, 
	112, 3, 0, 3, 4, 309, 3, 0, 
	113, 107, 115, 0, 116, 0, 118, 119, 
	117, 118, 119, 117, 3, 84, 4, 309, 
	3, 0, 119, 117, 121, 0, 122, 0, 
	124, 125, 123, 124, 125, 123, 3, 84, 
	4, 309, 3, 0, 125, 123, 310, 127, 
	127, 0, 127, 311, 127, 127, 127, 127, 
	0, 129, 147, 160, 165, 183, 200, 289, 
	299, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 136, 0, 
	137, 0, 138, 0, 139, 0, 140, 0, 
	141, 0, 142, 0, 143, 0, 144, 0, 
	145, 0, 146, 145, 0, 3, 4, 128, 
	309, 3, 0, 148, 0, 149, 0, 150, 
	0, 151, 0, 152, 0, 153, 0, 154, 
	0, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 146, 159, 0, 161, 0, 
	162, 0, 163, 0, 164, 0, 3, 4, 
	128, 309, 3, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 176, 
	0, 172, 0, 173, 0, 174, 0, 175, 
	0, 3, 4, 128, 309, 3, 0, 177, 
	0, 178, 0, 179, 0, 180, 0, 181, 
	0, 182, 0, 3, 4, 128, 309, 3, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 193, 0, 189, 0, 190, 0, 
	191, 0, 192, 0, 3, 4, 128, 309, 
	3, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 198, 0, 199, 0, 3, 4, 
	128, 309, 3, 0, 201, 0, 202, 0, 
	203, 0, 204, 223, 268, 0, 205, 0, 
	206, 0, 207, 0, 208, 0, 209, 0, 
	210, 216, 220, 211, 0, 211, 0, 212, 
	213, 211, 0, 3, 4, 128, 309, 3, 
	0, 212, 214, 214, 0, 215, 0, 212, 
	215, 0, 217, 0, 218, 0, 219, 0, 
	212, 0, 221, 0, 222, 0, 212, 0, 
	224, 0, 225, 0, 226, 0, 227, 0, 
	228, 247, 0, 229, 0, 230, 0, 231, 
	0, 232, 0, 233, 0, 234, 240, 244, 
	235, 0, 235, 0, 236, 237, 235, 0, 
	3, 4, 128, 309, 3, 0, 236, 238, 
	238, 0, 239, 0, 236, 239, 0, 241, 
	0, 242, 0, 243, 0, 236, 0, 245, 
	0, 246, 0, 236, 0, 248, 0, 249, 
	0, 250, 0, 251, 0, 252, 0, 253, 
	0, 254, 0, 255, 261, 265, 256, 0, 
	256, 0, 257, 258, 256, 0, 3, 4, 
	128, 309, 3, 0, 257, 259, 259, 0, 
	260, 0, 257, 260, 0, 262, 0, 263, 
	0, 264, 0, 257, 0, 266, 0, 267, 
	0, 257, 0, 269, 0, 270, 0, 271, 
	0, 272, 0, 273, 0, 274, 0, 275, 
	0, 276, 282, 286, 277, 0, 277, 0, 
	278, 279, 277, 0, 3, 4, 128, 309, 
	3, 0, 278, 280, 280, 0, 281, 0, 
	278, 281, 0, 283, 0, 284, 0, 285, 
	0, 278, 0, 287, 0, 288, 0, 278, 
	0, 290, 0, 291, 0, 292, 0, 293, 
	0, 294, 0, 295, 0, 296, 0, 297, 
	0, 298, 0, 3, 4, 128, 309, 3, 
	0, 300, 0, 301, 0, 302, 0, 3, 
	4, 128, 309, 3, 0, 3, 4, 128, 
	309, 3, 304, 304, 0, 3, 304, 4, 
	128, 309, 304, 3, 304, 304, 304, 0, 
	305, 5, 2, 1, 0, 305, 5, 2, 
	1, 0, 308, 5, 2, 308, 0, 308, 
	5, 2, 308, 0, 308, 5, 2, 308, 
	0, 308, 5, 2, 308, 0, 308, 5, 
	2, 308, 0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 85, 85, 1, 0, 0, 0, 
	0, 0, 65, 65, 1, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 57, 
	57, 57, 57, 57, 1, 0, 1, 0, 
	1, 118, 69, 69, 71, 0, 0, 206, 
	81, 206, 206, 206, 1, 158, 158, 158, 
	158, 1, 0, 0, 0, 1, 0, 1, 
	118, 69, 69, 71, 0, 0, 190, 77, 
	190, 190, 190, 1, 0, 0, 0, 0, 
	0, 1, 118, 69, 69, 71, 0, 0, 
	174, 73, 174, 174, 174, 1, 0, 0, 
	103, 45, 45, 47, 0, 0, 226, 112, 
	226, 226, 0, 0, 226, 1, 154, 154, 
	154, 154, 1, 258, 146, 258, 258, 51, 
	51, 258, 1, 246, 142, 246, 246, 49, 
	49, 246, 1, 0, 0, 1, 1, 1, 
	61, 63, 1, 63, 0, 103, 45, 45, 
	47, 0, 0, 0, 0, 53, 1, 51, 
	51, 109, 1, 49, 49, 106, 1, 121, 
	121, 121, 121, 1, 0, 0, 0, 1, 
	0, 1, 118, 69, 69, 71, 0, 0, 
	182, 75, 182, 182, 182, 1, 0, 0, 
	0, 1, 0, 1, 118, 69, 69, 71, 
	0, 0, 198, 79, 198, 198, 198, 1, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 59, 59, 59, 59, 
	59, 1, 0, 1, 0, 1, 0, 1, 
	55, 55, 55, 55, 55, 1, 236, 115, 
	67, 67, 0, 236, 67, 236, 67, 0, 
	67, 236, 0, 0, 0, 1, 170, 170, 
	170, 170, 1, 0, 1, 0, 1, 118, 
	69, 69, 71, 0, 0, 210, 81, 210, 
	210, 210, 1, 166, 166, 166, 166, 1, 
	0, 0, 0, 1, 0, 1, 118, 69, 
	69, 71, 0, 0, 194, 77, 194, 194, 
	194, 1, 0, 0, 0, 0, 0, 1, 
	118, 69, 69, 71, 0, 0, 178, 73, 
	178, 178, 178, 1, 0, 0, 103, 45, 
	45, 47, 0, 0, 231, 112, 231, 231, 
	0, 0, 231, 1, 162, 162, 162, 162, 
	1, 264, 146, 264, 264, 51, 51, 264, 
	1, 252, 142, 252, 252, 49, 49, 252, 
	1, 0, 0, 1, 1, 1, 61, 63, 
	1, 63, 0, 103, 45, 45, 47, 0, 
	0, 0, 0, 53, 1, 51, 51, 109, 
	1, 49, 49, 106, 1, 124, 124, 124, 
	0, 124, 1, 150, 150, 150, 150, 1, 
	0, 0, 0, 1, 0, 1, 118, 69, 
	69, 71, 0, 0, 186, 75, 186, 186, 
	186, 1, 0, 0, 0, 1, 0, 1, 
	118, 69, 69, 71, 0, 0, 202, 79, 
	202, 202, 202, 1, 0, 0, 136, 89, 
	89, 1, 0, 91, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	21, 1, 23, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 17, 1, 19, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 15, 15, 
	15, 15, 15, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 31, 31, 31, 31, 31, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 33, 33, 33, 33, 33, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 35, 35, 35, 35, 
	35, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 37, 37, 
	37, 37, 37, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	7, 0, 0, 7, 1, 0, 1, 9, 
	9, 0, 1, 25, 25, 25, 25, 25, 
	1, 11, 100, 100, 1, 0, 1, 13, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	3, 1, 0, 1, 0, 1, 5, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 7, 0, 0, 
	7, 1, 0, 1, 9, 9, 0, 1, 
	27, 27, 27, 27, 27, 1, 11, 100, 
	100, 1, 0, 1, 13, 0, 1, 0, 
	1, 0, 1, 0, 1, 3, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 7, 0, 0, 7, 1, 
	0, 1, 9, 9, 0, 1, 39, 39, 
	39, 39, 39, 1, 11, 100, 100, 1, 
	0, 1, 13, 0, 1, 0, 1, 0, 
	1, 0, 1, 3, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 7, 0, 0, 7, 1, 0, 1, 
	9, 9, 0, 1, 29, 29, 29, 29, 
	29, 1, 11, 100, 100, 1, 0, 1, 
	13, 0, 1, 0, 1, 0, 1, 0, 
	1, 3, 1, 0, 1, 0, 1, 5, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 41, 41, 41, 41, 41, 
	1, 0, 1, 0, 1, 0, 1, 43, 
	43, 43, 43, 43, 1, 83, 83, 83, 
	83, 83, 127, 127, 1, 87, 0, 87, 
	87, 87, 0, 87, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 130, 130, 130, 130, 1, 0, 
	0, 0, 0, 1, 133, 133, 133, 133, 
	1, 214, 214, 214, 214, 1, 93, 93, 
	93, 93, 1, 0
};

static const short _hext_eof_actions[] = {
	0, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 95, 218, 95, 222, 241, 139
};

static const int hext_start = 306;
static const int hext_first_final = 306;
static const int hext_error = 0;

static const int hext_en_main = 306;


#line 83 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message marking an invalid or missing
  /// closing tag.
  void throw_expected_closing_tag(
    const std::string& input,
    boost::optional<GumboTag> expected_closing_tag
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

