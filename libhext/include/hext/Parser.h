// This file was generated from Parser.h.rl.

/* #line 1 "Parser.h.rl" */
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/Builtins.h"
#include "hext/MakeUnique.h"
#include "hext/pattern/AttributeCapture.h"
#include "hext/pattern/AttributeCountMatch.h"
#include "hext/pattern/AttributeMatch.h"
#include "hext/pattern/BuiltinCapture.h"
#include "hext/pattern/BuiltinMatch.h"
#include "hext/pattern/CapturePattern.h"
#include "hext/pattern/ChildCountMatch.h"
#include "hext/pattern/MatchPattern.h"
#include "hext/pattern/NegateMatch.h"
#include "hext/pattern/NthChildMatch.h"
#include "hext/pattern/TextNodeMatch.h"
#include "hext/PatternValues.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/StringUtil.h"
#include "hext/test/BeginsWith.h"
#include "hext/test/Contains.h"
#include "hext/test/ContainsWord.h"
#include "hext/test/EndsWith.h"
#include "hext/test/Equals.h"
#include "hext/test/Negate.h"
#include "hext/test/NotNull.h"
#include "hext/test/Regex.h"
#include "hext/test/ValueTest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  assert(p != nullptr);         \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
/* #line 85 "Parser.h.tmp" */
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 6, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 30, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 37, 1, 
	38, 1, 39, 1, 40, 1, 41, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	55, 1, 56, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 64, 1, 65, 1, 
	66, 2, 4, 5, 2, 7, 23, 2, 
	7, 60, 2, 12, 23, 2, 12, 60, 
	2, 13, 23, 2, 13, 60, 2, 14, 
	23, 2, 14, 60, 2, 15, 23, 2, 
	15, 60, 2, 16, 23, 2, 16, 60, 
	2, 17, 23, 2, 17, 60, 2, 18, 
	23, 2, 18, 60, 2, 19, 23, 2, 
	19, 60, 2, 20, 23, 2, 20, 60, 
	2, 21, 23, 2, 21, 60, 2, 24, 
	25, 2, 26, 28, 2, 27, 28, 2, 
	28, 29, 2, 38, 52, 2, 39, 40, 
	2, 46, 54, 2, 49, 54, 2, 55, 
	57, 2, 61, 63, 2, 62, 63, 3, 
	26, 28, 29, 3, 27, 28, 29, 3, 
	35, 49, 54, 3, 36, 47, 54, 3, 
	36, 48, 54, 3, 36, 50, 54, 3, 
	36, 51, 54, 3, 36, 53, 54, 3, 
	41, 48, 54, 3, 41, 51, 54, 3, 
	42, 48, 54, 3, 42, 51, 54, 3, 
	43, 48, 54, 3, 43, 51, 54, 3, 
	44, 48, 54, 3, 44, 51, 54, 3, 
	45, 48, 54, 3, 45, 51, 54, 4, 
	28, 29, 47, 54, 4, 28, 29, 50, 
	54, 4, 38, 52, 53, 54, 5, 26, 
	28, 29, 47, 54, 5, 26, 28, 29, 
	50, 54, 5, 27, 28, 29, 47, 54, 
	5, 27, 28, 29, 50, 54
};

static const short _hext_key_offsets[] = {
	0, 0, 1, 8, 14, 24, 25, 28, 
	29, 30, 31, 32, 33, 34, 35, 36, 
	37, 42, 43, 44, 46, 48, 54, 59, 
	60, 61, 62, 64, 66, 72, 73, 76, 
	78, 80, 86, 87, 89, 91, 99, 104, 
	112, 120, 121, 124, 127, 129, 131, 134, 
	137, 140, 145, 146, 147, 148, 150, 152, 
	158, 159, 160, 161, 163, 165, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 186, 187, 188, 189, 194, 213, 218, 
	219, 220, 222, 224, 230, 235, 236, 237, 
	238, 240, 242, 248, 249, 252, 254, 256, 
	262, 263, 265, 267, 275, 280, 288, 296, 
	297, 300, 303, 305, 307, 310, 313, 316, 
	322, 327, 328, 329, 330, 332, 334, 340, 
	341, 342, 343, 345, 347, 353, 354, 362, 
	363, 364, 365, 366, 367, 368, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 379, 
	382, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 399, 401, 404, 405, 
	406, 407, 408, 414, 415, 416, 417, 418, 
	419, 421, 422, 423, 424, 425, 431, 432, 
	433, 434, 435, 436, 437, 443, 444, 445, 
	446, 447, 449, 450, 451, 452, 453, 459, 
	460, 461, 462, 463, 464, 465, 471, 473, 
	474, 475, 476, 484, 485, 486, 487, 488, 
	489, 490, 491, 492, 493, 494, 495, 496, 
	497, 498, 499, 501, 504, 506, 512, 513, 
	514, 515, 516, 517, 518, 519, 520, 521, 
	522, 523, 525, 528, 529, 530, 531, 532, 
	534, 535, 536, 537, 538, 539, 541, 542, 
	543, 544, 545, 547, 548, 549, 550, 551, 
	552, 553, 555, 556, 557, 558, 559, 561, 
	562, 563, 564, 565, 567, 568, 569, 570, 
	571, 572, 573, 575, 576, 577, 578, 581, 
	582, 583, 584, 585, 586, 591, 593, 597, 
	599, 602, 604, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 620, 
	621, 622, 623, 624, 625, 630, 632, 636, 
	638, 641, 643, 646, 647, 648, 649, 650, 
	651, 652, 653, 654, 655, 656, 657, 658, 
	659, 660, 665, 667, 671, 673, 676, 678, 
	681, 682, 683, 684, 685, 686, 687, 688, 
	689, 690, 691, 692, 693, 694, 695, 700, 
	702, 706, 708, 711, 713, 716, 717, 718, 
	719, 720, 721, 722, 723, 724, 725, 726, 
	727, 728, 729, 730, 731, 732, 734, 735, 
	736, 737, 739, 740, 741, 744, 745, 746, 
	747, 748, 749, 754, 756, 760, 766, 769, 
	771, 774, 775, 776, 777, 778, 779, 780, 
	781, 782, 783, 784, 785, 787, 788, 789, 
	790, 791, 792, 797, 799, 803, 809, 812, 
	814, 817, 818, 819, 820, 821, 822, 823, 
	824, 825, 826, 827, 828, 829, 830, 831, 
	836, 838, 842, 848, 851, 853, 856, 857, 
	858, 859, 860, 861, 862, 863, 864, 865, 
	866, 867, 868, 869, 870, 875, 877, 881, 
	887, 890, 892, 895, 896, 897, 898, 899, 
	900, 901, 902, 903, 904, 905, 906, 907, 
	908, 909, 910, 911, 917, 918, 919, 920, 
	926, 931, 932, 941, 946, 960, 965, 970
};

static const char _hext_trans_keys[] = {
	10, 42, 47, 63, 65, 90, 97, 122, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	62, 64, 9, 13, 65, 90, 97, 122, 
	62, 105, 115, 116, 110, 110, 101, 114, 
	45, 104, 116, 109, 108, 36, 42, 61, 
	94, 126, 61, 34, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 34, 47, 123, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 47, 
	92, 47, 92, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 47, 62, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	92, 47, 123, 125, 47, 123, 125, 47, 
	92, 47, 92, 99, 105, 125, 99, 105, 
	125, 99, 105, 125, 32, 47, 62, 9, 
	13, 92, 61, 34, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 61, 
	34, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 116, 114, 105, 112, 
	45, 116, 97, 103, 115, 36, 42, 61, 
	94, 126, 101, 120, 116, 36, 42, 61, 
	94, 126, 32, 33, 36, 42, 45, 47, 
	61, 62, 94, 95, 126, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 47, 62, 
	9, 13, 61, 34, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 32, 47, 
	62, 9, 13, 92, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 34, 47, 123, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 47, 
	92, 47, 92, 32, 33, 47, 62, 99, 
	105, 9, 13, 32, 47, 62, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	32, 33, 47, 62, 99, 105, 9, 13, 
	92, 47, 123, 125, 47, 123, 125, 47, 
	92, 47, 92, 99, 105, 125, 99, 105, 
	125, 99, 105, 125, 32, 47, 62, 63, 
	9, 13, 32, 47, 62, 9, 13, 92, 
	61, 34, 34, 92, 34, 92, 32, 33, 
	47, 62, 9, 13, 92, 61, 34, 34, 
	92, 34, 92, 32, 33, 47, 62, 9, 
	13, 92, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 111, 
	116, 116, 40, 58, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	41, 58, 32, 47, 58, 62, 9, 13, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	109, 112, 116, 121, 41, 58, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 97, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 41, 
	58, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	104, 105, 108, 100, 41, 58, 101, 120, 
	116, 41, 58, 104, 45, 99, 108, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 32, 47, 58, 62, 9, 13, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 110, 108, 
	121, 45, 99, 104, 105, 108, 100, 32, 
	47, 58, 62, 9, 13, 101, 120, 116, 
	32, 47, 58, 62, 9, 13, 42, 65, 
	90, 97, 122, 62, 45, 62, 95, 48, 
	57, 65, 90, 97, 122, 42, 65, 90, 
	97, 122, 32, 45, 47, 58, 62, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 35, 60, 9, 13, 32, 35, 60, 
	9, 13, 32, 35, 60, 9, 13, 0
};

static const char _hext_single_lengths[] = {
	0, 1, 3, 4, 4, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 2, 2, 4, 3, 1, 
	1, 1, 2, 2, 4, 1, 3, 2, 
	2, 4, 1, 2, 2, 6, 3, 6, 
	6, 1, 3, 3, 2, 2, 3, 3, 
	3, 3, 1, 1, 1, 2, 2, 4, 
	1, 1, 1, 2, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 5, 11, 3, 1, 
	1, 2, 2, 4, 3, 1, 1, 1, 
	2, 2, 4, 1, 3, 2, 2, 4, 
	1, 2, 2, 6, 3, 6, 6, 1, 
	3, 3, 2, 2, 3, 3, 3, 4, 
	3, 1, 1, 1, 2, 2, 4, 1, 
	1, 1, 2, 2, 4, 1, 8, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 4, 2, 1, 
	1, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 2, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 2, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 2, 1, 1, 3, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 3, 0, 2, 4, 3, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	0, 2, 4, 3, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 1, 1, 1, 4, 
	1, 1, 3, 1, 6, 3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 0, 2, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	2, 0, 3, 2, 4, 1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 2, 8, 14, 22, 24, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 52, 54, 56, 59, 62, 68, 73, 
	75, 77, 79, 82, 85, 91, 93, 97, 
	100, 103, 109, 111, 114, 117, 125, 130, 
	138, 146, 148, 152, 156, 159, 162, 166, 
	170, 174, 179, 181, 183, 185, 188, 191, 
	197, 199, 201, 203, 206, 209, 215, 217, 
	219, 221, 223, 225, 227, 229, 231, 233, 
	235, 241, 243, 245, 247, 253, 269, 274, 
	276, 278, 281, 284, 290, 295, 297, 299, 
	301, 304, 307, 313, 315, 319, 322, 325, 
	331, 333, 336, 339, 347, 352, 360, 368, 
	370, 374, 378, 381, 384, 388, 392, 396, 
	402, 407, 409, 411, 413, 416, 419, 425, 
	427, 429, 431, 434, 437, 443, 445, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	489, 495, 497, 499, 501, 503, 505, 507, 
	509, 511, 513, 515, 517, 519, 522, 524, 
	526, 528, 530, 536, 538, 540, 542, 544, 
	546, 549, 551, 553, 555, 557, 563, 565, 
	567, 569, 571, 573, 575, 581, 583, 585, 
	587, 589, 592, 594, 596, 598, 600, 606, 
	608, 610, 612, 614, 616, 618, 624, 627, 
	629, 631, 633, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 677, 680, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 713, 715, 717, 719, 721, 
	724, 726, 728, 730, 732, 734, 737, 739, 
	741, 743, 745, 748, 750, 752, 754, 756, 
	758, 760, 763, 765, 767, 769, 771, 774, 
	776, 778, 780, 782, 785, 787, 789, 791, 
	793, 795, 797, 800, 802, 804, 806, 810, 
	812, 814, 816, 818, 820, 825, 827, 831, 
	834, 838, 840, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 868, 
	870, 872, 874, 876, 878, 883, 885, 889, 
	892, 896, 898, 901, 903, 905, 907, 909, 
	911, 913, 915, 917, 919, 921, 923, 925, 
	927, 929, 934, 936, 940, 943, 947, 949, 
	952, 954, 956, 958, 960, 962, 964, 966, 
	968, 970, 972, 974, 976, 978, 980, 985, 
	987, 991, 994, 998, 1000, 1003, 1005, 1007, 
	1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 
	1025, 1027, 1029, 1031, 1033, 1035, 1038, 1040, 
	1042, 1044, 1047, 1049, 1051, 1055, 1057, 1059, 
	1061, 1063, 1065, 1070, 1072, 1076, 1082, 1086, 
	1088, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 
	1105, 1107, 1109, 1111, 1113, 1116, 1118, 1120, 
	1122, 1124, 1126, 1131, 1133, 1137, 1143, 1147, 
	1149, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 
	1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 
	1185, 1187, 1191, 1197, 1201, 1203, 1206, 1208, 
	1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 
	1226, 1228, 1230, 1232, 1234, 1239, 1241, 1245, 
	1251, 1255, 1257, 1260, 1262, 1264, 1266, 1268, 
	1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 
	1286, 1288, 1290, 1292, 1298, 1300, 1302, 1304, 
	1310, 1314, 1316, 1323, 1327, 1338, 1343, 1348
};

static const short _hext_trans_targs[] = {
	485, 1, 3, 480, 483, 484, 484, 0, 
	4, 5, 126, 487, 4, 0, 4, 5, 
	487, 6, 4, 77, 77, 0, 486, 0, 
	7, 63, 73, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 24, 
	30, 51, 57, 0, 18, 0, 19, 0, 
	21, 23, 20, 21, 23, 20, 4, 22, 
	5, 487, 4, 0, 4, 5, 487, 4, 
	0, 23, 20, 25, 0, 26, 0, 28, 
	29, 27, 28, 29, 27, 4, 22, 5, 
	487, 4, 0, 29, 27, 31, 35, 42, 
	0, 33, 34, 32, 33, 34, 32, 4, 
	22, 5, 487, 4, 0, 34, 32, 37, 
	41, 36, 37, 41, 36, 4, 38, 5, 
	487, 39, 40, 4, 0, 4, 5, 487, 
	4, 0, 4, 38, 5, 487, 39, 40, 
	4, 0, 4, 38, 5, 487, 39, 40, 
	4, 0, 41, 36, 0, 0, 0, 43, 
	44, 0, 49, 43, 46, 50, 45, 46, 
	50, 45, 47, 48, 49, 0, 47, 48, 
	49, 0, 47, 48, 49, 0, 4, 5, 
	487, 4, 0, 50, 45, 52, 0, 53, 
	0, 55, 56, 54, 55, 56, 54, 4, 
	22, 5, 487, 4, 0, 56, 54, 58, 
	0, 59, 0, 61, 62, 60, 61, 62, 
	60, 4, 22, 5, 487, 4, 0, 62, 
	60, 64, 0, 65, 0, 66, 0, 67, 
	0, 68, 0, 69, 0, 70, 0, 71, 
	0, 72, 0, 17, 24, 30, 51, 57, 
	0, 74, 0, 75, 0, 76, 0, 17, 
	24, 30, 51, 57, 0, 4, 78, 79, 
	86, 77, 5, 92, 487, 114, 77, 120, 
	4, 77, 77, 77, 0, 4, 5, 487, 
	4, 0, 80, 0, 81, 0, 83, 85, 
	82, 83, 85, 82, 4, 84, 5, 487, 
	4, 0, 4, 5, 487, 4, 0, 85, 
	82, 87, 0, 88, 0, 90, 91, 89, 
	90, 91, 89, 4, 84, 5, 487, 4, 
	0, 91, 89, 93, 97, 104, 0, 95, 
	96, 94, 95, 96, 94, 4, 84, 5, 
	487, 4, 0, 96, 94, 99, 103, 98, 
	99, 103, 98, 4, 100, 5, 487, 101, 
	102, 4, 0, 4, 5, 487, 4, 0, 
	4, 100, 5, 487, 101, 102, 4, 0, 
	4, 100, 5, 487, 101, 102, 4, 0, 
	103, 98, 0, 0, 0, 105, 106, 0, 
	111, 105, 108, 113, 107, 108, 113, 107, 
	109, 110, 111, 0, 109, 110, 111, 0, 
	109, 110, 111, 0, 4, 5, 487, 112, 
	4, 0, 4, 5, 487, 4, 0, 113, 
	107, 115, 0, 116, 0, 118, 119, 117, 
	118, 119, 117, 4, 84, 5, 487, 4, 
	0, 119, 117, 121, 0, 122, 0, 124, 
	125, 123, 124, 125, 123, 4, 84, 5, 
	487, 4, 0, 125, 123, 127, 145, 158, 
	163, 181, 198, 466, 476, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 136, 0, 
	137, 0, 138, 0, 139, 0, 140, 0, 
	141, 0, 142, 0, 143, 0, 144, 143, 
	0, 4, 5, 126, 487, 4, 0, 146, 
	0, 147, 0, 148, 0, 149, 0, 150, 
	0, 151, 0, 152, 0, 153, 0, 154, 
	0, 155, 0, 156, 0, 157, 0, 144, 
	157, 0, 159, 0, 160, 0, 161, 0, 
	162, 0, 4, 5, 126, 487, 4, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 169, 174, 0, 170, 0, 171, 
	0, 172, 0, 173, 0, 4, 5, 126, 
	487, 4, 0, 175, 0, 176, 0, 177, 
	0, 178, 0, 179, 0, 180, 0, 4, 
	5, 126, 487, 4, 0, 182, 0, 183, 
	0, 184, 0, 185, 0, 186, 191, 0, 
	187, 0, 188, 0, 189, 0, 190, 0, 
	4, 5, 126, 487, 4, 0, 192, 0, 
	193, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 4, 5, 126, 487, 4, 0, 
	199, 378, 0, 200, 0, 201, 0, 202, 
	0, 203, 222, 235, 240, 258, 275, 364, 
	374, 0, 204, 0, 205, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	219, 0, 220, 219, 0, 221, 202, 0, 
	4, 5, 126, 487, 4, 0, 223, 0, 
	224, 0, 225, 0, 226, 0, 227, 0, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	232, 0, 233, 0, 234, 0, 220, 234, 
	0, 236, 0, 237, 0, 238, 0, 239, 
	0, 221, 202, 0, 241, 0, 242, 0, 
	243, 0, 244, 0, 245, 0, 246, 251, 
	0, 247, 0, 248, 0, 249, 0, 250, 
	0, 221, 202, 0, 252, 0, 253, 0, 
	254, 0, 255, 0, 256, 0, 257, 0, 
	221, 202, 0, 259, 0, 260, 0, 261, 
	0, 262, 0, 263, 268, 0, 264, 0, 
	265, 0, 266, 0, 267, 0, 221, 202, 
	0, 269, 0, 270, 0, 271, 0, 272, 
	0, 273, 0, 274, 0, 221, 202, 0, 
	276, 0, 277, 0, 278, 0, 279, 298, 
	343, 0, 280, 0, 281, 0, 282, 0, 
	283, 0, 284, 0, 285, 291, 295, 286, 
	0, 286, 0, 287, 288, 286, 0, 221, 
	202, 0, 287, 289, 289, 0, 290, 0, 
	287, 290, 0, 292, 0, 293, 0, 294, 
	0, 287, 0, 296, 0, 297, 0, 287, 
	0, 299, 0, 300, 0, 301, 0, 302, 
	0, 303, 322, 0, 304, 0, 305, 0, 
	306, 0, 307, 0, 308, 0, 309, 315, 
	319, 310, 0, 310, 0, 311, 312, 310, 
	0, 221, 202, 0, 311, 313, 313, 0, 
	314, 0, 311, 314, 0, 316, 0, 317, 
	0, 318, 0, 311, 0, 320, 0, 321, 
	0, 311, 0, 323, 0, 324, 0, 325, 
	0, 326, 0, 327, 0, 328, 0, 329, 
	0, 330, 336, 340, 331, 0, 331, 0, 
	332, 333, 331, 0, 221, 202, 0, 332, 
	334, 334, 0, 335, 0, 332, 335, 0, 
	337, 0, 338, 0, 339, 0, 332, 0, 
	341, 0, 342, 0, 332, 0, 344, 0, 
	345, 0, 346, 0, 347, 0, 348, 0, 
	349, 0, 350, 0, 351, 357, 361, 352, 
	0, 352, 0, 353, 354, 352, 0, 221, 
	202, 0, 353, 355, 355, 0, 356, 0, 
	353, 356, 0, 358, 0, 359, 0, 360, 
	0, 353, 0, 362, 0, 363, 0, 353, 
	0, 365, 0, 366, 0, 367, 0, 368, 
	0, 369, 0, 370, 0, 371, 0, 372, 
	0, 373, 0, 221, 202, 0, 375, 0, 
	376, 0, 377, 0, 221, 202, 0, 379, 
	0, 380, 0, 381, 400, 445, 0, 382, 
	0, 383, 0, 384, 0, 385, 0, 386, 
	0, 387, 393, 397, 388, 0, 388, 0, 
	389, 390, 388, 0, 4, 5, 126, 487, 
	4, 0, 389, 391, 391, 0, 392, 0, 
	389, 392, 0, 394, 0, 395, 0, 396, 
	0, 389, 0, 398, 0, 399, 0, 389, 
	0, 401, 0, 402, 0, 403, 0, 404, 
	0, 405, 424, 0, 406, 0, 407, 0, 
	408, 0, 409, 0, 410, 0, 411, 417, 
	421, 412, 0, 412, 0, 413, 414, 412, 
	0, 4, 5, 126, 487, 4, 0, 413, 
	415, 415, 0, 416, 0, 413, 416, 0, 
	418, 0, 419, 0, 420, 0, 413, 0, 
	422, 0, 423, 0, 413, 0, 425, 0, 
	426, 0, 427, 0, 428, 0, 429, 0, 
	430, 0, 431, 0, 432, 438, 442, 433, 
	0, 433, 0, 434, 435, 433, 0, 4, 
	5, 126, 487, 4, 0, 434, 436, 436, 
	0, 437, 0, 434, 437, 0, 439, 0, 
	440, 0, 441, 0, 434, 0, 443, 0, 
	444, 0, 434, 0, 446, 0, 447, 0, 
	448, 0, 449, 0, 450, 0, 451, 0, 
	452, 0, 453, 459, 463, 454, 0, 454, 
	0, 455, 456, 454, 0, 4, 5, 126, 
	487, 4, 0, 455, 457, 457, 0, 458, 
	0, 455, 458, 0, 460, 0, 461, 0, 
	462, 0, 455, 0, 464, 0, 465, 0, 
	455, 0, 467, 0, 468, 0, 469, 0, 
	470, 0, 471, 0, 472, 0, 473, 0, 
	474, 0, 475, 0, 4, 5, 126, 487, 
	4, 0, 477, 0, 478, 0, 479, 0, 
	4, 5, 126, 487, 4, 0, 481, 482, 
	482, 0, 485, 0, 482, 485, 482, 482, 
	482, 482, 0, 3, 484, 484, 0, 4, 
	484, 5, 126, 487, 484, 4, 484, 484, 
	484, 0, 485, 1, 2, 485, 0, 485, 
	1, 2, 485, 0, 485, 1, 2, 485, 
	0, 0
};

static const short _hext_trans_actions[] = {
	0, 0, 0, 0, 0, 67, 67, 79, 
	65, 65, 65, 65, 65, 79, 0, 0, 
	0, 0, 0, 45, 45, 79, 0, 79, 
	0, 0, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 37, 37, 
	37, 37, 37, 79, 0, 79, 0, 79, 
	165, 49, 49, 51, 0, 0, 247, 61, 
	247, 247, 247, 79, 199, 199, 199, 199, 
	79, 0, 0, 0, 79, 0, 79, 165, 
	49, 49, 51, 0, 0, 231, 57, 231, 
	231, 231, 79, 0, 0, 0, 0, 0, 
	79, 165, 49, 49, 51, 0, 0, 215, 
	53, 215, 215, 215, 79, 0, 0, 150, 
	25, 25, 27, 0, 0, 255, 159, 255, 
	255, 0, 0, 255, 79, 195, 195, 195, 
	195, 79, 282, 187, 282, 282, 31, 31, 
	282, 79, 270, 183, 270, 270, 29, 29, 
	270, 79, 0, 0, 79, 79, 79, 41, 
	43, 79, 43, 0, 150, 25, 25, 27, 
	0, 0, 0, 0, 33, 79, 31, 31, 
	156, 79, 29, 29, 153, 79, 168, 168, 
	168, 168, 79, 0, 0, 0, 79, 0, 
	79, 165, 49, 49, 51, 0, 0, 223, 
	55, 223, 223, 223, 79, 0, 0, 0, 
	79, 0, 79, 165, 49, 49, 51, 0, 
	0, 239, 59, 239, 239, 239, 79, 0, 
	0, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 39, 39, 39, 39, 39, 
	79, 0, 79, 0, 79, 0, 79, 35, 
	35, 35, 35, 35, 79, 265, 162, 47, 
	47, 0, 265, 47, 265, 47, 0, 47, 
	265, 0, 0, 0, 79, 211, 211, 211, 
	211, 79, 0, 79, 0, 79, 165, 49, 
	49, 51, 0, 0, 251, 61, 251, 251, 
	251, 79, 207, 207, 207, 207, 79, 0, 
	0, 0, 79, 0, 79, 165, 49, 49, 
	51, 0, 0, 235, 57, 235, 235, 235, 
	79, 0, 0, 0, 0, 0, 79, 165, 
	49, 49, 51, 0, 0, 219, 53, 219, 
	219, 219, 79, 0, 0, 150, 25, 25, 
	27, 0, 0, 260, 159, 260, 260, 0, 
	0, 260, 79, 203, 203, 203, 203, 79, 
	288, 187, 288, 288, 31, 31, 288, 79, 
	276, 183, 276, 276, 29, 29, 276, 79, 
	0, 0, 79, 79, 79, 41, 43, 79, 
	43, 0, 150, 25, 25, 27, 0, 0, 
	0, 0, 33, 79, 31, 31, 156, 79, 
	29, 29, 153, 79, 171, 171, 171, 0, 
	171, 79, 191, 191, 191, 191, 79, 0, 
	0, 0, 79, 0, 79, 165, 49, 49, 
	51, 0, 0, 227, 55, 227, 227, 227, 
	79, 0, 0, 0, 79, 0, 79, 165, 
	49, 49, 51, 0, 0, 243, 59, 243, 
	243, 243, 79, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 17, 79, 19, 0, 
	79, 73, 73, 73, 73, 73, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 13, 79, 15, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 87, 87, 87, 87, 87, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 111, 111, 111, 
	111, 111, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 117, 
	117, 117, 117, 117, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	123, 123, 123, 123, 123, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 129, 129, 129, 129, 129, 79, 
	0, 0, 79, 0, 79, 0, 79, 21, 
	79, 0, 0, 0, 0, 0, 0, 0, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	17, 79, 19, 0, 79, 23, 23, 79, 
	71, 71, 71, 71, 71, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 13, 79, 15, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 84, 84, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 108, 108, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	114, 114, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 120, 120, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 126, 126, 79, 
	0, 79, 0, 79, 0, 79, 0, 0, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 5, 0, 0, 5, 
	79, 0, 79, 7, 7, 0, 79, 90, 
	90, 79, 9, 81, 81, 79, 0, 79, 
	11, 0, 79, 0, 79, 0, 79, 0, 
	79, 1, 79, 0, 79, 0, 79, 3, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 5, 0, 
	0, 5, 79, 0, 79, 7, 7, 0, 
	79, 96, 96, 79, 9, 81, 81, 79, 
	0, 79, 11, 0, 79, 0, 79, 0, 
	79, 0, 79, 1, 79, 0, 79, 0, 
	79, 3, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 5, 0, 0, 5, 79, 0, 79, 
	7, 7, 0, 79, 132, 132, 79, 9, 
	81, 81, 79, 0, 79, 11, 0, 79, 
	0, 79, 0, 79, 0, 79, 1, 79, 
	0, 79, 0, 79, 3, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 5, 0, 0, 5, 
	79, 0, 79, 7, 7, 0, 79, 102, 
	102, 79, 9, 81, 81, 79, 0, 79, 
	11, 0, 79, 0, 79, 0, 79, 0, 
	79, 1, 79, 0, 79, 0, 79, 3, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 79, 138, 138, 79, 0, 79, 
	0, 79, 0, 79, 144, 144, 79, 0, 
	79, 0, 79, 0, 0, 0, 79, 0, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 5, 0, 0, 5, 79, 0, 79, 
	7, 7, 0, 79, 93, 93, 93, 93, 
	93, 79, 9, 81, 81, 79, 0, 79, 
	11, 0, 79, 0, 79, 0, 79, 0, 
	79, 1, 79, 0, 79, 0, 79, 3, 
	79, 0, 79, 0, 79, 0, 79, 0, 
	79, 0, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 5, 0, 
	0, 5, 79, 0, 79, 7, 7, 0, 
	79, 99, 99, 99, 99, 99, 79, 9, 
	81, 81, 79, 0, 79, 11, 0, 79, 
	0, 79, 0, 79, 0, 79, 1, 79, 
	0, 79, 0, 79, 3, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 5, 0, 0, 5, 
	79, 0, 79, 7, 7, 0, 79, 135, 
	135, 135, 135, 135, 79, 9, 81, 81, 
	79, 0, 79, 11, 0, 79, 0, 79, 
	0, 79, 0, 79, 1, 79, 0, 79, 
	0, 79, 3, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 5, 0, 0, 5, 79, 0, 
	79, 7, 7, 0, 79, 105, 105, 105, 
	105, 105, 79, 9, 81, 81, 79, 0, 
	79, 11, 0, 79, 0, 79, 0, 79, 
	0, 79, 1, 79, 0, 79, 0, 79, 
	3, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 0, 79, 0, 79, 
	0, 79, 0, 79, 141, 141, 141, 141, 
	141, 79, 0, 79, 0, 79, 0, 79, 
	147, 147, 147, 147, 147, 79, 75, 75, 
	75, 79, 77, 79, 0, 77, 0, 0, 
	0, 0, 79, 63, 174, 174, 79, 69, 
	0, 69, 69, 69, 0, 69, 0, 0, 
	0, 79, 0, 0, 0, 0, 79, 177, 
	177, 177, 177, 79, 180, 180, 180, 180, 
	79, 0
};

static const short _hext_eof_actions[] = {
	0, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 0, 177, 180
};

static const int hext_start = 485;
static const int hext_first_final = 485;
static const int hext_error = 0;

static const int hext_en_main = 485;


/* #line 85 "Parser.h.rl" */

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and return the top level Rule. Throw `ParseError` on invalid
  /// input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an invalid html tag.
  void throw_invalid_tag(const std::string& tag) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::size_t mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message complaining about a missing
  /// closing tag.
  void throw_missing_tag(GumboTag missing) const;

  /// Throw `ParseError` with an error message marking an invalid closing tag.
  ///
  /// \param tag
  ///   The invalid tag name.
  ///
  /// \param expected
  ///   The next expected closing GumboTag. If empty, a closing tag was
  ///   given but none expected.
  void throw_unexpected_tag(
    const std::string& tag,
    boost::optional<GumboTag> expected
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the unexpected character.
  ///
  /// \param uc
  ///   A pointer to the unexpected character.
  ///
  /// \param mark_len
  ///   Amount of '^' characters that are used to mark the error location up to
  ///   the unexpected character.
  void print_error_location(
    const char * uc,
    std::size_t mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

