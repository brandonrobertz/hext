// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 61 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 35, 1, 
	36, 1, 37, 1, 38, 1, 39, 1, 
	40, 1, 42, 2, 1, 43, 2, 24, 
	25, 2, 26, 27, 2, 28, 29, 2, 
	29, 37, 2, 31, 34, 2, 31, 37, 
	2, 33, 34, 2, 33, 37, 2, 39, 
	41, 2, 40, 41, 3, 0, 1, 43, 
	3, 28, 29, 37
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 5, 6, 14, 20, 24, 
	40, 41, 42, 44, 46, 48, 49, 52, 
	54, 56, 63, 70, 71, 74, 77, 79, 
	81, 87, 93, 94, 110, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 135, 138, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 154, 157, 158, 159, 160, 
	161, 164, 165, 166, 167, 168, 169, 171, 
	172, 173, 174, 175, 178, 179, 180, 181, 
	182, 183, 184, 187, 188, 189, 190, 191, 
	193, 194, 195, 196, 197, 200, 201, 202, 
	203, 204, 205, 206, 209, 210, 211, 212, 
	215, 216, 217, 218, 219, 220, 224, 228, 
	231, 233, 235, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 251, 
	252, 253, 254, 255, 256, 260, 264, 267, 
	269, 271, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 286, 287, 
	288, 292, 296, 299, 301, 303, 306, 307, 
	308, 309, 310, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 324, 328, 331, 
	333, 335, 338, 339, 340, 341, 342, 343, 
	344, 345, 346, 347, 348, 349, 350, 351, 
	352, 353, 354, 357, 358, 359, 360, 363, 
	370, 381, 384, 387
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 10, 32, 58, 
	62, 63, 65, 90, 97, 122, 32, 64, 
	65, 90, 97, 122, 65, 90, 97, 122, 
	32, 33, 36, 42, 45, 61, 62, 94, 
	95, 126, 48, 57, 65, 90, 97, 122, 
	61, 34, 34, 92, 34, 92, 32, 62, 
	92, 34, 47, 123, 47, 92, 47, 92, 
	32, 33, 62, 65, 90, 97, 122, 32, 
	33, 62, 65, 90, 97, 122, 92, 47, 
	123, 125, 47, 123, 125, 47, 92, 47, 
	92, 33, 125, 65, 90, 97, 122, 33, 
	125, 65, 90, 97, 122, 92, 32, 33, 
	36, 42, 45, 61, 62, 94, 95, 126, 
	48, 57, 65, 90, 97, 122, 97, 99, 
	101, 102, 108, 110, 111, 116, 116, 116, 
	114, 105, 98, 117, 116, 101, 45, 99, 
	111, 117, 110, 116, 40, 48, 57, 41, 
	48, 57, 32, 58, 62, 104, 105, 108, 
	100, 45, 99, 111, 117, 110, 116, 40, 
	48, 57, 41, 48, 57, 109, 112, 116, 
	121, 32, 58, 62, 105, 114, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 32, 
	58, 62, 102, 45, 116, 121, 112, 101, 
	32, 58, 62, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 58, 62, 
	102, 45, 116, 121, 112, 101, 32, 58, 
	62, 116, 104, 45, 99, 108, 111, 104, 
	105, 108, 100, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 32, 58, 62, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 58, 62, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 58, 62, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 102, 45, 116, 121, 112, 101, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 58, 62, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 110, 108, 121, 45, 99, 104, 105, 
	108, 100, 32, 58, 62, 101, 120, 116, 
	32, 58, 62, 32, 58, 62, 65, 90, 
	97, 122, 32, 45, 58, 62, 95, 48, 
	57, 65, 90, 97, 122, 32, 35, 60, 
	32, 35, 60, 10, 32, 35, 60, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 3, 1, 4, 2, 0, 10, 
	1, 1, 2, 2, 2, 1, 3, 2, 
	2, 3, 3, 1, 3, 3, 2, 2, 
	2, 2, 1, 10, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 3, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 2, 2, 3, 2, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 3, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 3, 2, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 1, 1, 3, 3, 
	5, 3, 3, 4
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 2, 2, 2, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 2, 0, 0, 0, 0, 0, 
	2, 2, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	3, 0, 0, 0
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 7, 9, 16, 21, 24, 
	38, 40, 42, 45, 48, 51, 53, 57, 
	60, 63, 69, 75, 77, 81, 85, 88, 
	91, 96, 101, 103, 117, 126, 128, 130, 
	132, 134, 136, 138, 140, 142, 144, 146, 
	148, 150, 152, 154, 156, 158, 161, 165, 
	167, 169, 171, 173, 175, 177, 179, 181, 
	183, 185, 187, 189, 192, 194, 196, 198, 
	200, 204, 206, 208, 210, 212, 214, 217, 
	219, 221, 223, 225, 229, 231, 233, 235, 
	237, 239, 241, 245, 247, 249, 251, 253, 
	256, 258, 260, 262, 264, 268, 270, 272, 
	274, 276, 278, 280, 284, 286, 288, 290, 
	294, 296, 298, 300, 302, 304, 308, 312, 
	316, 319, 321, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 349, 
	351, 353, 355, 357, 359, 363, 367, 371, 
	374, 376, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 411, 415, 419, 422, 424, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 459, 463, 467, 
	470, 472, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 511, 513, 515, 517, 521, 
	527, 536, 540, 544
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 4, 0, 202, 
	3, 5, 28, 203, 199, 200, 200, 0, 
	5, 6, 27, 27, 0, 7, 7, 0, 
	5, 8, 8, 8, 7, 14, 203, 8, 
	7, 8, 7, 7, 7, 0, 9, 0, 
	10, 0, 12, 13, 11, 12, 13, 11, 
	5, 203, 0, 13, 11, 10, 15, 20, 
	0, 17, 19, 16, 17, 19, 16, 5, 
	18, 203, 18, 18, 0, 5, 18, 203, 
	18, 18, 0, 19, 16, 0, 0, 0, 
	21, 22, 0, 12, 21, 24, 26, 23, 
	24, 26, 23, 25, 12, 25, 25, 0, 
	25, 12, 25, 25, 0, 26, 23, 5, 
	8, 8, 8, 27, 14, 203, 8, 27, 
	8, 27, 27, 27, 0, 29, 47, 60, 
	65, 83, 100, 185, 195, 0, 30, 0, 
	31, 0, 32, 0, 33, 0, 34, 0, 
	35, 0, 36, 0, 37, 0, 38, 0, 
	39, 0, 40, 0, 41, 0, 42, 0, 
	43, 0, 44, 0, 45, 0, 46, 45, 
	0, 5, 28, 203, 0, 48, 0, 49, 
	0, 50, 0, 51, 0, 52, 0, 53, 
	0, 54, 0, 55, 0, 56, 0, 57, 
	0, 58, 0, 59, 0, 46, 59, 0, 
	61, 0, 62, 0, 63, 0, 64, 0, 
	5, 28, 203, 0, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 76, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 5, 28, 203, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 5, 28, 203, 0, 84, 0, 85, 
	0, 86, 0, 87, 0, 88, 93, 0, 
	89, 0, 90, 0, 91, 0, 92, 0, 
	5, 28, 203, 0, 94, 0, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	5, 28, 203, 0, 101, 0, 102, 0, 
	103, 0, 104, 122, 165, 0, 105, 0, 
	106, 0, 107, 0, 108, 0, 109, 0, 
	115, 119, 110, 0, 111, 112, 110, 0, 
	5, 28, 203, 0, 111, 113, 0, 114, 
	0, 111, 114, 0, 116, 0, 117, 0, 
	118, 0, 111, 0, 120, 0, 121, 0, 
	111, 0, 123, 0, 124, 0, 125, 0, 
	126, 0, 127, 145, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 132, 0, 138, 
	142, 133, 0, 134, 135, 133, 0, 5, 
	28, 203, 0, 134, 136, 0, 137, 0, 
	134, 137, 0, 139, 0, 140, 0, 141, 
	0, 134, 0, 143, 0, 144, 0, 134, 
	0, 146, 0, 147, 0, 148, 0, 149, 
	0, 150, 0, 151, 0, 152, 0, 158, 
	162, 153, 0, 154, 155, 153, 0, 5, 
	28, 203, 0, 154, 156, 0, 157, 0, 
	154, 157, 0, 159, 0, 160, 0, 161, 
	0, 154, 0, 163, 0, 164, 0, 154, 
	0, 166, 0, 167, 0, 168, 0, 169, 
	0, 170, 0, 171, 0, 172, 0, 178, 
	182, 173, 0, 174, 175, 173, 0, 5, 
	28, 203, 0, 174, 176, 0, 177, 0, 
	174, 177, 0, 179, 0, 180, 0, 181, 
	0, 174, 0, 183, 0, 184, 0, 174, 
	0, 186, 0, 187, 0, 188, 0, 189, 
	0, 190, 0, 191, 0, 192, 0, 193, 
	0, 194, 0, 5, 28, 203, 0, 196, 
	0, 197, 0, 198, 0, 5, 28, 203, 
	0, 5, 28, 203, 200, 200, 0, 5, 
	200, 28, 203, 200, 200, 200, 200, 0, 
	1, 3, 4, 0, 1, 3, 4, 0, 
	202, 1, 3, 4, 0, 0
};

static const char _hext_trans_actions[] = {
	0, 0, 1, 75, 0, 75, 1, 0, 
	0, 77, 77, 77, 77, 110, 110, 1, 
	0, 0, 65, 65, 1, 61, 61, 1, 
	101, 98, 98, 98, 0, 63, 101, 98, 
	0, 98, 0, 0, 0, 1, 0, 1, 
	0, 1, 86, 49, 49, 51, 0, 0, 
	73, 73, 1, 0, 0, 0, 0, 0, 
	1, 89, 53, 53, 55, 0, 0, 120, 
	57, 120, 57, 57, 1, 95, 0, 95, 
	0, 0, 1, 0, 0, 1, 1, 1, 
	69, 71, 1, 71, 0, 89, 53, 53, 
	55, 0, 0, 57, 92, 57, 57, 1, 
	0, 59, 0, 0, 1, 0, 0, 107, 
	104, 104, 104, 0, 67, 107, 104, 0, 
	104, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 21, 1, 23, 0, 
	1, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 25, 1, 27, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	19, 19, 19, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 35, 35, 35, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 37, 37, 37, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	39, 39, 39, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	41, 41, 41, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 9, 1, 11, 11, 0, 1, 
	29, 29, 29, 1, 13, 13, 1, 15, 
	1, 17, 0, 1, 0, 1, 0, 1, 
	0, 1, 5, 1, 0, 1, 0, 1, 
	7, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 9, 1, 11, 11, 0, 1, 31, 
	31, 31, 1, 13, 13, 1, 15, 1, 
	17, 0, 1, 0, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 7, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 9, 1, 11, 11, 0, 1, 43, 
	43, 43, 1, 13, 13, 1, 15, 1, 
	17, 0, 1, 0, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 7, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 9, 1, 11, 11, 0, 1, 33, 
	33, 33, 1, 13, 13, 1, 15, 1, 
	17, 0, 1, 0, 1, 0, 1, 0, 
	1, 5, 1, 0, 1, 0, 1, 7, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 45, 45, 45, 1, 0, 
	1, 0, 1, 0, 1, 47, 47, 47, 
	1, 79, 79, 79, 113, 113, 1, 81, 
	0, 81, 81, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 3, 3, 3, 1, 
	0, 0, 0, 0, 1, 0
};

static const char _hext_eof_actions[] = {
	0, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 116, 116, 116, 116, 116, 116, 116, 
	116, 83, 83, 83
};

static const int hext_start = 201;
static const int hext_first_final = 201;
static const int hext_error = 0;

static const int hext_en_main = 201;


#line 61 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse(Option flags = DefaultOption);

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

