// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/StringUtil.h"
#include "hext/Builtins.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/PatternBuilder.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 61 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 34, 1, 
	36, 1, 37, 1, 38, 1, 39, 1, 
	40, 1, 41, 1, 43, 2, 1, 44, 
	2, 24, 25, 2, 26, 27, 2, 28, 
	29, 2, 29, 38, 2, 32, 35, 2, 
	32, 38, 2, 34, 35, 2, 34, 38, 
	2, 40, 42, 2, 41, 42, 3, 0, 
	1, 44, 3, 28, 29, 38
};

static const short _hext_key_offsets[] = {
	0, 0, 2, 5, 6, 14, 21, 26, 
	30, 45, 46, 47, 49, 51, 53, 54, 
	57, 59, 61, 68, 75, 76, 79, 82, 
	84, 86, 92, 98, 99, 114, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 135, 136, 137, 139, 142, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 158, 161, 162, 163, 
	164, 165, 168, 169, 170, 171, 172, 173, 
	175, 176, 177, 178, 179, 182, 183, 184, 
	185, 186, 187, 188, 191, 192, 193, 194, 
	195, 197, 198, 199, 200, 201, 204, 205, 
	206, 207, 208, 209, 210, 213, 214, 215, 
	216, 219, 220, 221, 222, 223, 224, 228, 
	232, 235, 237, 239, 242, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	255, 256, 257, 258, 259, 260, 264, 268, 
	271, 273, 275, 278, 279, 280, 281, 282, 
	283, 284, 285, 286, 287, 288, 289, 290, 
	291, 292, 296, 300, 303, 305, 307, 310, 
	311, 312, 313, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 324, 328, 332, 
	335, 337, 339, 342, 343, 344, 345, 346, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 356, 357, 358, 361, 362, 363, 364, 
	367, 374, 385, 388, 391
};

static const char _hext_trans_keys[] = {
	32, 35, 32, 35, 60, 10, 32, 58, 
	62, 63, 65, 90, 97, 122, 32, 33, 
	64, 65, 90, 97, 122, 64, 65, 90, 
	97, 122, 65, 90, 97, 122, 32, 36, 
	42, 45, 61, 62, 94, 95, 126, 48, 
	57, 65, 90, 97, 122, 61, 34, 34, 
	92, 34, 92, 32, 62, 92, 34, 47, 
	123, 47, 92, 47, 92, 32, 33, 62, 
	65, 90, 97, 122, 32, 33, 62, 65, 
	90, 97, 122, 92, 47, 123, 125, 47, 
	123, 125, 47, 92, 47, 92, 33, 125, 
	65, 90, 97, 122, 33, 125, 65, 90, 
	97, 122, 92, 32, 36, 42, 45, 61, 
	62, 94, 95, 126, 48, 57, 65, 90, 
	97, 122, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 58, 
	62, 104, 105, 108, 100, 45, 99, 111, 
	117, 110, 116, 40, 48, 57, 41, 48, 
	57, 109, 112, 116, 121, 32, 58, 62, 
	105, 114, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 32, 58, 62, 102, 45, 
	116, 121, 112, 101, 32, 58, 62, 97, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 58, 62, 102, 45, 116, 121, 
	112, 101, 32, 58, 62, 116, 104, 45, 
	99, 108, 111, 104, 105, 108, 100, 40, 
	101, 111, 48, 57, 41, 110, 48, 57, 
	32, 58, 62, 41, 43, 48, 57, 41, 
	48, 57, 118, 101, 110, 41, 100, 100, 
	41, 97, 115, 116, 45, 99, 111, 104, 
	105, 108, 100, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 32, 58, 62, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 32, 58, 62, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 101, 111, 48, 57, 
	41, 110, 48, 57, 32, 58, 62, 41, 
	43, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 110, 108, 121, 
	45, 99, 104, 105, 108, 100, 32, 58, 
	62, 101, 120, 116, 32, 58, 62, 32, 
	58, 62, 65, 90, 97, 122, 32, 45, 
	58, 62, 95, 48, 57, 65, 90, 97, 
	122, 32, 35, 60, 32, 35, 60, 10, 
	32, 35, 60, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 3, 1, 4, 3, 1, 0, 
	9, 1, 1, 2, 2, 2, 1, 3, 
	2, 2, 3, 3, 1, 3, 3, 2, 
	2, 2, 2, 1, 9, 8, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 2, 2, 
	3, 2, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 3, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	2, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 3, 
	3, 5, 3, 3, 4
};

static const char _hext_range_lengths[] = {
	0, 0, 0, 0, 2, 2, 2, 2, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 2, 0, 0, 0, 0, 
	0, 2, 2, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 3, 0, 0, 0
};

static const short _hext_index_offsets[] = {
	0, 0, 3, 7, 9, 16, 22, 26, 
	29, 42, 44, 46, 49, 52, 55, 57, 
	61, 64, 67, 73, 79, 81, 85, 89, 
	92, 95, 100, 105, 107, 120, 129, 131, 
	133, 135, 137, 139, 141, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 164, 
	168, 170, 172, 174, 176, 178, 180, 182, 
	184, 186, 188, 190, 192, 195, 197, 199, 
	201, 203, 207, 209, 211, 213, 215, 217, 
	220, 222, 224, 226, 228, 232, 234, 236, 
	238, 240, 242, 244, 248, 250, 252, 254, 
	256, 259, 261, 263, 265, 267, 271, 273, 
	275, 277, 279, 281, 283, 287, 289, 291, 
	293, 297, 299, 301, 303, 305, 307, 311, 
	315, 319, 322, 324, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	352, 354, 356, 358, 360, 362, 366, 370, 
	374, 377, 379, 382, 384, 386, 388, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 414, 418, 422, 425, 427, 430, 
	432, 434, 436, 438, 440, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 462, 466, 
	470, 473, 475, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 514, 516, 518, 520, 
	524, 530, 539, 543, 547
};

static const unsigned char _hext_trans_targs[] = {
	2, 3, 0, 1, 3, 4, 0, 203, 
	3, 5, 29, 204, 200, 201, 201, 0, 
	5, 6, 7, 28, 28, 0, 7, 28, 
	28, 0, 8, 8, 0, 5, 9, 9, 
	8, 15, 204, 9, 8, 9, 8, 8, 
	8, 0, 10, 0, 11, 0, 13, 14, 
	12, 13, 14, 12, 5, 204, 0, 14, 
	12, 11, 16, 21, 0, 18, 20, 17, 
	18, 20, 17, 5, 19, 204, 19, 19, 
	0, 5, 19, 204, 19, 19, 0, 20, 
	17, 0, 0, 0, 22, 23, 0, 13, 
	22, 25, 27, 24, 25, 27, 24, 26, 
	13, 26, 26, 0, 26, 13, 26, 26, 
	0, 27, 24, 5, 9, 9, 28, 15, 
	204, 9, 28, 9, 28, 28, 28, 0, 
	30, 48, 61, 66, 84, 101, 186, 196, 
	0, 31, 0, 32, 0, 33, 0, 34, 
	0, 35, 0, 36, 0, 37, 0, 38, 
	0, 39, 0, 40, 0, 41, 0, 42, 
	0, 43, 0, 44, 0, 45, 0, 46, 
	0, 47, 46, 0, 5, 29, 204, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 59, 0, 60, 0, 
	47, 60, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 5, 29, 204, 0, 67, 
	0, 68, 0, 69, 0, 70, 0, 71, 
	0, 72, 77, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 5, 29, 204, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	82, 0, 83, 0, 5, 29, 204, 0, 
	85, 0, 86, 0, 87, 0, 88, 0, 
	89, 94, 0, 90, 0, 91, 0, 92, 
	0, 93, 0, 5, 29, 204, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 100, 0, 5, 29, 204, 0, 102, 
	0, 103, 0, 104, 0, 105, 123, 166, 
	0, 106, 0, 107, 0, 108, 0, 109, 
	0, 110, 0, 116, 120, 111, 0, 112, 
	113, 111, 0, 5, 29, 204, 0, 112, 
	114, 0, 115, 0, 112, 115, 0, 117, 
	0, 118, 0, 119, 0, 112, 0, 121, 
	0, 122, 0, 112, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 146, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 139, 143, 134, 0, 135, 136, 
	134, 0, 5, 29, 204, 0, 135, 137, 
	0, 138, 0, 135, 138, 0, 140, 0, 
	141, 0, 142, 0, 135, 0, 144, 0, 
	145, 0, 135, 0, 147, 0, 148, 0, 
	149, 0, 150, 0, 151, 0, 152, 0, 
	153, 0, 159, 163, 154, 0, 155, 156, 
	154, 0, 5, 29, 204, 0, 155, 157, 
	0, 158, 0, 155, 158, 0, 160, 0, 
	161, 0, 162, 0, 155, 0, 164, 0, 
	165, 0, 155, 0, 167, 0, 168, 0, 
	169, 0, 170, 0, 171, 0, 172, 0, 
	173, 0, 179, 183, 174, 0, 175, 176, 
	174, 0, 5, 29, 204, 0, 175, 177, 
	0, 178, 0, 175, 178, 0, 180, 0, 
	181, 0, 182, 0, 175, 0, 184, 0, 
	185, 0, 175, 0, 187, 0, 188, 0, 
	189, 0, 190, 0, 191, 0, 192, 0, 
	193, 0, 194, 0, 195, 0, 5, 29, 
	204, 0, 197, 0, 198, 0, 199, 0, 
	5, 29, 204, 0, 5, 29, 204, 201, 
	201, 0, 5, 201, 29, 204, 201, 201, 
	201, 201, 0, 1, 3, 4, 0, 1, 
	3, 4, 0, 203, 1, 3, 4, 0, 
	0
};

static const char _hext_trans_actions[] = {
	0, 0, 1, 77, 0, 77, 1, 0, 
	0, 79, 79, 79, 79, 112, 112, 1, 
	0, 61, 0, 67, 67, 1, 0, 67, 
	67, 1, 63, 63, 1, 103, 100, 100, 
	0, 65, 103, 100, 0, 100, 0, 0, 
	0, 1, 0, 1, 0, 1, 88, 49, 
	49, 51, 0, 0, 75, 75, 1, 0, 
	0, 0, 0, 0, 1, 91, 53, 53, 
	55, 0, 0, 122, 57, 122, 57, 57, 
	1, 97, 0, 97, 0, 0, 1, 0, 
	0, 1, 1, 1, 71, 73, 1, 73, 
	0, 91, 53, 53, 55, 0, 0, 57, 
	94, 57, 57, 1, 0, 59, 0, 0, 
	1, 0, 0, 109, 106, 106, 0, 69, 
	109, 106, 0, 106, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 21, 
	1, 23, 0, 1, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 25, 1, 
	27, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 19, 19, 19, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 35, 35, 35, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 37, 37, 37, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 39, 39, 39, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 41, 41, 41, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 0, 9, 1, 11, 
	11, 0, 1, 29, 29, 29, 1, 13, 
	13, 1, 15, 1, 17, 0, 1, 0, 
	1, 0, 1, 0, 1, 5, 1, 0, 
	1, 0, 1, 7, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 31, 31, 31, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 43, 43, 43, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 9, 1, 11, 11, 
	0, 1, 33, 33, 33, 1, 13, 13, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 7, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 45, 45, 
	45, 1, 0, 1, 0, 1, 0, 1, 
	47, 47, 47, 1, 81, 81, 81, 115, 
	115, 1, 83, 0, 83, 83, 0, 0, 
	0, 0, 1, 0, 0, 0, 1, 3, 
	3, 3, 1, 0, 0, 0, 0, 1, 
	0
};

static const char _hext_eof_actions[] = {
	0, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 85, 85, 85
};

static const int hext_start = 202;
static const int hext_first_final = 202;
static const int hext_error = 0;

static const int hext_en_main = 202;


#line 61 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse(Option flags = DefaultOption);

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

