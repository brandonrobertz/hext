// This file was generated from Parser.h.rl.

#line 1 "Parser.h.rl"
#ifndef HEXT_PARSER_H_INCLUDED
#define HEXT_PARSER_H_INCLUDED

#include "hext/Builtins.h"
#include "hext/MakeUnique.h"
#include "hext/pattern/AttributeCapture.h"
#include "hext/pattern/AttributeCountMatch.h"
#include "hext/pattern/AttributeMatch.h"
#include "hext/pattern/BuiltinCapture.h"
#include "hext/pattern/BuiltinMatch.h"
#include "hext/pattern/CapturePattern.h"
#include "hext/pattern/ChildCountMatch.h"
#include "hext/pattern/MatchPattern.h"
#include "hext/pattern/NegateMatch.h"
#include "hext/pattern/NthChildMatch.h"
#include "hext/pattern/TextNodeMatch.h"
#include "hext/PatternValues.h"
#include "hext/Rule.h"
#include "hext/RuleBuilder.h"
#include "hext/StringUtil.h"
#include "hext/test/BeginsWith.h"
#include "hext/test/Contains.h"
#include "hext/test/ContainsWord.h"
#include "hext/test/EndsWith.h"
#include "hext/test/Equals.h"
#include "hext/test/Negate.h"
#include "hext/test/NotNull.h"
#include "hext/test/Regex.h"
#include "hext/test/ValueTest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <utility>
#include <algorithm>
#include <memory>

#include <boost/optional.hpp>
#include <boost/regex/regex_traits.hpp>
#include <boost/regex/pattern_except.hpp>
#include <gumbo.h>


/// Convenience macro to store the start of a token. Used within the hext
/// machine definition. Accesses local variables of `Parser::parse()`.
#define TK_START \
  tok_begin = p; \
  tok_end = nullptr;


/// Convenience macro to complete a token. Used within the hext
/// machine defintion. Accesses local variables of `Parser::parse()`.
#define TK_STOP                 \
  assert(tok_begin != nullptr); \
  tok_end = p;                  \
  tok = std::string(tok_begin, std::distance(tok_begin, tok_end));


namespace hext {


/// ParseError is a custom exception class thrown for all errors that occur
/// while parsing hext.
/// Note: Clang warns (-Wweak-vtables) that a vtable for ParseError may be
/// placed in every translation unit, because ParseError doesn't have any
/// 'out-of-line virtual method definitions', where it would normally put
/// the vtable. But http://stackoverflow.com/a/23749273 suggests that this
/// is a non-issue; the linker will clean it up.
class ParseError : public std::runtime_error
{
public:
  explicit ParseError(const std::string& msg);
};


/// The ragel namespace holds ragel's static data.
namespace ragel {
  /// Embed the ragel state machine.
  
#line 84 "Parser.h.tmp"
static const char _hext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 7, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	38, 1, 39, 1, 40, 1, 41, 1, 
	42, 1, 43, 1, 44, 1, 45, 1, 
	46, 1, 56, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 64, 1, 65, 1, 
	66, 1, 67, 2, 0, 67, 2, 5, 
	6, 2, 8, 24, 2, 8, 60, 2, 
	13, 24, 2, 13, 60, 2, 14, 24, 
	2, 14, 60, 2, 15, 24, 2, 15, 
	60, 2, 16, 24, 2, 16, 60, 2, 
	17, 24, 2, 17, 60, 2, 18, 24, 
	2, 18, 60, 2, 19, 24, 2, 19, 
	60, 2, 20, 24, 2, 20, 60, 2, 
	21, 24, 2, 21, 60, 2, 22, 24, 
	2, 22, 60, 2, 25, 26, 2, 27, 
	29, 2, 28, 29, 2, 29, 30, 2, 
	39, 53, 2, 40, 41, 2, 47, 55, 
	2, 50, 55, 2, 56, 57, 2, 61, 
	63, 2, 62, 63, 2, 64, 65, 2, 
	66, 67, 3, 27, 29, 30, 3, 28, 
	29, 30, 3, 36, 50, 55, 3, 37, 
	48, 55, 3, 37, 49, 55, 3, 37, 
	51, 55, 3, 37, 52, 55, 3, 37, 
	54, 55, 3, 42, 49, 55, 3, 42, 
	52, 55, 3, 43, 49, 55, 3, 43, 
	52, 55, 3, 44, 49, 55, 3, 44, 
	52, 55, 3, 45, 49, 55, 3, 45, 
	52, 55, 3, 46, 49, 55, 3, 46, 
	52, 55, 3, 61, 63, 66, 3, 61, 
	63, 67, 3, 62, 63, 67, 4, 29, 
	30, 48, 55, 4, 29, 30, 51, 55, 
	4, 39, 53, 54, 55, 4, 61, 63, 
	66, 67, 5, 27, 29, 30, 48, 55, 
	5, 27, 29, 30, 51, 55, 5, 28, 
	29, 30, 48, 55, 5, 28, 29, 30, 
	51, 55
};

static const short _hext_key_offsets[] = {
	0, 0, 4, 15, 25, 26, 27, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 44, 45, 46, 48, 50, 56, 61, 
	62, 63, 64, 66, 68, 74, 75, 78, 
	80, 82, 88, 89, 91, 93, 101, 106, 
	114, 122, 123, 126, 129, 131, 133, 136, 
	139, 142, 147, 148, 149, 150, 152, 154, 
	160, 161, 162, 163, 165, 167, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 188, 189, 190, 191, 196, 215, 220, 
	221, 222, 224, 226, 232, 237, 238, 239, 
	240, 242, 244, 250, 251, 254, 256, 258, 
	264, 265, 267, 269, 277, 282, 290, 298, 
	299, 302, 305, 307, 309, 312, 315, 318, 
	324, 329, 330, 331, 332, 334, 336, 342, 
	343, 344, 345, 347, 349, 355, 356, 361, 
	370, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	393, 395, 398, 404, 405, 406, 407, 408, 
	409, 410, 411, 412, 413, 414, 415, 417, 
	420, 421, 422, 423, 424, 430, 431, 432, 
	433, 434, 435, 437, 438, 439, 440, 441, 
	447, 448, 449, 450, 451, 452, 453, 459, 
	460, 461, 462, 463, 465, 466, 467, 468, 
	469, 475, 476, 477, 478, 479, 480, 481, 
	487, 489, 490, 491, 492, 500, 501, 502, 
	503, 504, 505, 506, 507, 508, 509, 510, 
	511, 512, 513, 514, 515, 517, 520, 522, 
	528, 529, 530, 531, 532, 533, 534, 535, 
	536, 537, 538, 539, 541, 544, 545, 546, 
	547, 548, 550, 551, 552, 553, 554, 555, 
	557, 558, 559, 560, 561, 563, 564, 565, 
	566, 567, 568, 569, 571, 572, 573, 574, 
	575, 577, 578, 579, 580, 581, 583, 584, 
	585, 586, 587, 588, 589, 591, 592, 593, 
	594, 597, 598, 599, 600, 601, 602, 607, 
	609, 613, 615, 618, 620, 623, 624, 625, 
	626, 627, 628, 629, 630, 631, 632, 633, 
	634, 636, 637, 638, 639, 640, 641, 646, 
	648, 652, 654, 657, 659, 662, 663, 664, 
	665, 666, 667, 668, 669, 670, 671, 672, 
	673, 674, 675, 676, 681, 683, 687, 689, 
	692, 694, 697, 698, 699, 700, 701, 702, 
	703, 704, 705, 706, 707, 708, 709, 710, 
	711, 716, 718, 722, 724, 727, 729, 732, 
	733, 734, 735, 736, 737, 738, 739, 740, 
	741, 742, 743, 744, 745, 746, 747, 748, 
	750, 751, 752, 753, 755, 756, 757, 760, 
	761, 762, 763, 764, 765, 770, 772, 776, 
	782, 785, 787, 790, 791, 792, 793, 794, 
	795, 796, 797, 798, 799, 800, 801, 803, 
	804, 805, 806, 807, 808, 813, 815, 819, 
	825, 828, 830, 833, 834, 835, 836, 837, 
	838, 839, 840, 841, 842, 843, 844, 845, 
	846, 847, 852, 854, 858, 864, 867, 869, 
	872, 873, 874, 875, 876, 877, 878, 879, 
	880, 881, 882, 883, 884, 885, 886, 891, 
	893, 897, 903, 906, 908, 911, 912, 913, 
	914, 915, 916, 917, 918, 919, 920, 921, 
	922, 923, 924, 925, 926, 927, 933, 934, 
	935, 936, 942, 952, 966, 971, 976, 981, 
	986, 991, 996
};

static const char _hext_trans_keys[] = {
	32, 60, 9, 13, 32, 47, 58, 62, 
	63, 9, 13, 65, 90, 97, 122, 32, 
	47, 62, 64, 9, 13, 65, 90, 97, 
	122, 62, 10, 105, 115, 116, 110, 110, 
	101, 114, 45, 104, 116, 109, 108, 36, 
	42, 61, 94, 126, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 34, 47, 123, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 47, 123, 125, 47, 123, 
	125, 47, 92, 47, 92, 99, 105, 125, 
	99, 105, 125, 99, 105, 125, 32, 47, 
	62, 9, 13, 92, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 61, 34, 34, 92, 34, 92, 32, 
	33, 47, 62, 9, 13, 92, 116, 114, 
	105, 112, 45, 116, 97, 103, 115, 36, 
	42, 61, 94, 126, 101, 120, 116, 36, 
	42, 61, 94, 126, 32, 33, 36, 42, 
	45, 47, 61, 62, 94, 95, 126, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	47, 62, 9, 13, 61, 34, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	32, 47, 62, 9, 13, 92, 61, 34, 
	34, 92, 34, 92, 32, 33, 47, 62, 
	9, 13, 92, 34, 47, 123, 34, 92, 
	34, 92, 32, 33, 47, 62, 9, 13, 
	92, 47, 92, 47, 92, 32, 33, 47, 
	62, 99, 105, 9, 13, 32, 47, 62, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 32, 33, 47, 62, 99, 105, 
	9, 13, 92, 47, 123, 125, 47, 123, 
	125, 47, 92, 47, 92, 99, 105, 125, 
	99, 105, 125, 99, 105, 125, 32, 47, 
	62, 63, 9, 13, 32, 47, 62, 9, 
	13, 92, 61, 34, 34, 92, 34, 92, 
	32, 33, 47, 62, 9, 13, 92, 61, 
	34, 34, 92, 34, 92, 32, 33, 47, 
	62, 9, 13, 92, 62, 65, 90, 97, 
	122, 45, 62, 95, 48, 57, 65, 90, 
	97, 122, 97, 99, 101, 102, 108, 110, 
	111, 116, 116, 116, 114, 105, 98, 117, 
	116, 101, 45, 99, 111, 117, 110, 116, 
	40, 48, 57, 41, 48, 57, 32, 47, 
	58, 62, 9, 13, 104, 105, 108, 100, 
	45, 99, 111, 117, 110, 116, 40, 48, 
	57, 41, 48, 57, 109, 112, 116, 121, 
	32, 47, 58, 62, 9, 13, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 32, 47, 58, 62, 9, 13, 102, 
	45, 116, 121, 112, 101, 32, 47, 58, 
	62, 9, 13, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 32, 47, 58, 
	62, 9, 13, 102, 45, 116, 121, 112, 
	101, 32, 47, 58, 62, 9, 13, 111, 
	116, 116, 40, 58, 97, 99, 101, 102, 
	108, 110, 111, 116, 116, 116, 114, 105, 
	98, 117, 116, 101, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	41, 58, 32, 47, 58, 62, 9, 13, 
	104, 105, 108, 100, 45, 99, 111, 117, 
	110, 116, 40, 48, 57, 41, 48, 57, 
	109, 112, 116, 121, 41, 58, 105, 114, 
	115, 116, 45, 99, 111, 104, 105, 108, 
	100, 41, 58, 102, 45, 116, 121, 112, 
	101, 41, 58, 97, 115, 116, 45, 99, 
	111, 104, 105, 108, 100, 41, 58, 102, 
	45, 116, 121, 112, 101, 41, 58, 116, 
	104, 45, 99, 108, 111, 104, 105, 108, 
	100, 40, 45, 101, 111, 48, 57, 48, 
	57, 41, 110, 48, 57, 41, 58, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 97, 115, 
	116, 45, 99, 111, 104, 105, 108, 100, 
	40, 45, 101, 111, 48, 57, 48, 57, 
	41, 110, 48, 57, 41, 58, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 102, 45, 116, 
	121, 112, 101, 40, 45, 101, 111, 48, 
	57, 48, 57, 41, 110, 48, 57, 41, 
	58, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 41, 58, 41, 43, 45, 48, 
	57, 41, 48, 57, 118, 101, 110, 41, 
	100, 100, 41, 110, 108, 121, 45, 99, 
	104, 105, 108, 100, 41, 58, 101, 120, 
	116, 41, 58, 104, 45, 99, 108, 111, 
	104, 105, 108, 100, 40, 45, 101, 111, 
	48, 57, 48, 57, 41, 110, 48, 57, 
	32, 47, 58, 62, 9, 13, 41, 43, 
	45, 48, 57, 41, 48, 57, 118, 101, 
	110, 41, 100, 100, 41, 97, 115, 116, 
	45, 99, 111, 104, 105, 108, 100, 40, 
	45, 101, 111, 48, 57, 48, 57, 41, 
	110, 48, 57, 32, 47, 58, 62, 9, 
	13, 41, 43, 45, 48, 57, 41, 48, 
	57, 118, 101, 110, 41, 100, 100, 41, 
	102, 45, 116, 121, 112, 101, 40, 45, 
	101, 111, 48, 57, 48, 57, 41, 110, 
	48, 57, 32, 47, 58, 62, 9, 13, 
	41, 43, 45, 48, 57, 41, 48, 57, 
	118, 101, 110, 41, 100, 100, 41, 102, 
	45, 116, 121, 112, 101, 40, 45, 101, 
	111, 48, 57, 48, 57, 41, 110, 48, 
	57, 32, 47, 58, 62, 9, 13, 41, 
	43, 45, 48, 57, 41, 48, 57, 118, 
	101, 110, 41, 100, 100, 41, 110, 108, 
	121, 45, 99, 104, 105, 108, 100, 32, 
	47, 58, 62, 9, 13, 101, 120, 116, 
	32, 47, 58, 62, 9, 13, 32, 47, 
	58, 62, 9, 13, 65, 90, 97, 122, 
	32, 45, 47, 58, 62, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 35, 
	60, 9, 13, 32, 35, 60, 9, 13, 
	32, 35, 60, 9, 13, 32, 35, 60, 
	9, 13, 32, 35, 60, 9, 13, 32, 
	35, 60, 9, 13, 32, 35, 60, 9, 
	13, 0
};

static const char _hext_single_lengths[] = {
	0, 2, 5, 4, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 2, 2, 4, 3, 1, 
	1, 1, 2, 2, 4, 1, 3, 2, 
	2, 4, 1, 2, 2, 6, 3, 6, 
	6, 1, 3, 3, 2, 2, 3, 3, 
	3, 3, 1, 1, 1, 2, 2, 4, 
	1, 1, 1, 2, 2, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 5, 11, 3, 1, 
	1, 2, 2, 4, 3, 1, 1, 1, 
	2, 2, 4, 1, 3, 2, 2, 4, 
	1, 2, 2, 6, 3, 6, 6, 1, 
	3, 3, 2, 2, 3, 3, 3, 4, 
	3, 1, 1, 1, 2, 2, 4, 1, 
	1, 1, 2, 2, 4, 1, 1, 3, 
	8, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 1, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 4, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 4, 
	2, 1, 1, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 2, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 3, 0, 
	2, 2, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 0, 2, 2, 3, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 0, 2, 2, 3, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 3, 0, 2, 4, 
	3, 0, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 0, 2, 4, 3, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 0, 
	2, 4, 3, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 4, 4, 6, 3, 3, 3, 3, 
	3, 3, 3
};

static const char _hext_range_lengths[] = {
	0, 1, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 2, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 3, 4, 1, 1, 1, 1, 
	1, 1, 1
};

static const short _hext_index_offsets[] = {
	0, 0, 4, 13, 21, 23, 25, 29, 
	31, 33, 35, 37, 39, 41, 43, 45, 
	47, 53, 55, 57, 60, 63, 69, 74, 
	76, 78, 80, 83, 86, 92, 94, 98, 
	101, 104, 110, 112, 115, 118, 126, 131, 
	139, 147, 149, 153, 157, 160, 163, 167, 
	171, 175, 180, 182, 184, 186, 189, 192, 
	198, 200, 202, 204, 207, 210, 216, 218, 
	220, 222, 224, 226, 228, 230, 232, 234, 
	236, 242, 244, 246, 248, 254, 270, 275, 
	277, 279, 282, 285, 291, 296, 298, 300, 
	302, 305, 308, 314, 316, 320, 323, 326, 
	332, 334, 337, 340, 348, 353, 361, 369, 
	371, 375, 379, 382, 385, 389, 393, 397, 
	403, 408, 410, 412, 414, 417, 420, 426, 
	428, 430, 432, 435, 438, 444, 446, 450, 
	457, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 501, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	534, 536, 538, 540, 542, 548, 550, 552, 
	554, 556, 558, 561, 563, 565, 567, 569, 
	575, 577, 579, 581, 583, 585, 587, 593, 
	595, 597, 599, 601, 604, 606, 608, 610, 
	612, 618, 620, 622, 624, 626, 628, 630, 
	636, 639, 641, 643, 645, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 689, 692, 
	698, 700, 702, 704, 706, 708, 710, 712, 
	714, 716, 718, 720, 722, 725, 727, 729, 
	731, 733, 736, 738, 740, 742, 744, 746, 
	749, 751, 753, 755, 757, 760, 762, 764, 
	766, 768, 770, 772, 775, 777, 779, 781, 
	783, 786, 788, 790, 792, 794, 797, 799, 
	801, 803, 805, 807, 809, 812, 814, 816, 
	818, 822, 824, 826, 828, 830, 832, 837, 
	839, 843, 846, 850, 852, 855, 857, 859, 
	861, 863, 865, 867, 869, 871, 873, 875, 
	877, 880, 882, 884, 886, 888, 890, 895, 
	897, 901, 904, 908, 910, 913, 915, 917, 
	919, 921, 923, 925, 927, 929, 931, 933, 
	935, 937, 939, 941, 946, 948, 952, 955, 
	959, 961, 964, 966, 968, 970, 972, 974, 
	976, 978, 980, 982, 984, 986, 988, 990, 
	992, 997, 999, 1003, 1006, 1010, 1012, 1015, 
	1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1050, 1052, 1054, 1056, 1059, 1061, 1063, 1067, 
	1069, 1071, 1073, 1075, 1077, 1082, 1084, 1088, 
	1094, 1098, 1100, 1103, 1105, 1107, 1109, 1111, 
	1113, 1115, 1117, 1119, 1121, 1123, 1125, 1128, 
	1130, 1132, 1134, 1136, 1138, 1143, 1145, 1149, 
	1155, 1159, 1161, 1164, 1166, 1168, 1170, 1172, 
	1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 
	1190, 1192, 1197, 1199, 1203, 1209, 1213, 1215, 
	1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 
	1234, 1236, 1238, 1240, 1242, 1244, 1246, 1251, 
	1253, 1257, 1263, 1267, 1269, 1272, 1274, 1276, 
	1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 
	1294, 1296, 1298, 1300, 1302, 1304, 1310, 1312, 
	1314, 1316, 1322, 1330, 1341, 1346, 1351, 1356, 
	1361, 1366, 1371
};

static const short _hext_trans_targs[] = {
	1, 2, 1, 0, 3, 126, 128, 488, 
	482, 3, 483, 483, 0, 3, 4, 488, 
	6, 3, 77, 77, 0, 486, 0, 485, 
	5, 7, 63, 73, 0, 8, 0, 9, 
	0, 10, 0, 11, 0, 12, 0, 13, 
	0, 14, 0, 15, 0, 16, 0, 17, 
	24, 30, 51, 57, 0, 18, 0, 19, 
	0, 21, 23, 20, 21, 23, 20, 3, 
	22, 4, 488, 3, 0, 3, 4, 488, 
	3, 0, 23, 20, 25, 0, 26, 0, 
	28, 29, 27, 28, 29, 27, 3, 22, 
	4, 488, 3, 0, 29, 27, 31, 35, 
	42, 0, 33, 34, 32, 33, 34, 32, 
	3, 22, 4, 488, 3, 0, 34, 32, 
	37, 41, 36, 37, 41, 36, 3, 38, 
	4, 488, 39, 40, 3, 0, 3, 4, 
	488, 3, 0, 3, 38, 4, 488, 39, 
	40, 3, 0, 3, 38, 4, 488, 39, 
	40, 3, 0, 41, 36, 0, 0, 0, 
	43, 44, 0, 49, 43, 46, 50, 45, 
	46, 50, 45, 47, 48, 49, 0, 47, 
	48, 49, 0, 47, 48, 49, 0, 3, 
	4, 488, 3, 0, 50, 45, 52, 0, 
	53, 0, 55, 56, 54, 55, 56, 54, 
	3, 22, 4, 488, 3, 0, 56, 54, 
	58, 0, 59, 0, 61, 62, 60, 61, 
	62, 60, 3, 22, 4, 488, 3, 0, 
	62, 60, 64, 0, 65, 0, 66, 0, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 72, 0, 17, 24, 30, 51, 
	57, 0, 74, 0, 75, 0, 76, 0, 
	17, 24, 30, 51, 57, 0, 3, 78, 
	79, 86, 77, 4, 92, 488, 114, 77, 
	120, 3, 77, 77, 77, 0, 3, 4, 
	488, 3, 0, 80, 0, 81, 0, 83, 
	85, 82, 83, 85, 82, 3, 84, 4, 
	488, 3, 0, 3, 4, 488, 3, 0, 
	85, 82, 87, 0, 88, 0, 90, 91, 
	89, 90, 91, 89, 3, 84, 4, 488, 
	3, 0, 91, 89, 93, 97, 104, 0, 
	95, 96, 94, 95, 96, 94, 3, 84, 
	4, 488, 3, 0, 96, 94, 99, 103, 
	98, 99, 103, 98, 3, 100, 4, 488, 
	101, 102, 3, 0, 3, 4, 488, 3, 
	0, 3, 100, 4, 488, 101, 102, 3, 
	0, 3, 100, 4, 488, 101, 102, 3, 
	0, 103, 98, 0, 0, 0, 105, 106, 
	0, 111, 105, 108, 113, 107, 108, 113, 
	107, 109, 110, 111, 0, 109, 110, 111, 
	0, 109, 110, 111, 0, 3, 4, 488, 
	112, 3, 0, 3, 4, 488, 3, 0, 
	113, 107, 115, 0, 116, 0, 118, 119, 
	117, 118, 119, 117, 3, 84, 4, 488, 
	3, 0, 119, 117, 121, 0, 122, 0, 
	124, 125, 123, 124, 125, 123, 3, 84, 
	4, 488, 3, 0, 125, 123, 489, 127, 
	127, 0, 127, 490, 127, 127, 127, 127, 
	0, 129, 147, 160, 165, 183, 200, 468, 
	478, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 136, 0, 
	137, 0, 138, 0, 139, 0, 140, 0, 
	141, 0, 142, 0, 143, 0, 144, 0, 
	145, 0, 146, 145, 0, 3, 4, 128, 
	488, 3, 0, 148, 0, 149, 0, 150, 
	0, 151, 0, 152, 0, 153, 0, 154, 
	0, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 146, 159, 0, 161, 0, 
	162, 0, 163, 0, 164, 0, 3, 4, 
	128, 488, 3, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 176, 
	0, 172, 0, 173, 0, 174, 0, 175, 
	0, 3, 4, 128, 488, 3, 0, 177, 
	0, 178, 0, 179, 0, 180, 0, 181, 
	0, 182, 0, 3, 4, 128, 488, 3, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 193, 0, 189, 0, 190, 0, 
	191, 0, 192, 0, 3, 4, 128, 488, 
	3, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 198, 0, 199, 0, 3, 4, 
	128, 488, 3, 0, 201, 380, 0, 202, 
	0, 203, 0, 204, 0, 205, 224, 237, 
	242, 260, 277, 366, 376, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	219, 0, 220, 0, 221, 0, 222, 221, 
	0, 223, 204, 0, 3, 4, 128, 488, 
	3, 0, 225, 0, 226, 0, 227, 0, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	232, 0, 233, 0, 234, 0, 235, 0, 
	236, 0, 222, 236, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 223, 204, 0, 
	243, 0, 244, 0, 245, 0, 246, 0, 
	247, 0, 248, 253, 0, 249, 0, 250, 
	0, 251, 0, 252, 0, 223, 204, 0, 
	254, 0, 255, 0, 256, 0, 257, 0, 
	258, 0, 259, 0, 223, 204, 0, 261, 
	0, 262, 0, 263, 0, 264, 0, 265, 
	270, 0, 266, 0, 267, 0, 268, 0, 
	269, 0, 223, 204, 0, 271, 0, 272, 
	0, 273, 0, 274, 0, 275, 0, 276, 
	0, 223, 204, 0, 278, 0, 279, 0, 
	280, 0, 281, 300, 345, 0, 282, 0, 
	283, 0, 284, 0, 285, 0, 286, 0, 
	287, 293, 297, 288, 0, 288, 0, 289, 
	290, 288, 0, 223, 204, 0, 289, 291, 
	291, 0, 292, 0, 289, 292, 0, 294, 
	0, 295, 0, 296, 0, 289, 0, 298, 
	0, 299, 0, 289, 0, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 324, 0, 
	306, 0, 307, 0, 308, 0, 309, 0, 
	310, 0, 311, 317, 321, 312, 0, 312, 
	0, 313, 314, 312, 0, 223, 204, 0, 
	313, 315, 315, 0, 316, 0, 313, 316, 
	0, 318, 0, 319, 0, 320, 0, 313, 
	0, 322, 0, 323, 0, 313, 0, 325, 
	0, 326, 0, 327, 0, 328, 0, 329, 
	0, 330, 0, 331, 0, 332, 338, 342, 
	333, 0, 333, 0, 334, 335, 333, 0, 
	223, 204, 0, 334, 336, 336, 0, 337, 
	0, 334, 337, 0, 339, 0, 340, 0, 
	341, 0, 334, 0, 343, 0, 344, 0, 
	334, 0, 346, 0, 347, 0, 348, 0, 
	349, 0, 350, 0, 351, 0, 352, 0, 
	353, 359, 363, 354, 0, 354, 0, 355, 
	356, 354, 0, 223, 204, 0, 355, 357, 
	357, 0, 358, 0, 355, 358, 0, 360, 
	0, 361, 0, 362, 0, 355, 0, 364, 
	0, 365, 0, 355, 0, 367, 0, 368, 
	0, 369, 0, 370, 0, 371, 0, 372, 
	0, 373, 0, 374, 0, 375, 0, 223, 
	204, 0, 377, 0, 378, 0, 379, 0, 
	223, 204, 0, 381, 0, 382, 0, 383, 
	402, 447, 0, 384, 0, 385, 0, 386, 
	0, 387, 0, 388, 0, 389, 395, 399, 
	390, 0, 390, 0, 391, 392, 390, 0, 
	3, 4, 128, 488, 3, 0, 391, 393, 
	393, 0, 394, 0, 391, 394, 0, 396, 
	0, 397, 0, 398, 0, 391, 0, 400, 
	0, 401, 0, 391, 0, 403, 0, 404, 
	0, 405, 0, 406, 0, 407, 426, 0, 
	408, 0, 409, 0, 410, 0, 411, 0, 
	412, 0, 413, 419, 423, 414, 0, 414, 
	0, 415, 416, 414, 0, 3, 4, 128, 
	488, 3, 0, 415, 417, 417, 0, 418, 
	0, 415, 418, 0, 420, 0, 421, 0, 
	422, 0, 415, 0, 424, 0, 425, 0, 
	415, 0, 427, 0, 428, 0, 429, 0, 
	430, 0, 431, 0, 432, 0, 433, 0, 
	434, 440, 444, 435, 0, 435, 0, 436, 
	437, 435, 0, 3, 4, 128, 488, 3, 
	0, 436, 438, 438, 0, 439, 0, 436, 
	439, 0, 441, 0, 442, 0, 443, 0, 
	436, 0, 445, 0, 446, 0, 436, 0, 
	448, 0, 449, 0, 450, 0, 451, 0, 
	452, 0, 453, 0, 454, 0, 455, 461, 
	465, 456, 0, 456, 0, 457, 458, 456, 
	0, 3, 4, 128, 488, 3, 0, 457, 
	459, 459, 0, 460, 0, 457, 460, 0, 
	462, 0, 463, 0, 464, 0, 457, 0, 
	466, 0, 467, 0, 457, 0, 469, 0, 
	470, 0, 471, 0, 472, 0, 473, 0, 
	474, 0, 475, 0, 476, 0, 477, 0, 
	3, 4, 128, 488, 3, 0, 479, 0, 
	480, 0, 481, 0, 3, 4, 128, 488, 
	3, 0, 3, 4, 128, 488, 3, 483, 
	483, 0, 3, 483, 4, 128, 488, 483, 
	3, 483, 483, 483, 0, 484, 5, 2, 
	1, 0, 484, 5, 2, 1, 0, 487, 
	5, 2, 487, 0, 487, 5, 2, 487, 
	0, 487, 5, 2, 487, 0, 487, 5, 
	2, 487, 0, 487, 5, 2, 487, 0, 
	0
};

static const short _hext_trans_actions[] = {
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 67, 67, 1, 0, 0, 0, 
	0, 0, 47, 47, 1, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 39, 
	39, 39, 39, 39, 1, 0, 1, 0, 
	1, 170, 51, 51, 53, 0, 0, 258, 
	63, 258, 258, 258, 1, 210, 210, 210, 
	210, 1, 0, 0, 0, 1, 0, 1, 
	170, 51, 51, 53, 0, 0, 242, 59, 
	242, 242, 242, 1, 0, 0, 0, 0, 
	0, 1, 170, 51, 51, 53, 0, 0, 
	226, 55, 226, 226, 226, 1, 0, 0, 
	155, 27, 27, 29, 0, 0, 278, 164, 
	278, 278, 0, 0, 278, 1, 206, 206, 
	206, 206, 1, 310, 198, 310, 310, 33, 
	33, 310, 1, 298, 194, 298, 298, 31, 
	31, 298, 1, 0, 0, 1, 1, 1, 
	43, 45, 1, 45, 0, 155, 27, 27, 
	29, 0, 0, 0, 0, 35, 1, 33, 
	33, 161, 1, 31, 31, 158, 1, 173, 
	173, 173, 173, 1, 0, 0, 0, 1, 
	0, 1, 170, 51, 51, 53, 0, 0, 
	234, 57, 234, 234, 234, 1, 0, 0, 
	0, 1, 0, 1, 170, 51, 51, 53, 
	0, 0, 250, 61, 250, 250, 250, 1, 
	0, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 41, 41, 41, 41, 
	41, 1, 0, 1, 0, 1, 0, 1, 
	37, 37, 37, 37, 37, 1, 288, 167, 
	49, 49, 0, 288, 49, 288, 49, 0, 
	49, 288, 0, 0, 0, 1, 222, 222, 
	222, 222, 1, 0, 1, 0, 1, 170, 
	51, 51, 53, 0, 0, 262, 63, 262, 
	262, 262, 1, 218, 218, 218, 218, 1, 
	0, 0, 0, 1, 0, 1, 170, 51, 
	51, 53, 0, 0, 246, 59, 246, 246, 
	246, 1, 0, 0, 0, 0, 0, 1, 
	170, 51, 51, 53, 0, 0, 230, 55, 
	230, 230, 230, 1, 0, 0, 155, 27, 
	27, 29, 0, 0, 283, 164, 283, 283, 
	0, 0, 283, 1, 214, 214, 214, 214, 
	1, 316, 198, 316, 316, 33, 33, 316, 
	1, 304, 194, 304, 304, 31, 31, 304, 
	1, 0, 0, 1, 1, 1, 43, 45, 
	1, 45, 0, 155, 27, 27, 29, 0, 
	0, 0, 0, 35, 1, 33, 33, 161, 
	1, 31, 31, 158, 1, 176, 176, 176, 
	0, 176, 1, 202, 202, 202, 202, 1, 
	0, 0, 0, 1, 0, 1, 170, 51, 
	51, 53, 0, 0, 238, 57, 238, 238, 
	238, 1, 0, 0, 0, 1, 0, 1, 
	170, 51, 51, 53, 0, 0, 254, 61, 
	254, 254, 254, 1, 0, 0, 188, 75, 
	75, 1, 0, 77, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	19, 1, 21, 0, 1, 73, 73, 73, 
	73, 73, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 15, 1, 17, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 92, 92, 
	92, 92, 92, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 116, 116, 116, 116, 116, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 122, 122, 122, 122, 122, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 128, 128, 128, 128, 
	128, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 134, 134, 
	134, 134, 134, 1, 0, 0, 1, 0, 
	1, 0, 1, 23, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 19, 1, 21, 0, 
	1, 25, 25, 1, 71, 71, 71, 71, 
	71, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	15, 1, 17, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 89, 89, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 113, 113, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 119, 119, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 125, 125, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 131, 131, 1, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	7, 0, 0, 7, 1, 0, 1, 9, 
	9, 0, 1, 95, 95, 1, 11, 86, 
	86, 1, 0, 1, 13, 0, 1, 0, 
	1, 0, 1, 0, 1, 3, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 7, 0, 0, 7, 1, 0, 
	1, 9, 9, 0, 1, 101, 101, 1, 
	11, 86, 86, 1, 0, 1, 13, 0, 
	1, 0, 1, 0, 1, 0, 1, 3, 
	1, 0, 1, 0, 1, 5, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 7, 0, 0, 
	7, 1, 0, 1, 9, 9, 0, 1, 
	137, 137, 1, 11, 86, 86, 1, 0, 
	1, 13, 0, 1, 0, 1, 0, 1, 
	0, 1, 3, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	7, 0, 0, 7, 1, 0, 1, 9, 
	9, 0, 1, 107, 107, 1, 11, 86, 
	86, 1, 0, 1, 13, 0, 1, 0, 
	1, 0, 1, 0, 1, 3, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 143, 
	143, 1, 0, 1, 0, 1, 0, 1, 
	149, 149, 1, 0, 1, 0, 1, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 7, 0, 0, 
	7, 1, 0, 1, 9, 9, 0, 1, 
	98, 98, 98, 98, 98, 1, 11, 86, 
	86, 1, 0, 1, 13, 0, 1, 0, 
	1, 0, 1, 0, 1, 3, 1, 0, 
	1, 0, 1, 5, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 7, 0, 0, 7, 1, 0, 
	1, 9, 9, 0, 1, 104, 104, 104, 
	104, 104, 1, 11, 86, 86, 1, 0, 
	1, 13, 0, 1, 0, 1, 0, 1, 
	0, 1, 3, 1, 0, 1, 0, 1, 
	5, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	7, 0, 0, 7, 1, 0, 1, 9, 
	9, 0, 1, 140, 140, 140, 140, 140, 
	1, 11, 86, 86, 1, 0, 1, 13, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	3, 1, 0, 1, 0, 1, 5, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 7, 0, 
	0, 7, 1, 0, 1, 9, 9, 0, 
	1, 110, 110, 110, 110, 110, 1, 11, 
	86, 86, 1, 0, 1, 13, 0, 1, 
	0, 1, 0, 1, 0, 1, 3, 1, 
	0, 1, 0, 1, 5, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	146, 146, 146, 146, 146, 1, 0, 1, 
	0, 1, 0, 1, 152, 152, 152, 152, 
	152, 1, 65, 65, 65, 65, 65, 179, 
	179, 1, 69, 0, 69, 69, 69, 0, 
	69, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 182, 
	182, 182, 182, 1, 0, 0, 0, 0, 
	1, 185, 185, 185, 185, 1, 266, 266, 
	266, 266, 1, 79, 79, 79, 79, 1, 
	0
};

static const short _hext_eof_actions[] = {
	0, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 81, 270, 81, 
	274, 293, 191
};

static const int hext_start = 485;
static const int hext_first_final = 485;
static const int hext_error = 0;

static const int hext_en_main = 485;


#line 84 "Parser.h.rl"

} // namespace ragel


/// Parser is responsible for parsing hext and producing Rules.
class Parser
{
public:
  /// Construct a Parser to parse hext rule definitions described in range
  /// `begin` to `end`. Pointers must stay valid until the last call to
  /// `Parser::parse()`.
  Parser(const char * begin, const char * end);

  /// Parse hext and produce a Rule.
  /// Throw `ParseError` on invalid input.
  std::unique_ptr<Rule> parse();

private:
  /// Throw `ParseError` with an error message marking an unexpected character.
  void throw_unexpected() const;

  /// Throw `ParseError` with an error message marking an unknown token.
  void throw_unknown_token(
    const std::string& tok,
    const std::string& tok_name
  ) const;

  /// Throw `ParseError` with an error message marking an invalid regular
  /// expression.
  void throw_regex_error(
    std::string::size_type mark_len,
    boost::regex_constants::error_type e_code
  ) const;

  /// Throw `ParseError` with an error message marking an invalid or missing
  /// closing tag.
  void throw_expected_closing_tag(
    const std::string& input,
    boost::optional<GumboTag> expected_closing_tag
  ) const;

  /// Throw `ParseError` with error message `error_msg`. Mark the error location
  /// in hext with `mark_len` amount of characters up to the currently
  /// processed character.
  void throw_error(
    const std::string& error_msg,
    std::string::size_type mark_len
  ) const;

  /// Print an error at the current location within hext. Print hext with line
  /// numbers up to the currently examined character. `mark_len` denotes the
  /// amount of '^' characters that are used to mark the error location up to
  /// the current character.
  void print_error_location(
    std::string::size_type mark_len,
    std::ostream& out
  ) const;

  /// The beginning of the hext input.
  const char * p_begin_;

  /// The current character that ragel is processing within the hext input.
  const char * p;

  /// The end of the hext input.
  const char * pe;

  /// The end of the hext input. Same as `Parser::pe`.
  const char * eof;

  /// Ragel's current state.
  int cs;
};


} // namespace hext


#endif // HEXT_PARSER_H_INCLUDED

